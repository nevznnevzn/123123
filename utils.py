import calendar
from datetime import datetime, timedelta
from typing import List, Tuple

from aiogram import Bot
from aiogram.types import BotCommand, BotCommandScopeDefault, BotCommandScopeChat


async def set_bot_commands(bot: Bot, admin_ids: List[int] = None):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ—Ç–∞ –≤ –º–µ–Ω—é Telegram.
    –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - —Ç–æ–ª—å–∫–æ /start
    –î–ª—è –∞–¥–º–∏–Ω–æ–≤ - —Ç–æ–ª—å–∫–æ /start –∏ /admin
    """
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ /start)
    user_commands = [
        BotCommand(command="/start", description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
    ]

    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (—Ç–æ–ª—å–∫–æ /start –∏ /admin)
    admin_commands = [
        BotCommand(command="/start", description="üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="/admin", description="üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"),
    ]

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await bot.set_my_commands(user_commands, BotCommandScopeDefault())

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if admin_ids:
        for admin_id in admin_ids:
            try:
                await bot.set_my_commands(
                    admin_commands,
                    BotCommandScopeChat(chat_id=admin_id)
                )
            except Exception as e:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤ –∞–¥–º–∏–Ω–æ–≤
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")


def get_prediction_period(
    prediction_type: str, current_time: datetime = None
) -> Tuple[datetime, datetime]:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –ø–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞

    Args:
        prediction_type: –¢–∏–ø –ø—Ä–æ–≥–Ω–æ–∑–∞ ("—Å–µ–≥–æ–¥–Ω—è", "–Ω–µ–¥–µ–ª—è", "–º–µ—Å—è—Ü", "–∫–≤–∞—Ä—Ç–∞–ª")
        current_time: –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è datetime.utcnow())

    Returns:
        Tuple[datetime, datetime]: (–Ω–∞—á–∞–ª–æ_–ø–µ—Ä–∏–æ–¥–∞, –∫–æ–Ω–µ—Ü_–ø–µ—Ä–∏–æ–¥–∞)
    """
    if current_time is None:
        current_time = datetime.utcnow()

    if prediction_type == "—Å–µ–≥–æ–¥–Ω—è":
        # –ü—Ä–æ–≥–Ω–æ–∑ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
        start = current_time.replace(hour=0, minute=0, second=0, microsecond=0)
        end = start + timedelta(days=1) - timedelta(microseconds=1)
        return start, end

    elif prediction_type == "–Ω–µ–¥–µ–ª—è":
        # –ü—Ä–æ–≥–Ω–æ–∑ –¥–µ–π—Å—Ç–≤—É–µ—Ç 7 –¥–Ω–µ–π —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
        start = current_time.replace(hour=0, minute=0, second=0, microsecond=0)
        end = start + timedelta(days=7) - timedelta(microseconds=1)
        return start, end

    elif prediction_type == "–º–µ—Å—è—Ü":
        # –ü—Ä–æ–≥–Ω–æ–∑ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        start = current_time.replace(day=1, hour=0, minute=0, second=0, microsecond=0)

        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
        year = current_time.year
        month = current_time.month
        last_day = calendar.monthrange(year, month)[1]
        end = current_time.replace(
            day=last_day, hour=23, minute=59, second=59, microsecond=999999
        )

        return start, end

    elif prediction_type == "–∫–≤–∞—Ä—Ç–∞–ª":
        # –ü—Ä–æ–≥–Ω–æ–∑ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—É—â–µ–≥–æ –∫–≤–∞—Ä—Ç–∞–ª–∞
        year = current_time.year
        month = current_time.month

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–≤–∞—Ä—Ç–∞–ª –∏ –µ–≥–æ –∫–æ–Ω–µ—á–Ω—ã–π –º–µ—Å—è—Ü
        if month <= 3:
            quarter_end_month = 3
        elif month <= 6:
            quarter_end_month = 6
        elif month <= 9:
            quarter_end_month = 9
        else:
            quarter_end_month = 12

        # –ù–∞—á–∞–ª–æ –∫–≤–∞—Ä—Ç–∞–ª–∞
        quarter_start_month = ((quarter_end_month - 1) // 3) * 3 + 1
        start = current_time.replace(
            month=quarter_start_month, day=1, hour=0, minute=0, second=0, microsecond=0
        )

        # –ö–æ–Ω–µ—Ü –∫–≤–∞—Ä—Ç–∞–ª–∞
        last_day = calendar.monthrange(year, quarter_end_month)[1]
        end = current_time.replace(
            month=quarter_end_month,
            day=last_day,
            hour=23,
            minute=59,
            second=59,
            microsecond=999999,
        )

        return start, end

    else:
        raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–≥–Ω–æ–∑–∞: {prediction_type}")


def format_period_info(prediction_type: str, valid_until: datetime) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–∏–æ–¥–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞

    Args:
        prediction_type: –¢–∏–ø –ø—Ä–æ–≥–Ω–æ–∑–∞
        valid_until: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–µ—Ä–∏–æ–¥–µ
    """
    now = datetime.utcnow()
    time_left = valid_until - now

    if time_left.total_seconds() <= 0:
        return "‚ö†Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –∏—Å—Ç–µ–∫"

    if prediction_type == "—Å–µ–≥–æ–¥–Ω—è":
        if time_left.total_seconds() < 3600:  # –ú–µ–Ω—å—à–µ —á–∞—Å–∞
            minutes = int(time_left.total_seconds() // 60)
            return f"‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –µ—â–µ {minutes} –º–∏–Ω."
        else:
            hours = int(time_left.total_seconds() // 3600)
            return f"‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –µ—â–µ {hours} —á."

    elif prediction_type == "–Ω–µ–¥–µ–ª—è":
        days = time_left.days
        if days == 0:
            hours = int(time_left.total_seconds() // 3600)
            return f"‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –µ—â–µ {hours} —á."
        else:
            return f"‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –µ—â–µ {days} –¥–Ω."

    elif prediction_type in ["–º–µ—Å—è—Ü", "–∫–≤–∞—Ä—Ç–∞–ª"]:
        days = time_left.days
        if days == 0:
            hours = int(time_left.total_seconds() // 3600)
            return f"‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –µ—â–µ {hours} —á."
        else:
            return f"‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –µ—â–µ {days} –¥–Ω."

    return ""


def get_next_available_time(
    prediction_type: str, current_time: datetime = None
) -> datetime:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞

    Args:
        prediction_type: –¢–∏–ø –ø—Ä–æ–≥–Ω–æ–∑–∞
        current_time: –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è

    Returns:
        datetime: –í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    """
    if current_time is None:
        current_time = datetime.utcnow()

    _, period_end = get_prediction_period(prediction_type, current_time)

    # –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    return period_end + timedelta(seconds=1)
