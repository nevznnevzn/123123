"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç AI –ø—Ä–æ–≥–Ω–æ–∑–∞
"""
import asyncio
import logging
from services.ai_predictions import AIPredictionService
from models import PlanetPosition

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(levelname)s - %(message)s')

async def quick_test():
    print("üöÄ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç AI –ø—Ä–æ–≥–Ω–æ–∑–∞...")
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
    ai_service = AIPredictionService()
    
    # –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–ª–∞–Ω–µ—Ç—ã
    test_planets = {
        "–°–æ–ª–Ω—Ü–µ": PlanetPosition(sign="–õ–µ–≤", degree=15.0),
        "–õ—É–Ω–∞": PlanetPosition(sign="–°–∫–æ—Ä–ø–∏–æ–Ω", degree=22.0),
        "–ú–µ—Ä–∫—É—Ä–∏–π": PlanetPosition(sign="–î–µ–≤–∞", degree=8.0)
    }
    
    try:
        print("üîÆ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...")
        prediction = await ai_service.generate_prediction(
            user_planets=test_planets,
            prediction_type="—Å–µ–≥–æ–¥–Ω—è",
            owner_name="–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        )
        
        print("‚úÖ –ü–†–û–ì–ù–û–ó –ü–û–õ–£–ß–ï–ù:")
        print("-" * 50)
        print(prediction)
        print("-" * 50)
        print(f"üìè –î–ª–∏–Ω–∞: {len(prediction)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ AI –º–∞—Ä–∫–µ—Ä–∞
        if "‚ú® –°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ò–ò" in prediction:
            print("ü§ñ AI –†–ê–ë–û–¢–ê–ï–¢! ‚úÖ")
        else:
            print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback —Ä–µ–∂–∏–º")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(quick_test()) 