"""
–ë—ã—Å—Ç—Ä–∞—è —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ SolarBalance
"""
import asyncio
import logging
from datetime import datetime
from database_async import AsyncDatabaseManager
from services.ai_predictions import AIPredictionService
from services.star_advice_service import StarAdviceService
from services.motivation_service import MotivationService
from services.subscription_service import SubscriptionService
from services.antispam_service import AntiSpamService
from services.astro_calculations import AstroService

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏
logging.basicConfig(level=logging.ERROR)

async def quick_check():
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("üöÄ –ë–´–°–¢–†–ê–Ø –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê SOLARBALANCE")
    print("=" * 50)
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
        print("\nüìä 1. –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        db = AsyncDatabaseManager("sqlite+aiosqlite:///quick_test.db")
        await db.init_db()
        print("‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ AI —Å–µ—Ä–≤–∏—Å–æ–≤
        print("\nü§ñ 2. –ü–†–û–í–ï–†–ö–ê AI –°–ï–†–í–ò–°–û–í")
        ai_service = AIPredictionService()
        if ai_service.client:
            print("‚úÖ AI —Å–µ—Ä–≤–∏—Å –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå AI —Å–µ—Ä–≤–∏—Å –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
        star_service = StarAdviceService()
        print("‚úÖ –°–µ—Ä–≤–∏—Å –∑–≤–µ–∑–¥–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        motivation_service = MotivationService(ai_service)
        print("‚úÖ –°–µ—Ä–≤–∏—Å –º–æ—Ç–∏–≤–∞—Ü–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–∑–Ω–µ—Å-—Å–µ—Ä–≤–∏—Å–æ–≤
        print("\nüíº 3. –ü–†–û–í–ï–†–ö–ê –ë–ò–ó–ù–ï–°-–°–ï–†–í–ò–°–û–í")
        subscription_service = SubscriptionService()
        print("‚úÖ –°–µ—Ä–≤–∏—Å –ø–æ–¥–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        antispam_service = AntiSpamService()
        print("‚úÖ –ê–Ω—Ç–∏—Å–ø–∞–º —Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞")
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
        print("\n‚≠ê 4. –ü–†–û–í–ï–†–ö–ê –ê–°–¢–†–û–õ–û–ì–ò–ß–ï–°–ö–ò–• –†–ê–°–ß–ï–¢–û–í")
        astro_service = AstroService()
        print("‚úÖ –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # 5. –¢–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
        print("\nüë§ 5. –¢–ï–°–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ì–û –°–¶–ï–ù–ê–†–ò–Ø")
        test_user_id = 999999
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user, created = await db.get_or_create_user(
            telegram_id=test_user_id,
            name="–¢–µ—Å—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        )
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {'—Å–æ–∑–¥–∞–Ω' if created else '–Ω–∞–π–¥–µ–Ω'}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
        updated_user = await db.update_user_profile(
            telegram_id=test_user_id,
            name="–¢–µ—Å—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            gender="–ñ–µ–Ω—Å–∫–∏–π",
            birth_year=1995,
            birth_city="–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
            birth_date=datetime(1995, 3, 20, 14, 30),
            birth_time_specified=True
        )
        print("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
        test_planets = {
            "–°–æ–ª–Ω—Ü–µ": {"sign": "–†—ã–±—ã", "degree": 5.0},
            "–õ—É–Ω–∞": {"sign": "–ë–ª–∏–∑–Ω–µ—Ü—ã", "degree": 12.0},
            "–ú–µ—Ä–∫—É—Ä–∏–π": {"sign": "–†—ã–±—ã", "degree": 18.0},
        }
        
        chart = await db.create_natal_chart(
            telegram_id=test_user_id,
            name="–¢–µ—Å—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            city="–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
            latitude=59.9311,
            longitude=30.3609,
            timezone="Europe/Moscow",
            birth_date=datetime(1995, 3, 20, 14, 30),
            birth_time_specified=True,
            has_warning=False,
            planets_data=test_planets
        )
        print("‚úÖ –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞")
        
        # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∏ –ø–æ–¥–ø–∏—Å–∫–∏
        print("\nüíé 6. –ü–†–û–í–ï–†–ö–ê –õ–ò–ú–ò–¢–û–í –ò –ü–û–î–ü–ò–°–ö–ò")
        subscription = await db.get_or_create_subscription(test_user_id)
        print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞: {subscription.subscription_type.value}")
        
        is_premium = subscription_service.is_user_premium(test_user_id)
        print(f"‚úÖ Premium —Å—Ç–∞—Ç—É—Å: {'–î–∞' if is_premium else '–ù–µ—Ç'}")
        
        limits = antispam_service.check_limits(test_user_id, is_premium=False)
        print(f"‚úÖ –õ–∏–º–∏—Ç—ã: {limits['questions_left']} –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å")
        
        # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        print("\nüìà 7. –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–•")
        charts = await db.get_user_charts(test_user_id)
        print(f"‚úÖ –ù–∞—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã: {len(charts)}")
        
        predictions = await db.get_user_predictions(test_user_id)
        print(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑—ã: {len(predictions)}")
        
        # 8. –û—á–∏—Å—Ç–∫–∞
        print("\nüßπ 8. –û–ß–ò–°–¢–ö–ê")
        await db.delete_user_data(test_user_id)
        await db.close()
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ SolarBalance –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç")
        print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    success = await quick_check()
    
    if success:
        print("\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ô –í–´–í–û–î:")
        print("‚úÖ SolarBalance –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω-–∑–∞–ø—É—Å–∫—É!")
        print("‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        print("‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ")
        print("‚úÖ AI-—Å–µ—Ä–≤–∏—Å—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        print("‚úÖ –°–∏—Å—Ç–µ–º—ã –∑–∞—â–∏—Ç—ã –∞–∫—Ç–∏–≤–Ω—ã")
        print("\nüöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏!")
    else:
        print("\n‚ö†Ô∏è –§–ò–ù–ê–õ–¨–ù–´–ô –í–´–í–û–î:")
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")

if __name__ == "__main__":
    asyncio.run(main()) 