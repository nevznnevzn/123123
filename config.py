import os
from typing import Optional

from dotenv import load_dotenv

load_dotenv()


class Config:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    # === TELEGRAM ===
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    if not BOT_TOKEN:
        raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    # === ADMIN ===
    ADMIN_IDS_STR = os.getenv("ADMIN_IDS", "")
    ADMIN_IDS = []
    if ADMIN_IDS_STR:
        try:
            ADMIN_IDS = [int(admin_id.strip()) for admin_id in ADMIN_IDS_STR.split(",") if admin_id.strip()]
        except ValueError:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ADMIN_IDS, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
            ADMIN_IDS = []

    # === AI ===
    AI_API = os.getenv("AI_API")
    AI_REQUEST_TIMEOUT = int(os.getenv("AI_REQUEST_TIMEOUT", "30"))
    AI_MAX_RETRIES = int(os.getenv("AI_MAX_RETRIES", "3"))

    # === DATABASE ===
    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ SQLite –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, —Ç–∞–∫ –∏ PostgreSQL –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    DATABASE_URL = os.getenv("DATABASE_URL")
    
    # –ï—Å–ª–∏ DATABASE_URL –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º SQLite –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if not DATABASE_URL:
        DATABASE_URL = "sqlite+aiosqlite:///solarbalance.db"
        print("‚ö†Ô∏è DATABASE_URL –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ë–î –ø–æ URL
    IS_POSTGRESQL = DATABASE_URL.startswith(("postgresql://", "postgres://"))
    IS_SQLITE = DATABASE_URL.startswith("sqlite")
    
    if IS_POSTGRESQL:
        print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PostgreSQL")
    elif IS_SQLITE:
        print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite (—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)")
    else:
        print("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ë–î, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ DATABASE_URL")

    # === SWISS EPHEMERIS ===
    EPHEMERIS_PATH = os.getenv("EPHEMERIS_PATH", ".")

    # === ZODIAC SIGNS ===
    ZODIAC_SIGNS = [
        "–û–≤–µ–Ω", "–¢–µ–ª–µ—Ü", "–ë–ª–∏–∑–Ω–µ—Ü—ã", "–†–∞–∫", "–õ–µ–≤", "–î–µ–≤–∞",
        "–í–µ—Å—ã", "–°–∫–æ—Ä–ø–∏–æ–Ω", "–°—Ç—Ä–µ–ª–µ—Ü", "–ö–æ–∑–µ—Ä–æ–≥", "–í–æ–¥–æ–ª–µ–π", "–†—ã–±—ã"
    ]

    # === SUBSCRIPTION LIMITS ===
    FREE_USER_LIMITS = {
        "natal_charts": 3,
        "questions_per_day": 5,
        "planets": ["–°–æ–ª–Ω—Ü–µ", "–õ—É–Ω–∞", "–ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç"]
    }

    PREMIUM_USER_LIMITS = {
        "natal_charts": -1,  # –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ
        "questions_per_day": -1,  # –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ
        "planets": [
            "–°–æ–ª–Ω—Ü–µ", "–õ—É–Ω–∞", "–ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç", "–ú–µ—Ä–∫—É—Ä–∏–π", "–í–µ–Ω–µ—Ä–∞", "–ú–∞—Ä—Å",
            "–Æ–ø–∏—Ç–µ—Ä", "–°–∞—Ç—É—Ä–Ω", "–£—Ä–∞–Ω", "–ù–µ–ø—Ç—É–Ω", "–ü–ª—É—Ç–æ–Ω"
        ]
    }

    # === ANTI-SPAM ===
    ANTI_SPAM_CONFIG = {
        "questions_per_day": 5,
        "premium_questions_per_day": 50,
        "reset_hour": 0,  # –ß–∞—Å —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–æ–≤ (UTC)
    }

    # === LOGGING ===
    LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")
    LOG_FORMAT = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"

    # === ENVIRONMENT ===
    ENVIRONMENT = os.getenv("ENVIRONMENT", "development")
    IS_PRODUCTION = ENVIRONMENT.lower() == "production"
    IS_DEVELOPMENT = ENVIRONMENT.lower() == "development"

    # === PERFORMANCE ===
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è PostgreSQL
    POSTGRESQL_CONFIG = {
        "pool_size": int(os.getenv("POSTGRESQL_POOL_SIZE", "20")),
        "max_overflow": int(os.getenv("POSTGRESQL_MAX_OVERFLOW", "30")),
        "pool_pre_ping": True,
        "pool_recycle": int(os.getenv("POSTGRESQL_POOL_RECYCLE", "3600")),
        "echo": os.getenv("POSTGRESQL_ECHO", "false").lower() == "true",
    }

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è SQLite
    SQLITE_CONFIG = {
        "pool_pre_ping": True,
        "pool_recycle": 3600,
        "echo": False,
    }

    @classmethod
    def get_database_config(cls) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ë–î –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞"""
        if cls.IS_POSTGRESQL:
            return cls.POSTGRESQL_CONFIG
        else:
            return cls.SQLITE_CONFIG
    
    @classmethod
    def is_production(cls) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–æ–º"""
        return cls.IS_PRODUCTION

    @classmethod
    def validate_config(cls) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        errors = []
        
        if not cls.BOT_TOKEN:
            errors.append("BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω")
        
        if not cls.DATABASE_URL:
            errors.append("DATABASE_URL –Ω–µ —É–∫–∞–∑–∞–Ω")
        
        if cls.IS_POSTGRESQL and not cls.AI_API:
            errors.append("AI_API –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞")
        
        if errors:
            print("‚ùå –û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
            for error in errors:
                print(f"  - {error}")
            return False
        
        return True

    @classmethod
    def print_config_summary(cls):
        """–í—ã–≤–µ—Å—Ç–∏ –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("\nüìã –°–í–û–î–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:")
        print("=" * 40)
        print(f"üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: {cls.ENVIRONMENT}")
        print(f"ü§ñ AI API: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if cls.AI_API else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
        print(f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'PostgreSQL' if cls.IS_POSTGRESQL else 'SQLite'}")
        print(f"üîß –†–µ–∂–∏–º: {'–ü—Ä–æ–¥–∞–∫—à–µ–Ω' if cls.IS_PRODUCTION else '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞'}")
        
        if cls.IS_POSTGRESQL:
            print(f"üìä –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {cls.POSTGRESQL_CONFIG['pool_size']}")
            print(f"üîÑ –ú–∞–∫—Å. –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ: {cls.POSTGRESQL_CONFIG['max_overflow']}")
        
        print("=" * 40)


# –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
if not Config.validate_config():
    raise RuntimeError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")

# –í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
Config.print_config_summary()
