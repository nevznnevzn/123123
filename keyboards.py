from typing import List

from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder


class Keyboards:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –±–æ—Ç–∞"""

    @staticmethod
    def main_menu(has_charts: bool = False) -> ReplyKeyboardMarkup:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        main_button_text = "üìä –ù–∞—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã"

        keyboard = [
            [KeyboardButton(text=main_button_text), KeyboardButton(text="üîÆ –ü—Ä–æ–≥–Ω–æ–∑—ã")],
            [
                KeyboardButton(text="üíû –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å"),
                KeyboardButton(text="üåü –ó–≤—ë–∑–¥–Ω—ã–π —Å–æ–≤–µ—Ç"),
            ],
            [
                KeyboardButton(text="üåå –ó–≤—ë–∑–¥–Ω–æ–µ –Ω–µ–±–æ"),
                KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"),
            ],
            [
                KeyboardButton(text="üíé –ü–æ–¥–ø–∏—Å–∫–∞"),
            ],
        ]
        return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

    @staticmethod
    def cancel() -> ReplyKeyboardMarkup:
        """–ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã"""
        keyboard = [[KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
        return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

    @staticmethod
    def time_options() -> ReplyKeyboardMarkup:
        """–í–∞—Ä–∏–∞–Ω—Ç—ã —É–∫–∞–∑–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏"""
        keyboard = [
            [KeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ (12:00)")],
            [KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
        ]
        return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

    @staticmethod
    def profile_time_options() -> ReplyKeyboardMarkup:
        """–í–∞—Ä–∏–∞–Ω—Ç—ã —É–∫–∞–∑–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è"""
        keyboard = [
            [KeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ (12:00)")],
            [KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
        ]
        return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

    @staticmethod
    def profile_time_options_no_cancel() -> ReplyKeyboardMarkup:
        """–í–∞—Ä–∏–∞–Ω—Ç—ã —É–∫–∞–∑–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –±–µ–∑ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã"""
        keyboard = [[KeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ (12:00)")]]
        return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

    @staticmethod
    def planets_from_data(
        all_planets: List[str], user_planets: dict, current_planet: str = None
    ) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –í–°–ï–• –ø–ª–∞–Ω–µ—Ç –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        builder = InlineKeyboardBuilder()

        # –£–±–∏—Ä–∞–µ–º –ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞–Ω–µ—Ç –∫—Ä–æ–º–µ –ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç–∞
        planets_without_asc = [p for p in all_planets if p != "–ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç"]

        for planet_name in planets_without_asc:
            # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∞—è –ø–ª–∞–Ω–µ—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º "(–≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥)"
            if planet_name == current_planet:
                button_text = f"{planet_name} (–≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥)"
            else:
                button_text = f"{planet_name}"

            builder.add(
                InlineKeyboardButton(
                    text=button_text, callback_data=f"planet_{planet_name}"
                )
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if "–ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç" in user_planets:
            # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∞—è –ø–ª–∞–Ω–µ—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º "(–≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥)"
            if "–ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç" == current_planet:
                button_text = "–ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç (–≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥)"
            else:
                button_text = "–ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç"

            builder.add(
                InlineKeyboardButton(
                    text=button_text, callback_data=f"planet_–ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç"
                )
            )

        # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        builder.adjust(2)
        return builder.as_markup()

    @staticmethod
    def planets(
        planet_names: List[str], chart_id: int, is_premium: bool = True
    ) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–ª–∞–Ω–µ—Ç–∞–º–∏."""
        builder = InlineKeyboardBuilder()

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–ª–∞–Ω–µ—Ç—ã –ø–æ 2 –≤ —Ä—è–¥
        buttons_in_row = 2
        for i in range(0, len(planet_names), buttons_in_row):
            row_planets = planet_names[i : i + buttons_in_row]
            buttons = [
                InlineKeyboardButton(
                    text=planet, callback_data=f"planet_{chart_id}_{planet}"
                )
                for planet in row_planets
            ]
            builder.row(*buttons)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É Premium –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if not is_premium:
            builder.row(
                InlineKeyboardButton(
                    text="üíé –ü–æ–ª—É—á–∏—Ç—å Premium - –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ø–ª–∞–Ω–µ—Ç",
                    callback_data="upgrade_to_premium",
                )
            )

        builder.row(
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ä—Ç", callback_data="back_to_charts_list"
            )
        )
        return builder.as_markup()

    @staticmethod
    def natal_charts_list(charts) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–∞—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        builder = InlineKeyboardBuilder()

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
        for chart in charts:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Ç–∏–ø–∞ –∫–∞—Ä—Ç—ã
            chart_prefix = "üë§" if chart.chart_type == "own" else "üë•"

            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
            if chart.chart_type == "own":
                chart_name = f"{chart_prefix} {chart.city} - {chart.birth_date.strftime('%d.%m.%Y')}"
            else:
                owner_name = chart.chart_owner_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                chart_name = f"{chart_prefix} {owner_name} ({chart.city}) - {chart.birth_date.strftime('%d.%m.%Y')}"

            if chart.has_warning:
                chart_name += " ‚ö†Ô∏è"

            builder.add(
                InlineKeyboardButton(text=chart_name, callback_data=f"chart_{chart.id}")
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é"
        builder.add(
            InlineKeyboardButton(
                text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É",
                callback_data="select_chart_type",
            )
        )

        # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ 1 –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥
        builder.adjust(1)
        return builder.as_markup()

    @staticmethod
    def chart_actions(chart_id: int) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã"""
        builder = InlineKeyboardBuilder()

        builder.add(
            InlineKeyboardButton(
                text="üëÅÔ∏è –û—Ç–∫—Ä—ã—Ç—å", callback_data=f"open_chart_{chart_id}"
            )
        )

        builder.add(
            InlineKeyboardButton(
                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_chart_{chart_id}"
            )
        )

        builder.add(
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_charts_list"
            )
        )

        # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π
        builder.adjust(2, 1)
        return builder.as_markup()

    @staticmethod
    def confirm_delete(chart_id: int) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
        builder = InlineKeyboardBuilder()

        builder.add(
            InlineKeyboardButton(
                text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_chart_{chart_id}"
            )
        )

        builder.add(
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"chart_{chart_id}")
        )

        builder.adjust(1)
        return builder.as_markup()

    @staticmethod
    def prediction_types(chart_id: int) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        builder = InlineKeyboardBuilder()

        builder.add(
            InlineKeyboardButton(
                text="üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
                callback_data=f"prediction_—Å–µ–≥–æ–¥–Ω—è_{chart_id}",
            )
        )

        builder.add(
            InlineKeyboardButton(
                text="üìÜ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é",
                callback_data=f"prediction_–Ω–µ–¥–µ–ª—è_{chart_id}",
            )
        )

        builder.add(
            InlineKeyboardButton(
                text="üóìÔ∏è –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü", callback_data=f"prediction_–º–µ—Å—è—Ü_{chart_id}"
            )
        )

        builder.add(
            InlineKeyboardButton(
                text="üìä –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∫–≤–∞—Ä—Ç–∞–ª",
                callback_data=f"prediction_–∫–≤–∞—Ä—Ç–∞–ª_{chart_id}",
            )
        )

        builder.adjust(1)

        builder.row(
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ä—Ç—ã", callback_data=f"back_to_pred_charts"
            )
        )

        return builder.as_markup()

    @staticmethod
    def prediction_menu_with_existing(
        chart_id: int, existing_predictions: list = None
    ) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ"""
        builder = InlineKeyboardBuilder()

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
        if existing_predictions:
            type_names = {
                "—Å–µ–≥–æ–¥–Ω—è": "üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è",
                "–Ω–µ–¥–µ–ª—è": "üìÜ –ù–∞ –Ω–µ–¥–µ–ª—é",
                "–º–µ—Å—è—Ü": "üóìÔ∏è –ù–∞ –º–µ—Å—è—Ü",
                "–∫–≤–∞—Ä—Ç–∞–ª": "üìä –ù–∞ –∫–≤–∞—Ä—Ç–∞–ª",
            }

            builder.add(
                InlineKeyboardButton(
                    text="üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã:",
                    callback_data="dummy_header",  # –ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞-–∑–∞–≥–æ–ª–æ–≤–æ–∫
                )
            )

            for prediction in existing_predictions:
                pred_type = prediction.prediction_type
                type_name = type_names.get(pred_type, pred_type)

                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
                builder.add(
                    InlineKeyboardButton(
                        text=f"üëÅÔ∏è {type_name}",
                        callback_data=f"view_prediction_{prediction.id}",
                    )
                )

            # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            builder.add(
                InlineKeyboardButton(
                    text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑:",
                    callback_data="dummy_create_header",  # –ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞-–∑–∞–≥–æ–ª–æ–≤–æ–∫
                )
            )

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
        all_types = ["—Å–µ–≥–æ–¥–Ω—è", "–Ω–µ–¥–µ–ª—è", "–º–µ—Å—è—Ü", "–∫–≤–∞—Ä—Ç–∞–ª"]
        existing_types = [p.prediction_type for p in (existing_predictions or [])]

        type_names = {
            "—Å–µ–≥–æ–¥–Ω—è": "üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è",
            "–Ω–µ–¥–µ–ª—è": "üìÜ –ù–∞ –Ω–µ–¥–µ–ª—é",
            "–º–µ—Å—è—Ü": "üóìÔ∏è –ù–∞ –º–µ—Å—è—Ü",
            "–∫–≤–∞—Ä—Ç–∞–ª": "üìä –ù–∞ –∫–≤–∞—Ä—Ç–∞–ª",
        }

        for pred_type in all_types:
            type_name = type_names[pred_type]

            if pred_type in existing_types:
                # –ï—Å–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑ —É–∂–µ –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –ø–æ–º–µ—Ç–∫–æ–π
                builder.add(
                    InlineKeyboardButton(
                        text=f" {type_name} (–ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å)",
                        callback_data=f"prediction_{pred_type}_{chart_id}",
                    )
                )
            else:
                # –ï—Å–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–µ—Ç, –æ–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞
                builder.add(
                    InlineKeyboardButton(
                        text=f"‚ûï {type_name}",
                        callback_data=f"prediction_{pred_type}_{chart_id}",
                    )
                )

        builder.adjust(1)
        return builder.as_markup()

    @staticmethod
    def prediction_charts_list(charts) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        builder = InlineKeyboardBuilder()

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
        for chart in charts:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Ç–∏–ø–∞ –∫–∞—Ä—Ç—ã
            chart_prefix = "üë§" if chart.chart_type == "own" else "üë•"

            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
            if chart.chart_type == "own":
                chart_name = f"{chart_prefix} –í–∞—à–∞ –∫–∞—Ä—Ç–∞ ({chart.city}) - {chart.birth_date.strftime('%d.%m.%Y')}"
            else:
                owner_name = chart.chart_owner_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                chart_name = f"{chart_prefix} {owner_name} ({chart.city}) - {chart.birth_date.strftime('%d.%m.%Y')}"

            if chart.has_warning:
                chart_name += " ‚ö†Ô∏è"

            builder.add(
                InlineKeyboardButton(
                    text=chart_name, callback_data=f"predict_chart_{chart.id}"
                )
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–≤—Å–µ–≥–¥–∞)
        builder.add(
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu"
            )
        )

        # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ 1 –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥
        builder.adjust(1)
        return builder.as_markup()

    @staticmethod
    def setup_profile() -> ReplyKeyboardMarkup:
        """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        builder = ReplyKeyboardBuilder()
        builder.add(KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"))
        return builder.as_markup(resize_keyboard=True)

    @staticmethod
    def gender_selection() -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
        builder = InlineKeyboardBuilder()

        builder.add(
            InlineKeyboardButton(text="üë® –ú—É–∂—Å–∫–æ–π", callback_data="gender_male")
        )

        builder.add(
            InlineKeyboardButton(text="üë© –ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female")
        )

        builder.adjust(2)
        return builder.as_markup()

    @staticmethod
    def chart_type_selection() -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã"""
        builder = InlineKeyboardBuilder()

        builder.add(
            InlineKeyboardButton(
                text="üë§ –ú–æ—è –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞", callback_data="chart_type_own"
            )
        )

        builder.add(
            InlineKeyboardButton(
                text="üë• –ß—É–∂–∞—è –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞", callback_data="chart_type_other"
            )
        )

        builder.adjust(1)
        return builder.as_markup()

    @staticmethod
    def profile_menu(notifications_enabled: bool) -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º"""
        builder = InlineKeyboardBuilder()

        builder.add(
            InlineKeyboardButton(
                text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="edit_profile"
            )
        )

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        if notifications_enabled:
            notification_text = "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–∫–ª"
        else:
            notification_text = "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í—ã–∫–ª"

        builder.add(
            InlineKeyboardButton(
                text=notification_text, callback_data="toggle_notifications"
            )
        )

        builder.add(
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu"
            )
        )

        builder.adjust(1)
        return builder.as_markup()

    @staticmethod
    def prediction_action_choice(
        chart_id: int, active_predictions_count: int
    ) -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏ (–ø—Ä–æ—Å–º–æ—Ç—Ä/—Å–æ–∑–¥–∞–Ω–∏–µ)"""
        builder = InlineKeyboardBuilder()

        builder.add(
            InlineKeyboardButton(
                text=f"üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã ({active_predictions_count})",
                callback_data=f"view_active_predictions_{chart_id}",
            )
        )

        builder.add(
            InlineKeyboardButton(
                text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑",
                callback_data=f"create_new_prediction_{chart_id}",
            )
        )

        builder.adjust(1)
        return builder.as_markup()

    @staticmethod
    def view_active_predictions_menu(
        chart_id: int, existing_predictions: list
    ) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
        builder = InlineKeyboardBuilder()

        type_names = {
            "—Å–µ–≥–æ–¥–Ω—è": "üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è",
            "–Ω–µ–¥–µ–ª—è": "üìÜ –ù–∞ –Ω–µ–¥–µ–ª—é",
            "–º–µ—Å—è—Ü": "üóìÔ∏è –ù–∞ –º–µ—Å—è—Ü",
            "–∫–≤–∞—Ä—Ç–∞–ª": "üìä –ù–∞ –∫–≤–∞—Ä—Ç–∞–ª",
        }

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
        for prediction in existing_predictions:
            pred_type = prediction.prediction_type
            type_name = type_names.get(pred_type, pred_type)

            builder.add(
                InlineKeyboardButton(
                    text=f"üëÅÔ∏è {type_name}",
                    callback_data=f"view_prediction_{prediction.id}",
                )
            )

        # –ö–Ω–æ–ø–∫–∞ "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π"
        builder.add(
            InlineKeyboardButton(
                text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑",
                callback_data=f"create_new_prediction_{chart_id}",
            )
        )

        builder.adjust(1)
        return builder.as_markup()

    @staticmethod
    def create_new_prediction_menu(
        chart_id: int, existing_predictions: list = None
    ) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
        builder = InlineKeyboardBuilder()

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
        all_types = ["—Å–µ–≥–æ–¥–Ω—è", "–Ω–µ–¥–µ–ª—è", "–º–µ—Å—è—Ü", "–∫–≤–∞—Ä—Ç–∞–ª"]
        existing_types = [p.prediction_type for p in (existing_predictions or [])]

        type_names = {
            "—Å–µ–≥–æ–¥–Ω—è": "üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è",
            "–Ω–µ–¥–µ–ª—è": "üìÜ –ù–∞ –Ω–µ–¥–µ–ª—é",
            "–º–µ—Å—è—Ü": "üóìÔ∏è –ù–∞ –º–µ—Å—è—Ü",
            "–∫–≤–∞—Ä—Ç–∞–ª": "üìä –ù–∞ –∫–≤–∞—Ä—Ç–∞–ª",
        }

        for pred_type in all_types:
            type_name = type_names[pred_type]

            if pred_type in existing_types:
                # –ï—Å–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑ —É–∂–µ –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –ø–æ–º–µ—Ç–∫–æ–π
                builder.add(
                    InlineKeyboardButton(
                        text=f" {type_name} (–ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å)",
                        callback_data=f"prediction_{pred_type}_{chart_id}",
                    )
                )
            else:
                # –ï—Å–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–µ—Ç, –æ–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞
                builder.add(
                    InlineKeyboardButton(
                        text=f"‚ûï {type_name}",
                        callback_data=f"prediction_{pred_type}_{chart_id}",
                    )
                )

        builder.adjust(1)
        return builder.as_markup()

    @staticmethod
    def compatibility_spheres():
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ñ–µ—Ä—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        builder = InlineKeyboardBuilder()
        builder.add(
            InlineKeyboardButton(text="‚ù§Ô∏è –õ—é–±–æ–≤—å", callback_data="comp_sphere_love")
        )
        builder.add(
            InlineKeyboardButton(
                text="ü§ù –î—Ä—É–∂–±–∞", callback_data="comp_sphere_friendship"
            )
        )
        builder.add(
            InlineKeyboardButton(text="üìà –ö–∞—Ä—å–µ—Ä–∞", callback_data="comp_sphere_career")
        )
        builder.add(
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu"
            )
        )
        builder.adjust(1)
        return builder.as_markup()

    @staticmethod
    def compatibility_reports_list(reports: List) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –æ—Ç—á–µ—Ç–æ–≤ –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏."""
        builder = InlineKeyboardBuilder()
        if reports:
            for report in reports:
                sphere_map = {"love": "‚ù§Ô∏è", "friendship": "ü§ù", "career": "üìà"}
                sphere_emoji = sphere_map.get(report.sphere, "üîÆ")
                button_text = f"{sphere_emoji} {report.user_name} & {report.partner_name} ({report.created_at.strftime('%d.%m.%Y')})"
                builder.row(
                    InlineKeyboardButton(
                        text=button_text, callback_data=f"view_comp_report_{report.id}"
                    )
                )

        builder.row(
            InlineKeyboardButton(
                text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç", callback_data="new_compatibility_report"
            )
        )
        
        builder.row(
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu"
            )
        )
        
        return builder.as_markup()

    @staticmethod
    def compatibility_report_actions(report_id: int) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏."""
        builder = InlineKeyboardBuilder()
        builder.add(
            InlineKeyboardButton(
                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_comp_report_{report_id}"
            )
        )
        builder.add(
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –∫ –æ—Ç—á–µ—Ç–∞–º", callback_data="back_to_comp_reports"
            )
        )
        builder.adjust(2)
        return builder.as_markup()

    @staticmethod
    def confirm_delete_compatibility_report(report_id: int) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏."""
        builder = InlineKeyboardBuilder()
        builder.add(
            InlineKeyboardButton(
                text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
                callback_data=f"confirm_delete_comp_report_{report_id}",
            )
        )
        builder.add(
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_comp_report_{report_id}"
            )
        )
        builder.adjust(1)
        return builder.as_markup()

    @staticmethod
    def subscription_menu(is_premium: bool = False, days_remaining: int = None) -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π"""
        builder = InlineKeyboardBuilder()

        if is_premium:
            # –î–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            builder.add(
                InlineKeyboardButton(
                    text="üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="subscription_status"
                )
            )
            builder.add(
                InlineKeyboardButton(
                    text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscription_renew"
                )
            )
            builder.add(
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscription_cancel"
                )
            )
        else:
            # –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            builder.add(
                InlineKeyboardButton(
                    text="üíé –û—Ñ–æ—Ä–º–∏—Ç—å Premium", callback_data="subscription_upgrade"
                )
            )
            builder.add(
                InlineKeyboardButton(
                    text="üìã –ß—Ç–æ –¥–∞—ë—Ç Premium?", callback_data="subscription_benefits"
                )
            )
            builder.add(
                InlineKeyboardButton(
                    text="üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="subscription_status"
                )
            )

        builder.add(
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"
            )
        )

        builder.adjust(1)
        return builder.as_markup()

    @staticmethod
    def subscription_upgrade_options() -> InlineKeyboardMarkup:
        """–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
        builder = InlineKeyboardBuilder()

        builder.add(
            InlineKeyboardButton(
                text="üí≥ –ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (499‚ÇΩ)", callback_data="buy_monthly"
            )
        )

        builder.add(
            InlineKeyboardButton(
                text="‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="subscription_faq"
            )
        )
        builder.add(
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥", callback_data="subscription_back"
            )
        )

        builder.adjust(1)
        return builder.as_markup()

    @staticmethod
    def subscription_confirm_cancel() -> InlineKeyboardMarkup:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
        builder = InlineKeyboardBuilder()

        builder.add(
            InlineKeyboardButton(
                text="‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="subscription_cancel_confirm"
            )
        )
        builder.add(
            InlineKeyboardButton(
                text="‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å", callback_data="subscription_back"
            )
        )

        builder.adjust(2)
        return builder.as_markup()

    @staticmethod
    def back_to_main_menu():
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'"""
        builder = InlineKeyboardBuilder()
        builder.add(
            InlineKeyboardButton(text="‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
        )
        return builder.as_markup()

    @staticmethod
    def skip_step_keyboard():
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —à–∞–≥–∞"""
        builder = ReplyKeyboardBuilder()
        builder.add(KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —à–∞–≥ (–≤—Ä–µ–º—è –±—É–¥–µ—Ç 12:00)"))
        builder.add(KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)

    @staticmethod
    def back_to_planets(chart_id: int) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –ø–ª–∞–Ω–µ—Ç."""
        builder = InlineKeyboardBuilder()
        builder.add(
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –∫ –ø–ª–∞–Ω–µ—Ç–∞–º", callback_data=f"open_chart_{chart_id}"
            )
        )
        return builder.as_markup()

    @staticmethod
    def back_to_chart_predictions(chart_id: int) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∫–∞—Ä—Ç—ã"""
        builder = InlineKeyboardBuilder()
        builder.add(
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–≥–Ω–æ–∑–∞–º",
                callback_data=f"back_to_chart_predictions_{chart_id}",
            )
        )
        builder.add(
            InlineKeyboardButton(text="‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
        )
        builder.adjust(1)
        return builder.as_markup()

    @staticmethod
    def premium_upgrade() -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è Premium –ø–æ–¥–ø–∏—Å–∫–∏"""
        builder = InlineKeyboardBuilder()

        builder.add(
            InlineKeyboardButton(
                text="üíé –û—Ñ–æ—Ä–º–∏—Ç—å Premium –∑–∞ 199‚ÇΩ/–º–µ—Å—è—Ü",
                callback_data="subscribe_premium_monthly",
            )
        )

        builder.add(
            InlineKeyboardButton(
                text="üíé –û—Ñ–æ—Ä–º–∏—Ç—å Premium –∑–∞ 1990‚ÇΩ/–≥–æ–¥ (—Å–∫–∏–¥–∫–∞ 17%)",
                callback_data="subscribe_premium_yearly",
            )
        )

        builder.add(
            InlineKeyboardButton(
                text="‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ Premium", callback_data="premium_info"
            )
        )

        builder.add(
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_charts_list")
        )

        builder.adjust(1)
        return builder.as_markup()
