#!/usr/bin/env python3
"""–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∑–≤–µ–∑–¥–Ω–æ–≥–æ –Ω–µ–±–∞"""

import asyncio
from datetime import datetime

from models import Location
from services.astro_calculations import AstroService


async def test_basic_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"""
    print("üåå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∑–≤–µ–∑–¥–Ω–æ–≥–æ –Ω–µ–±–∞...")

    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
        astro_service = AstroService()
        print("‚úÖ AstroService —Å–æ–∑–¥–∞–Ω")

        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        birth_date = datetime(1990, 12, 25, 14, 30)
        location = Location(
            city="–ú–æ—Å–∫–≤–∞", lat=55.7558, lng=37.6176, timezone="Europe/Moscow"
        )
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã")

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–ª–∞–Ω–µ—Ç—ã
        planets = astro_service.calculate_natal_chart(birth_date, location)
        print(f"‚úÖ –ü–ª–∞–Ω–µ—Ç—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã: {len(planets)} –ø–ª–∞–Ω–µ—Ç")

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\nü™ê –ü–æ–∑–∏—Ü–∏–∏ –ø–ª–∞–Ω–µ—Ç:")
        for planet_name, position in planets.items():
            print(f"  {planet_name}: {position.sign} {position.degree:.1f}¬∞")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –∫–∞—Ä—Ç—ã
        print("\nüé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")

        try:
            import matplotlib.pyplot as plt
            import numpy as np

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–∞—Ä—Ç—É
            fig, ax = plt.subplots(figsize=(6, 6), facecolor="#0a0a1a")
            ax.set_facecolor("#0a0a1a")
            ax = plt.subplot(111, projection="polar")
            ax.set_facecolor("#0a0a1a")
            ax.set_ylim(0, 1)
            ax.grid(False)
            ax.set_yticklabels([])
            ax.set_xticklabels([])

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥—ã
            np.random.seed(42)
            n_stars = 50
            theta = np.random.uniform(0, 2 * np.pi, n_stars)
            r = np.random.uniform(0.1, 0.9, n_stars)
            sizes = np.random.uniform(10, 30, n_stars)
            ax.scatter(theta, r, s=sizes, c="white", alpha=0.8, marker="*")

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            fig.suptitle("üåå –¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞", fontsize=14, color="white", y=0.95)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            plt.savefig(
                "test_star_map.png",
                dpi=100,
                bbox_inches="tight",
                facecolor="#0a0a1a",
                edgecolor="none",
                transparent=False,
            )
            plt.close()

            print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: test_star_map.png")

        except ImportError as e:
            print(f"‚ö†Ô∏è  Matplotlib –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

        print("\nüéâ –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(test_basic_functionality())
