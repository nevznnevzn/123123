"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å SQLite –Ω–∞ PostgreSQL
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω
"""
import asyncio
import json
import logging
from datetime import datetime
from typing import Dict, List, Any

import aiosqlite
import asyncpg
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker

from models import Base, User, NatalChart, Prediction, Subscription, CompatibilityReport

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class DatabaseMigrator:
    """–ú–∏–≥—Ä–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É SQLite –∏ PostgreSQL"""
    
    def __init__(self, sqlite_url: str, postgresql_url: str):
        self.sqlite_url = sqlite_url
        self.postgresql_url = postgresql_url
        
    async def migrate_all_data(self):
        """–ú–∏–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö —Å SQLite –Ω–∞ PostgreSQL")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ PostgreSQL
            await self.create_postgresql_tables()
            
            # –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            await self.migrate_users()
            await self.migrate_natal_charts()
            await self.migrate_predictions()
            await self.migrate_subscriptions()
            await self.migrate_compatibility_reports()
            
            logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            raise
    
    async def create_postgresql_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ PostgreSQL"""
        logger.info("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ PostgreSQL...")
        
        # –°–æ–∑–¥–∞–µ–º engine –¥–ª—è PostgreSQL
        engine = create_engine(self.postgresql_url.replace("+asyncpg", ""))
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        Base.metadata.create_all(engine)
        engine.dispose()
        
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
    
    async def migrate_users(self):
        """–ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        logger.info("üë• –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SQLite
        async with aiosqlite.connect(self.sqlite_url.replace("sqlite+aiosqlite:///", "")) as sqlite_conn:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            async with sqlite_conn.execute("SELECT * FROM users") as cursor:
                users = await cursor.fetchall()
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
            columns = [description[0] for description in cursor.description]
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL
        conn = await asyncpg.connect(self.postgresql_url.replace("+asyncpg", ""))
        
        try:
            for user_data in users:
                user_dict = dict(zip(columns, user_data))
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
                await conn.execute("""
                    INSERT INTO users (
                        telegram_id, name, gender, birth_year, birth_city,
                        birth_date, birth_time_specified, is_profile_complete,
                        notifications_enabled, created_at
                    ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
                    ON CONFLICT (telegram_id) DO NOTHING
                """, 
                    user_dict['telegram_id'],
                    user_dict['name'],
                    user_dict['gender'],
                    user_dict['birth_year'],
                    user_dict['birth_city'],
                    user_dict['birth_date'],
                    user_dict['birth_time_specified'],
                    user_dict['is_profile_complete'],
                    user_dict['notifications_enabled'],
                    user_dict['created_at']
                )
        
        finally:
            await conn.close()
        
        logger.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    async def migrate_natal_charts(self):
        """–ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç"""
        logger.info("‚≠ê –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç...")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SQLite
        async with aiosqlite.connect(self.sqlite_url.replace("sqlite+aiosqlite:///", "")) as sqlite_conn:
            async with sqlite_conn.execute("SELECT * FROM natal_charts") as cursor:
                charts = await cursor.fetchall()
            
            columns = [description[0] for description in cursor.description]
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(charts)} –Ω–∞—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL
        conn = await asyncpg.connect(self.postgresql_url.replace("+asyncpg", ""))
        
        try:
            for chart_data in charts:
                chart_dict = dict(zip(columns, chart_data))
                
                await conn.execute("""
                    INSERT INTO natal_charts (
                        telegram_id, name, chart_type, chart_owner_name,
                        city, latitude, longitude, timezone, birth_date,
                        birth_time_specified, has_warning, planets_data, created_at
                    ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)
                """,
                    chart_dict['telegram_id'],
                    chart_dict['name'],
                    chart_dict['chart_type'],
                    chart_dict['chart_owner_name'],
                    chart_dict['city'],
                    chart_dict['latitude'],
                    chart_dict['longitude'],
                    chart_dict['timezone'],
                    chart_dict['birth_date'],
                    chart_dict['birth_time_specified'],
                    chart_dict['has_warning'],
                    chart_dict['planets_data'],
                    chart_dict['created_at']
                )
        
        finally:
            await conn.close()
        
        logger.info("‚úÖ –ù–∞—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    async def migrate_predictions(self):
        """–ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
        logger.info("üîÆ –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤...")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SQLite
        async with aiosqlite.connect(self.sqlite_url.replace("sqlite+aiosqlite:///", "")) as sqlite_conn:
            async with sqlite_conn.execute("SELECT * FROM predictions") as cursor:
                predictions = await cursor.fetchall()
            
            columns = [description[0] for description in cursor.description]
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(predictions)} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL
        conn = await asyncpg.connect(self.postgresql_url.replace("+asyncpg", ""))
        
        try:
            for pred_data in predictions:
                pred_dict = dict(zip(columns, pred_data))
                
                await conn.execute("""
                    INSERT INTO predictions (
                        telegram_id, chart_id, prediction_type, valid_from,
                        valid_until, content, generation_time, created_at
                    ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
                """,
                    pred_dict['telegram_id'],
                    pred_dict['chart_id'],
                    pred_dict['prediction_type'],
                    pred_dict['valid_from'],
                    pred_dict['valid_until'],
                    pred_dict['content'],
                    pred_dict['generation_time'],
                    pred_dict['created_at']
                )
        
        finally:
            await conn.close()
        
        logger.info("‚úÖ –ü—Ä–æ–≥–Ω–æ–∑—ã –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    async def migrate_subscriptions(self):
        """–ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–æ–∫"""
        logger.info("üíé –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–æ–∫...")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SQLite
        async with aiosqlite.connect(self.sqlite_url.replace("sqlite+aiosqlite:///", "")) as sqlite_conn:
            async with sqlite_conn.execute("SELECT * FROM subscriptions") as cursor:
                subscriptions = await cursor.fetchall()
            
            columns = [description[0] for description in cursor.description]
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(subscriptions)} –ø–æ–¥–ø–∏—Å–æ–∫")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL
        conn = await asyncpg.connect(self.postgresql_url.replace("+asyncpg", ""))
        
        try:
            for sub_data in subscriptions:
                sub_dict = dict(zip(columns, sub_data))
                
                await conn.execute("""
                    INSERT INTO subscriptions (
                        telegram_id, subscription_type, status, start_date,
                        end_date, payment_id, payment_amount, payment_currency,
                        created_at, updated_at
                    ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
                """,
                    sub_dict['telegram_id'],
                    sub_dict['subscription_type'],
                    sub_dict['status'],
                    sub_dict['start_date'],
                    sub_dict['end_date'],
                    sub_dict['payment_id'],
                    sub_dict['payment_amount'],
                    sub_dict['payment_currency'],
                    sub_dict['created_at'],
                    sub_dict['updated_at']
                )
        
        finally:
            await conn.close()
        
        logger.info("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    async def migrate_compatibility_reports(self):
        """–ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        logger.info("üíû –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏...")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SQLite
        async with aiosqlite.connect(self.sqlite_url.replace("sqlite+aiosqlite:///", "")) as sqlite_conn:
            async with sqlite_conn.execute("SELECT * FROM compatibility_reports") as cursor:
                reports = await cursor.fetchall()
            
            columns = [description[0] for description in cursor.description]
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(reports)} –æ—Ç—á–µ—Ç–æ–≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL
        conn = await asyncpg.connect(self.postgresql_url.replace("+asyncpg", ""))
        
        try:
            for report_data in reports:
                report_dict = dict(zip(columns, report_data))
                
                await conn.execute("""
                    INSERT INTO compatibility_reports (
                        user_id, user_name, partner_name, user_birth_date,
                        partner_birth_date, sphere, report_text, created_at
                    ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
                """,
                    report_dict['user_id'],
                    report_dict['user_name'],
                    report_dict['partner_name'],
                    report_dict['user_birth_date'],
                    report_dict['partner_birth_date'],
                    report_dict['sphere'],
                    report_dict['report_text'],
                    report_dict['created_at']
                )
        
        finally:
            await conn.close()
        
        logger.info("‚úÖ –û—Ç—á–µ—Ç—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    async def verify_migration(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏...")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ SQLite
        async with aiosqlite.connect(self.sqlite_url.replace("sqlite+aiosqlite:///", "")) as sqlite_conn:
            sqlite_counts = {}
            
            for table in ['users', 'natal_charts', 'predictions', 'subscriptions', 'compatibility_reports']:
                async with sqlite_conn.execute(f"SELECT COUNT(*) FROM {table}") as cursor:
                    count = await cursor.fetchone()
                    sqlite_counts[table] = count[0]
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ PostgreSQL
        conn = await asyncpg.connect(self.postgresql_url.replace("+asyncpg", ""))
        
        try:
            postgresql_counts = {}
            
            for table in ['users', 'natal_charts', 'predictions', 'subscriptions', 'compatibility_reports']:
                count = await conn.fetchval(f"SELECT COUNT(*) FROM {table}")
                postgresql_counts[table] = count
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            logger.info("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏:")
            logger.info("=" * 50)
            
            for table in sqlite_counts:
                sqlite_count = sqlite_counts[table]
                postgresql_count = postgresql_counts[table]
                
                status = "‚úÖ" if sqlite_count == postgresql_count else "‚ùå"
                logger.info(f"{status} {table}: {sqlite_count} ‚Üí {postgresql_count}")
            
            logger.info("=" * 50)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π —É—Å–ø–µ—Ö
            all_match = all(sqlite_counts[table] == postgresql_counts[table] 
                          for table in sqlite_counts)
            
            if all_match:
                logger.info("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
            else:
                logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö")
        
        finally:
            await conn.close()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import os
    from dotenv import load_dotenv
    
    load_dotenv()
    
    # –ü–æ–ª—É—á–∞–µ–º URL –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    sqlite_url = os.getenv("SQLITE_URL", "sqlite+aiosqlite:///solarbalance.db")
    postgresql_url = os.getenv("POSTGRESQL_URL")
    
    if not postgresql_url:
        logger.error("‚ùå POSTGRESQL_URL –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    logger.info(f"üìÅ SQLite: {sqlite_url}")
    logger.info(f"üóÑÔ∏è PostgreSQL: {postgresql_url}")
    
    # –°–æ–∑–¥–∞–µ–º –º–∏–≥—Ä–∞—Ç–æ—Ä
    migrator = DatabaseMigrator(sqlite_url, postgresql_url)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    await migrator.migrate_all_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await migrator.verify_migration()


if __name__ == "__main__":
    asyncio.run(main()) 