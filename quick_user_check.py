"""
–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ë–î
"""
import asyncio
import logging
from datetime import datetime
from services.ai_predictions import AIPredictionService
from services.star_advice_service import StarAdviceService
from services.motivation_service import MotivationService
from services.subscription_service import SubscriptionService
from services.antispam_service import AntiSpamService
from database_async import AsyncDatabaseManager
from models import PlanetPosition, Location

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏
logging.basicConfig(level=logging.ERROR)

async def quick_user_check():
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    print("üîç –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–• –§–£–ù–ö–¶–ò–ô")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    db_manager = AsyncDatabaseManager("sqlite+aiosqlite:///quick_test.db")
    await db_manager.init_db()
    
    results = []
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("\nüë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...")
    try:
        user, created = await db_manager.get_or_create_user(
            telegram_id=123456, name="–¢–µ—Å—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        )
        if user:
            print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω/–ø–æ–ª—É—á–µ–Ω")
            results.append(True)
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            results.append(False)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        results.append(False)
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    print("\nüìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...")
    try:
        updated_user = await db_manager.update_user_profile(
            telegram_id=123456,
            name="–¢–µ—Å—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            gender="–ú—É–∂—Å–∫–æ–π",
            birth_year=1990,
            birth_city="–ú–æ—Å–∫–≤–∞",
            birth_date=datetime(1990, 7, 15, 12, 0),
            birth_time_specified=True
        )
        if updated_user and updated_user.is_profile_complete:
            print("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω")
            results.append(True)
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è")
            results.append(False)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        results.append(False)
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
    print("\n‚≠ê –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã...")
    try:
        test_planets = {
            "–°–æ–ª–Ω—Ü–µ": {"sign": "–õ–µ–≤", "degree": 15.0},
            "–õ—É–Ω–∞": {"sign": "–†–∞–∫", "degree": 8.0},
            "–ú–µ—Ä–∫—É—Ä–∏–π": {"sign": "–õ–µ–≤", "degree": 12.0},
        }
        
        chart = await db_manager.create_natal_chart(
            telegram_id=123456,
            name="–¢–µ—Å—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            city="–ú–æ—Å–∫–≤–∞",
            latitude=55.7558,
            longitude=37.6176,
            timezone="Europe/Moscow",
            birth_date=datetime(1990, 7, 15, 12, 0),
            birth_time_specified=True,
            has_warning=False,
            planets_data=test_planets
        )
        if chart:
            print("‚úÖ –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞")
            results.append(True)
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã")
            results.append(False)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–∞—Ä—Ç—ã: {e}")
        results.append(False)
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ AI —Å–µ—Ä–≤–∏—Å–∞
    print("\nü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ AI —Å–µ—Ä–≤–∏—Å–∞...")
    try:
        ai_service = AIPredictionService()
        if ai_service.client:
            print("‚úÖ AI –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            results.append(True)
        else:
            print("‚ùå AI –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            results.append(False)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ AI: {e}")
        results.append(False)
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–≤–µ–∑–¥–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞
    print("\nüåü –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–≤–µ–∑–¥–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞...")
    try:
        star_service = StarAdviceService()
        validation = await star_service.validate_question("–ö–∞–∫ –º–Ω–µ –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É?")
        if validation["is_valid"]:
            print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            results.append(True)
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
            results.append(False)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–≤–µ–∑–¥–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞: {e}")
        results.append(False)
    
    # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–π
    print("\nüåÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–π...")
    try:
        motivation_service = MotivationService(AIPredictionService())
        print("‚úÖ –°–µ—Ä–≤–∏—Å –º–æ—Ç–∏–≤–∞—Ü–∏–π —Å–æ–∑–¥–∞–Ω")
        results.append(True)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–π: {e}")
        results.append(False)
    
    # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    print("\nüíé –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏...")
    try:
        subscription_service = SubscriptionService()
        is_premium = subscription_service.is_user_premium(123456)
        print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç: {'Premium' if is_premium else 'Free'}")
        results.append(True)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        results.append(False)
    
    # 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω—Ç–∏—Å–ø–∞–º–∞
    print("\nüõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω—Ç–∏—Å–ø–∞–º–∞...")
    try:
        antispam_service = AntiSpamService()
        limits = antispam_service.check_limits(123456, is_premium=False)
        print(f"‚úÖ –ê–Ω—Ç–∏—Å–ø–∞–º —Ä–∞–±–æ—Ç–∞–µ—Ç: {limits['questions_left']} –≤–æ–ø—Ä–æ—Å–æ–≤")
        results.append(True)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω—Ç–∏—Å–ø–∞–º–∞: {e}")
        results.append(False)
    
    # –ò—Ç–æ–≥–∏
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("-" * 20)
    
    passed = sum(results)
    total = len(results)
    
    print(f"‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç: {passed}/{total}")
    print(f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã: {total - passed}/{total}")
    
    if passed == total:
        print("\nüéâ –í–°–ï –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–ê–Æ–¢!")
        print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print("‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ë–î —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
        print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∞–∫—Ç–∏–≤–Ω—ã")
    else:
        print("\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
    
    # –û—á–∏—Å—Ç–∫–∞
    await db_manager.delete_user_data(123456)
    await db_manager.close()
    
    return passed == total

if __name__ == "__main__":
    asyncio.run(quick_user_check()) 