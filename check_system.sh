#!/bin/bash

# üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π SolarBalance
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./check_system.sh

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# –°—á–µ—Ç—á–∏–∫–∏
PASSED=0
FAILED=0
WARNINGS=0

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_header() {
    echo -e "${BLUE}"
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ SolarBalance"
    echo "======================================================="
    echo -e "${NC}"
}

print_check() {
    echo -e "${BLUE}[–ü–†–û–í–ï–†–ö–ê]${NC} $1"
}

print_pass() {
    echo -e "${GREEN}[‚úì –ü–†–û–ô–î–ï–ù–û]${NC} $1"
    ((PASSED++))
}

print_fail() {
    echo -e "${RED}[‚úó –û–®–ò–ë–ö–ê]${NC} $1"
    ((FAILED++))
}

print_warning() {
    echo -e "${YELLOW}[‚ö† –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï]${NC} $1"
    ((WARNINGS++))
}

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ root
check_root() {
    print_check "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..."
    if [[ $EUID -eq 0 ]]; then
        print_pass "–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø—Ä–∞–≤–∞–º–∏ root"
    else
        print_warning "–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–µ –æ—Ç root. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
check_os() {
    print_check "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã..."
    
    if [[ -f /etc/os-release ]]; then
        . /etc/os-release
        print_info "–û–°: $PRETTY_NAME"
        
        case $ID in
            ubuntu)
                if [[ $(echo "$VERSION_ID >= 20.04" | bc -l) -eq 1 ]]; then
                    print_pass "Ubuntu 20.04+ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
                else
                    print_warning "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è Ubuntu 20.04 –∏–ª–∏ –Ω–æ–≤–µ–µ (—Ç–µ–∫—É—â–∞—è: $VERSION_ID)"
                fi
                ;;
            debian)
                if [[ $(echo "$VERSION_ID >= 11" | bc -l) -eq 1 ]]; then
                    print_pass "Debian 11+ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
                else
                    print_warning "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è Debian 11 –∏–ª–∏ –Ω–æ–≤–µ–µ (—Ç–µ–∫—É—â–∞—è: $VERSION_ID)"
                fi
                ;;
            centos|rhel)
                if [[ $(echo "$VERSION_ID >= 8" | bc -l) -eq 1 ]]; then
                    print_pass "CentOS/RHEL 8+ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
                else
                    print_warning "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è CentOS/RHEL 8 –∏–ª–∏ –Ω–æ–≤–µ–µ (—Ç–µ–∫—É—â–∞—è: $VERSION_ID)"
                fi
                ;;
            *)
                print_warning "–ù–µ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –û–°: $ID. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –¥–æ—Ä–∞–±–æ—Ç–∫–∏"
                ;;
        esac
    else
        print_fail "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
check_architecture() {
    print_check "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞..."
    
    ARCH=$(uname -m)
    case $ARCH in
        x86_64|amd64)
            print_pass "64-–±–∏—Ç–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è ($ARCH)"
            ;;
        aarch64|arm64)
            print_pass "ARM64 –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è ($ARCH)"
            ;;
        *)
            print_warning "–ù–µ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: $ARCH"
            ;;
    esac
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã
check_resources() {
    print_check "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ RAM
    TOTAL_RAM=$(free -m | awk 'NR==2{printf "%.0f", $2}')
    if [[ $TOTAL_RAM -ge 2048 ]]; then
        print_pass "RAM: ${TOTAL_RAM}MB (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ)"
    elif [[ $TOTAL_RAM -ge 1024 ]]; then
        print_warning "RAM: ${TOTAL_RAM}MB (–º–∏–Ω–∏–º—É–º, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 2GB+)"
    else
        print_fail "RAM: ${TOTAL_RAM}MB (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –º–∏–Ω–∏–º—É–º 1GB)"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
    AVAILABLE_SPACE=$(df / | awk 'NR==2 {print $4}')
    AVAILABLE_SPACE_GB=$((AVAILABLE_SPACE / 1024 / 1024))
    if [[ $AVAILABLE_SPACE_GB -ge 10 ]]; then
        print_pass "–°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ: ${AVAILABLE_SPACE_GB}GB (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ)"
    elif [[ $AVAILABLE_SPACE_GB -ge 5 ]]; then
        print_warning "–°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ: ${AVAILABLE_SPACE_GB}GB (–º–∏–Ω–∏–º—É–º, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 10GB+)"
    else
        print_fail "–°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ: ${AVAILABLE_SPACE_GB}GB (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –º–∏–Ω–∏–º—É–º 5GB)"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ CPU
    CPU_CORES=$(nproc)
    if [[ $CPU_CORES -ge 2 ]]; then
        print_pass "CPU —è–¥–µ—Ä: $CPU_CORES (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ)"
    elif [[ $CPU_CORES -eq 1 ]]; then
        print_warning "CPU —è–¥–µ—Ä: $CPU_CORES (–º–∏–Ω–∏–º—É–º, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 2+)"
    else
        print_fail "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ CPU —è–¥–µ—Ä"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
check_python() {
    print_check "–ü—Ä–æ–≤–µ—Ä–∫–∞ Python..."
    
    if command -v python3 &> /dev/null; then
        PYTHON_VERSION=$(python3 --version | awk '{print $2}')
        PYTHON_MAJOR=$(echo $PYTHON_VERSION | cut -d. -f1)
        PYTHON_MINOR=$(echo $PYTHON_VERSION | cut -d. -f2)
        
        if [[ $PYTHON_MAJOR -eq 3 && $PYTHON_MINOR -ge 9 ]]; then
            print_pass "Python $PYTHON_VERSION —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—Å–æ–≤–º–µ—Å—Ç–∏–º)"
        elif [[ $PYTHON_MAJOR -eq 3 && $PYTHON_MINOR -ge 8 ]]; then
            print_warning "Python $PYTHON_VERSION –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 3.9+"
        else
            print_fail "Python $PYTHON_VERSION —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–π, —Ç—Ä–µ–±—É–µ—Ç—Å—è 3.9+"
        fi
    else
        print_fail "Python3 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ pip
    if command -v pip3 &> /dev/null; then
        print_pass "pip3 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        print_fail "pip3 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ venv
    if python3 -m venv --help &> /dev/null; then
        print_pass "python3-venv –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        print_fail "python3-venv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Git
check_git() {
    print_check "–ü—Ä–æ–≤–µ—Ä–∫–∞ Git..."
    
    if command -v git &> /dev/null; then
        GIT_VERSION=$(git --version | awk '{print $3}')
        print_pass "Git $GIT_VERSION —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        print_fail "Git –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
check_network() {
    print_check "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    if ping -c 1 8.8.8.8 &> /dev/null; then
        print_pass "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ"
    else
        print_fail "–ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"
        return
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ GitHub
    if curl -s --connect-timeout 5 https://github.com &> /dev/null; then
        print_pass "GitHub –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        print_warning "GitHub –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –ø—Ä–æ–∫—Å–∏)"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Telegram API
    if curl -s --connect-timeout 5 https://api.telegram.org &> /dev/null; then
        print_pass "Telegram API –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        print_warning "Telegram API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π—Ä–≤–æ–ª)"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ OpenAI
    if curl -s --connect-timeout 5 https://api.openai.com &> /dev/null; then
        print_pass "OpenAI API –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        print_warning "OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π—Ä–≤–æ–ª)"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ systemd
check_systemd() {
    print_check "–ü—Ä–æ–≤–µ—Ä–∫–∞ systemd..."
    
    if command -v systemctl &> /dev/null; then
        if systemctl --version &> /dev/null; then
            print_pass "systemd –¥–æ—Å—Ç—É–ø–µ–Ω"
        else
            print_fail "systemd –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        fi
    else
        print_fail "systemctl –Ω–µ –Ω–∞–π–¥–µ–Ω (systemd –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–æ–≤ –¥–ª—è Python –ø–∞–∫–µ—Ç–æ–≤
check_build_tools() {
    print_check "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å–±–æ—Ä–∫–∏..."
    
    if command -v gcc &> /dev/null; then
        print_pass "GCC –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        print_fail "GCC –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–Ω—É–∂–µ–Ω –¥–ª—è Swiss Ephemeris)"
    fi
    
    if command -v make &> /dev/null; then
        print_pass "Make —É—Ç–∏–ª–∏—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    else
        print_fail "Make —É—Ç–∏–ª–∏—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
check_ports() {
    print_check "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–æ—Ä—Ç–æ–≤..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ä—Ç—ã –Ω–µ –∑–∞–Ω—è—Ç—ã
    if command -v netstat &> /dev/null; then
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç 8080 (–µ—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è webhook)
        if netstat -tuln | grep :8080 &> /dev/null; then
            print_warning "–ü–æ—Ä—Ç 8080 –∑–∞–Ω—è—Ç (–º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–ª—è webhook)"
        else
            print_pass "–ü–æ—Ä—Ç 8080 —Å–≤–æ–±–æ–¥–µ–Ω"
        fi
    else
        print_warning "netstat –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–∞"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞
check_firewall() {
    print_check "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞..."
    
    if command -v ufw &> /dev/null; then
        UFW_STATUS=$(ufw status | head -1)
        if [[ $UFW_STATUS == *"inactive"* ]]; then
            print_warning "UFW –æ—Ç–∫–ª—é—á–µ–Ω (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–∫–ª—é—á–∏—Ç—å)"
        else
            print_pass "UFW –∞–∫—Ç–∏–≤–µ–Ω"
        fi
    elif command -v firewalld &> /dev/null; then
        if systemctl is-active firewalld &> /dev/null; then
            print_pass "firewalld –∞–∫—Ç–∏–≤–µ–Ω"
        else
            print_warning "firewalld —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
        fi
    else
        print_warning "–§–∞–π—Ä–≤–æ–ª –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ufw)"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∏–Ω–æ–¥–æ–≤
check_inodes() {
    print_check "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–æ–¥–æ–≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã..."
    
    INODES_USAGE=$(df -i / | awk 'NR==2 {print $5}' | sed 's/%//')
    if [[ $INODES_USAGE -lt 80 ]]; then
        print_pass "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω–æ–¥–æ–≤: ${INODES_USAGE}% (–≤ –Ω–æ—Ä–º–µ)"
    elif [[ $INODES_USAGE -lt 90 ]]; then
        print_warning "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω–æ–¥–æ–≤: ${INODES_USAGE}% (–≤—ã—Å–æ–∫–æ–µ)"
    else
        print_fail "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω–æ–¥–æ–≤: ${INODES_USAGE}% (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ)"
    fi
}

# –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
print_summary() {
    echo ""
    echo -e "${BLUE}=======================================================${NC}"
    echo -e "${BLUE}                    –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢${NC}"
    echo -e "${BLUE}=======================================================${NC}"
    
    if [[ $FAILED -eq 0 && $WARNINGS -eq 0 ]]; then
        echo -e "${GREEN}üéâ –û–¢–õ–ò–ß–ù–û! –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ${NC}"
        echo -e "${GREEN}‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã: $PASSED${NC}"
        echo ""
        echo -e "${GREEN}–ú–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ:${NC}"
        echo "   wget https://raw.githubusercontent.com/YOUR_USERNAME/solarbalance/main/install_server.sh"
        echo "   chmod +x install_server.sh"
        echo "   sudo ./install_server.sh"
        
    elif [[ $FAILED -eq 0 ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è –•–û–†–û–®–û! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏${NC}"
        echo -e "${GREEN}‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã: $PASSED${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: $WARNINGS${NC}"
        echo ""
        echo -e "${YELLOW}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ–∑–º–æ–∂–Ω–∞, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è${NC}"
        
    else
        echo -e "${RED}‚ùå –ü–†–û–ë–õ–ï–ú–´! –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏${NC}"
        echo -e "${GREEN}‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã: $PASSED${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: $WARNINGS${NC}"
        echo -e "${RED}‚ùå –û—à–∏–±–∫–∏: $FAILED${NC}"
        echo ""
        echo -e "${RED}–£—Å—Ç—Ä–∞–Ω–∏—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π${NC}"
    fi
    
    echo ""
    echo -e "${BLUE}–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:${NC}"
    if [[ $FAILED -gt 0 ]]; then
        echo "1. –£—Å—Ç—Ä–∞–Ω–∏—Ç–µ –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏"
        echo "2. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É: ./check_system.sh"
        echo "3. –ü—Ä–∏—Å—Ç—É–ø–∞–π—Ç–µ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ"
    else
        echo "1. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:"
        echo "   - –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç @BotFather"
        echo "   - API –∫–ª—é—á Bothub –∏–ª–∏ OpenAI"
        echo "   - –í–∞—à Telegram ID –æ—Ç @userinfobot"
        echo "2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫—É"
    fi
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    print_header
    
    check_root
    check_os
    check_architecture
    check_resources
    check_python
    check_git
    check_build_tools
    check_systemd
    check_network
    check_ports
    check_firewall
    check_inodes
    
    print_summary
}

# –ó–∞–ø—É—Å–∫
main "$@" 