"""
–¢–µ—Å—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–Ω—Ü–∏–ø–∞ DRY –≤ SolarBalance
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ @with_db_session –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
"""
import asyncio
import logging
from datetime import datetime
from database_async import AsyncDatabaseManager, with_db_session, db_session_context
from models import User, NatalChart
from sqlalchemy import select

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏
logging.basicConfig(level=logging.ERROR)


class TestDRYPrinciple:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞ DRY"""
    
    def __init__(self):
        self.db_manager = AsyncDatabaseManager("sqlite+aiosqlite:///dry_test.db")
        self.test_user_id = 777777
    
    async def test_decorator_functionality(self):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞"""
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–ï–ö–û–†–ê–¢–û–†–ê @with_db_session")
        print("=" * 50)
        
        await self.db_manager.init_db()
        
        # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("\nüìù –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        user, created = await self.db_manager.get_or_create_user(
            telegram_id=self.test_user_id,
            name="DRY Test User"
        )
        assert user is not None
        assert created is True
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {user.name}")
        
        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("\nüìù –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        found_user = await self.db_manager.get_user_profile(self.test_user_id)
        assert found_user is not None
        assert found_user.telegram_id == self.test_user_id
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {found_user.name}")
        
        # –¢–µ—Å—Ç 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        print("\nüìù –¢–µ—Å—Ç 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è")
        updated_user = await self.db_manager.update_user_profile(
            telegram_id=self.test_user_id,
            name="Updated DRY User",
            gender="–ñ–µ–Ω—Å–∫–∏–π",
            birth_year=1995,
            birth_city="–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
            birth_date=datetime(1995, 6, 15, 12, 0),
            birth_time_specified=True
        )
        assert updated_user is not None
        assert updated_user.name == "Updated DRY User"
        assert updated_user.birth_city == "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
        print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω: {updated_user.birth_city}")
        
        # –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
        print("\nüìù –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã")
        test_planets = {
            "–°–æ–ª–Ω—Ü–µ": {"sign": "–ë–ª–∏–∑–Ω–µ—Ü—ã", "degree": 8.0},
            "–õ—É–Ω–∞": {"sign": "–†—ã–±—ã", "degree": 22.0},
            "–ú–µ—Ä–∫—É—Ä–∏–π": {"sign": "–ë–ª–∏–∑–Ω–µ—Ü—ã", "degree": 15.0},
        }
        
        chart = await self.db_manager.create_natal_chart(
            telegram_id=self.test_user_id,
            name="DRY Test Chart",
            city="–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
            latitude=59.9311,
            longitude=30.3609,
            timezone="Europe/Moscow",
            birth_date=datetime(1995, 6, 15, 12, 0),
            birth_time_specified=True,
            has_warning=False,
            planets_data=test_planets
        )
        assert chart is not None
        assert chart.name == "DRY Test Chart"
        print(f"‚úÖ –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: {chart.name}")
        
        # –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("\nüìù –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        charts = await self.db_manager.get_user_charts(self.test_user_id)
        assert len(charts) == 1
        assert charts[0].id == chart.id
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç: {len(charts)}")
        
        # –¢–µ—Å—Ç 6: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        print("\nüìù –¢–µ—Å—Ç 6: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏")
        subscription = await self.db_manager.get_or_create_subscription(self.test_user_id)
        assert subscription is not None
        assert subscription.telegram_id == self.test_user_id
        print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {subscription.subscription_type.value}")
        
        # –û—á–∏—Å—Ç–∫–∞
        await self.db_manager.delete_user_data(self.test_user_id)
        await self.db_manager.close()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

    async def test_context_manager(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–¢–ï–ö–°–¢–ù–û–ì–û –ú–ï–ù–ï–î–ñ–ï–†–ê")
        print("=" * 50)
        
        await self.db_manager.init_db()
        
        # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
        print("\nüìù –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä")
        async with db_session_context(self.db_manager) as session:
            user = User(telegram_id=888888, name="Context Test User")
            session.add(user)
            await session.flush()
            await session.refresh(user)
            
            assert user.id is not None
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç: {user.name}")
        
        # –¢–µ—Å—Ç 2: –°–ª–æ–∂–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –≤ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        print("\nüìù –¢–µ—Å—Ç 2: –°–ª–æ–∂–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        async with db_session_context(self.db_manager) as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await session.execute(
                select(User).where(User.telegram_id == 888888)
            )
            user = result.scalar_one_or_none()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            user.gender = "–ú—É–∂—Å–∫–æ–π"
            user.birth_year = 1990
            user.birth_city = "–ú–æ—Å–∫–≤–∞"
            user.is_profile_complete = True
            
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É
            chart = NatalChart(
                telegram_id=user.telegram_id,
                name="Context Chart",
                city="–ú–æ—Å–∫–≤–∞",
                latitude=55.7558,
                longitude=37.6176,
                timezone="Europe/Moscow",
                birth_date=datetime(1990, 3, 20, 14, 30),
                birth_time_specified=True,
                has_warning=False,
                planets_data={"–°–æ–ª–Ω—Ü–µ": {"sign": "–†—ã–±—ã", "degree": 5.0}}
            )
            session.add(chart)
            
            # –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            await session.flush()
            
            assert user.gender == "–ú—É–∂—Å–∫–æ–π"
            assert chart.id is not None
            print(f"‚úÖ –°–ª–æ–∂–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å + –∫–∞—Ä—Ç–∞")
        
        # –û—á–∏—Å—Ç–∫–∞
        await self.db_manager.delete_user_data(888888)
        await self.db_manager.close()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

    async def test_error_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö")
        print("=" * 50)
        
        await self.db_manager.init_db()
        
        # –¢–µ—Å—Ç 1: Rollback –ø—Ä–∏ –æ—à–∏–±–∫–µ
        print("\nüìù –¢–µ—Å—Ç 1: Rollback –ø—Ä–∏ –æ—à–∏–±–∫–µ")
        try:
            async with db_session_context(self.db_manager) as session:
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = User(telegram_id=999999, name="Error Test User")
                session.add(user)
                await session.flush()
                
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                raise ValueError("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ rollback")
                
        except ValueError:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω
            found_user = await self.db_manager.get_user_profile(999999)
            assert found_user is None
            print("‚úÖ Rollback —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–µ
        print("\nüìù –¢–µ—Å—Ç 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–µ")
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.db_manager.get_user_profile(999999)
            assert user is None
            print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        
        await self.db_manager.close()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

    async def test_performance_comparison(self):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("\nüß™ –°–†–ê–í–ù–ï–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        print("=" * 50)
        
        await self.db_manager.init_db()
        
        # –¢–µ—Å—Ç —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º
        print("\nüìù –¢–µ—Å—Ç —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º")
        start_time = asyncio.get_event_loop().time()
        
        for i in range(50):
            await self.db_manager.get_or_create_user(1000 + i, f"User {i}")
        
        decorator_time = asyncio.get_event_loop().time() - start_time
        
        # –¢–µ—Å—Ç —Å —Ä—É—á–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏—è–º–∏
        print("\nüìù –¢–µ—Å—Ç —Å —Ä—É—á–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º")
        start_time = asyncio.get_event_loop().time()
        
        for i in range(50):
            async with self.db_manager.get_session() as session:
                result = await session.execute(
                    select(User).where(User.telegram_id == 2000 + i)
                )
                user = result.scalar_one_or_none()
                
                if not user:
                    user = User(telegram_id=2000 + i, name=f"User {i}")
                    session.add(user)
                    await session.flush()
        
        manual_time = asyncio.get_event_loop().time() - start_time
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º: {decorator_time:.3f}—Å")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –±–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞: {manual_time:.3f}—Å")
        
        if manual_time > decorator_time:
            improvement = ((manual_time - decorator_time) / manual_time) * 100
            print(f"üìà –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {improvement:.1f}%")
        else:
            print("üìà –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–∏–º—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        
        # –û—á–∏—Å—Ç–∫–∞
        for i in range(50):
            await self.db_manager.delete_user_data(1000 + i)
            await self.db_manager.delete_user_data(2000 + i)
        
        await self.db_manager.close()

    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ò–ù–¶–ò–ü–ê DRY –í SOLARBALANCE")
        print("=" * 60)
        
        try:
            await self.test_decorator_functionality()
            await self.test_context_manager()
            await self.test_error_handling()
            await self.test_performance_comparison()
            
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –ü—Ä–∏–Ω—Ü–∏–ø DRY —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä @with_db_session —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
            print("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            print("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            return True
            
        except Exception as e:
            print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
            return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = TestDRYPrinciple()
    success = await tester.run_all_tests()
    
    if success:
        print("\nüéØ –ò–¢–û–ì–û–í–´–ô –í–´–í–û–î:")
        print("‚úÖ –ü—Ä–∏–Ω—Ü–∏–ø DRY —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω –≤ SolarBalance")
        print("‚úÖ –ö–æ–¥ —Å—Ç–∞–ª –±–æ–ª–µ–µ —á–∏—Å—Ç—ã–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º")
        print("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∞")
        print("‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —Å –ë–î –æ–±–µ—Å–ø–µ—á–µ–Ω–∞")
        print("\nüöÄ –ì–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω-–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    else:
        print("\n‚ö†Ô∏è –ò–¢–û–ì–û–í–´–ô –í–´–í–û–î:")
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ DRY")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")

if __name__ == "__main__":
    asyncio.run(main()) 