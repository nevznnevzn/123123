import asyncio
import logging
import time
from datetime import datetime

from aiogram import F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove

from database import DatabaseManager
from keyboards import Keyboards
from models import Location
from services.astro_calculations import AstroService
from services.subscription_service import SubscriptionService
from states import AstroStates


def create_natal_chart_router(
    db_manager: DatabaseManager,
    astro_service: AstroService,
    subscription_service: SubscriptionService,
) -> Router:
    router = Router()

    def format_charts_count(count: int) -> str:
        """–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç"""
        last_digit = count % 10
        last_two_digits = count % 100
        if 11 <= last_two_digits <= 14:
            return f"{count} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç"
        if last_digit == 1:
            return f"{count} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞"
        if 2 <= last_digit <= 4:
            return f"{count} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã"
        return f"{count} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç"

    @router.message(F.text.in_(["/natal", "üìä –ù–∞—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã"]))
    async def natal_charts_menu(message: Message, state: FSMContext):
        """–ú–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Ç–∞–ª—å–Ω—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏"""
        await state.clear()
        user_id = message.from_user.id
        existing_charts = db_manager.get_user_charts(user_id)

        if existing_charts:
            text = f"üåü <b>–ù–∞—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã</b> ‚ú®\n\nüìä –£ –≤–∞—Å {format_charts_count(len(existing_charts))}.\nüîÆ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ö, —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é."
        else:
            text = "üåü <b>–ù–∞—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã</b> ‚ú®\n\nüÜï –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç.\nüí´ –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É –∏ —É–∑–Ω–∞–π—Ç–µ —Ç–∞–π–Ω—ã –∑–≤–µ–∑–¥!"

        await message.answer(
            text, reply_markup=Keyboards.natal_charts_list(existing_charts)
        )

    @router.callback_query(F.data == "select_chart_type")
    async def select_chart_type_handler(callback: CallbackQuery, state: FSMContext):
        await callback.message.edit_text(
            "üåô <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã</b> ‚≠ê\n\n–í—ã–±–µ—Ä–∏—Ç–µ, –¥–ª—è –∫–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É:",
            reply_markup=Keyboards.chart_type_selection(),
        )

    @router.callback_query(F.data.startswith("chart_type_"))
    async def process_chart_type(callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–∞—Ä—Ç—ã"""
        chart_type = callback.data.split("_")[2]
        user_id = callback.from_user.id

        user, _ = db_manager.get_or_create_user(user_id, callback.from_user.full_name)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        is_premium = subscription_service.is_user_premium(user_id)
        if not is_premium:
            existing_charts = db_manager.get_user_charts(user_id)
            if (
                len(existing_charts)
                >= subscription_service.FREE_USER_LIMITS["natal_charts"]
            ):
                await callback.answer(
                    "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç (1).\n"
                    "–û—Ñ–æ—Ä–º–∏—Ç–µ Premium-–ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.",
                    show_alert=True,
                )
                return

        if chart_type == "own":
            user_profile = db_manager.get_user_profile(user_id)

            if not user_profile or not user_profile.is_profile_complete:
                await callback.answer(
                    "–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å!",
                    show_alert=True,
                )
                return

            status_msg = await callback.message.edit_text(
                "‚ú® <b>–ú–∞–≥–∏—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏ –≤ –¥–µ–π—Å—Ç–≤–∏–∏...</b> üîÆ\n\n‚è≥ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –≤–∞—à—É –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –ø–æ –¥–∞–Ω–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª—è..."
            )

            location = astro_service.get_location(user_profile.birth_city)
            if not location:
                await status_msg.edit_text(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è."
                )
                return

            await create_chart_from_profile(
                callback, state, user_profile, location, status_msg
            )

        elif chart_type == "other":
            await callback.message.edit_text(
                "‚úçÔ∏è <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞</b>\n\nüë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É:",
                reply_markup=None,
            )
            await state.set_state(AstroStates.waiting_for_other_name)

    async def create_chart_from_profile(
        callback: CallbackQuery, state: FSMContext, user_profile, location, status_msg
    ):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è"""

        birth_dt = user_profile.birth_date
        has_warning = not user_profile.birth_time_specified
        planets_data = await astro_service.calculate_natal_chart(birth_dt, location)

        new_chart = db_manager.create_natal_chart(
            telegram_id=callback.from_user.id,
            name=f"–ú–æ—è –∫–∞—Ä—Ç–∞ ({user_profile.name})",
            chart_type="own",
            birth_date=birth_dt,
            city=location.city,
            latitude=location.lat,
            longitude=location.lng,
            timezone=location.timezone,
            birth_time_specified=user_profile.birth_time_specified,
            has_warning=has_warning,
            planets_data=planets_data,
            chart_owner_name=user_profile.name,
        )

        await finish_calculation(
            callback.message,
            state,
            birth_dt,
            location,
            planets_data,
            status_msg,
            new_chart.id,
            has_warning,
        )

    @router.message(AstroStates.waiting_for_other_name)
    async def process_other_name(message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –¥–ª—è —á—É–∂–æ–π –∫–∞—Ä—Ç—ã"""
        await state.update_data(other_name=message.text)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞:")
        await state.set_state(AstroStates.waiting_for_other_city)

    @router.message(AstroStates.waiting_for_other_city)
    async def process_other_city(message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —á—É–∂–æ–π –∫–∞—Ä—Ç—ã"""
        city = message.text.strip()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞
        is_valid, error_message = astro_service.validate_city_input(city)
        if not is_valid:
            await message.answer(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞:</b> {error_message}\n\n"
                "üí° <b>–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞:</b>\n"
                "‚Ä¢ –ú–æ—Å–∫–≤–∞\n"
                "‚Ä¢ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥\n"
                "‚Ä¢ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥\n"
                "‚Ä¢ –ù—å—é-–ô–æ—Ä–∫\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=Keyboards.skip_step_keyboard(),
            )
            return
        
        # –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥
        location = astro_service.get_location(city)

        if location is None:
            await message.answer(
                "üåç <b>–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.\n\n"
                "üí° <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</b>\n"
                "‚Ä¢ –£–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É')\n"
                "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ü–∞—Ä–∏–∂, –§—Ä–∞–Ω—Ü–∏—è')\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –µ—â–µ —Ä–∞–∑:",
                reply_markup=Keyboards.skip_step_keyboard(),
            )
            return

        await state.update_data(other_location=location)
        await message.answer(
            f"üìç –ì–æ—Ä–æ–¥: {location.city} (–¢–∞–π–º–∑–æ–Ω–∞: {location.timezone})\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</b>",
            reply_markup=Keyboards.skip_step_keyboard(),
        )
        await state.set_state(AstroStates.waiting_for_other_birth_date)

    @router.message(AstroStates.waiting_for_other_birth_date)
    async def process_other_birth_date(message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —á—É–∂–æ–π –∫–∞—Ä—Ç—ã"""
        try:
            birth_dt = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
            await state.update_data(other_birth_dt=birth_dt, birth_time_specified=True)

            status_msg = await message.answer(
                "‚ú® –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É...", reply_markup=ReplyKeyboardRemove()
            )
            user_data = await state.get_data()
            location = user_data["other_location"]
            other_name = user_data["other_name"]

            await complete_other_calculation(
                message,
                state,
                birth_dt,
                location,
                status_msg,
                other_name,
                has_warning=False,
            )

        except ValueError:
            await message.answer(
                "üòï –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</b>.",
                reply_markup=Keyboards.skip_step_keyboard(),
            )

    async def complete_other_calculation(
        message: Message,
        state: FSMContext,
        birth_dt,
        location,
        status_msg,
        other_name,
        has_warning=False,
    ):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è —á—É–∂–æ–π –∫–∞—Ä—Ç—ã"""
        planets_data = await astro_service.calculate_natal_chart(birth_dt, location)

        new_chart = db_manager.create_natal_chart(
            telegram_id=message.from_user.id,
            name=f"–ö–∞—Ä—Ç–∞ –¥–ª—è {other_name}",
            chart_type="other",
            birth_date=birth_dt,
            city=location.city,
            latitude=location.lat,
            longitude=location.lng,
            timezone=location.timezone,
            birth_time_specified=not has_warning,
            has_warning=has_warning,
            planets_data=planets_data,
            chart_owner_name=other_name,
        )

        await finish_calculation(
            message,
            state,
            birth_dt,
            location,
            planets_data,
            status_msg,
            new_chart.id,
            has_warning,
        )

    async def finish_calculation(
        message: Message,
        state: FSMContext,
        birth_dt,
        location,
        planets_data,
        status_msg,
        chart_id: int,
        has_warning=False,
    ):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—á–µ—Ç–∞"""
        birth_date_str = birth_dt.strftime("%d.%m.%Y")
        birth_time_str = birth_dt.strftime("%H:%M")

        if birth_time_str == "12:00" or has_warning:
            time_info = "‚ö†Ô∏è (–≤—Ä–µ–º—è –Ω–µ—Ç–æ—á–Ω–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 12:00)"
        else:
            time_info = ""

        user_id = message.chat.id
        is_premium = subscription_service.is_user_premium(user_id)
        available_planets = subscription_service.filter_planets_for_user(
            planets_data, user_id
        )

        base_text = (
            f"‚ú® <b>–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞!</b> üåü\n\n"
            f"üóìÔ∏è <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {birth_date_str} {birth_time_str} {time_info}\n"
            f"üìç <b>–ú–µ—Å—Ç–æ:</b> {location.city}\n\n"
            "ü™ê <b>–ü–ª–∞–Ω–µ—Ç—ã –≤ –≤–∞—à–µ–π –∫–∞—Ä—Ç–µ:</b>\n"
            "üëÜ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–ª–∞–Ω–µ—Ç—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
        )

        if not is_premium and len(available_planets) < len(planets_data):
            premium_text = f"\n\nüíé <b>Premium –ø–æ–¥–ø–∏—Å–∫–∞</b> –æ—Ç–∫—Ä–æ–µ—Ç –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö {len(planets_data)} –ø–ª–∞–Ω–µ—Ç!"
            text = base_text + premium_text
        else:
            text = base_text

        try:
            await status_msg.edit_text(
                text,
                reply_markup=Keyboards.planets(
                    list(available_planets.keys()), chart_id, is_premium=is_premium
                ),
            )
        except TelegramBadRequest as e:
            if "message is not modified" in str(e).lower():
                logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            else:
                raise

        if state:
            await state.clear()

    @router.callback_query(F.data.startswith("planet_"))
    async def planet_callback(callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–ª–∞–Ω–µ—Ç—ã"""
        try:
            _, chart_id, planet_name = callback.data.split("_")
            chart_id = int(chart_id)
        except ValueError:
            await callback.answer("–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
            return

        await callback.answer()

        user_id = callback.from_user.id
        chart = db_manager.get_chart_by_id(chart_id, user_id)

        if not chart:
            await callback.message.edit_text(
                "–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", reply_markup=Keyboards.back_to_main_menu()
            )
            return

        planets_data = chart.get_planets_data()
        planet_info = planets_data.get(planet_name)

        if not planet_info:
            await callback.message.answer(
                f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–Ω–µ—Ç–µ '{planet_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True
            )
            return

        sign = planet_info.sign
        description = astro_service.get_planet_description(planet_name, sign)

        planet_emoji = {
            "–°–æ–ª–Ω—Ü–µ": "‚òÄÔ∏è",
            "–õ—É–Ω–∞": "üåô",
            "–ú–µ—Ä–∫—É—Ä–∏–π": "‚òøÔ∏è",
            "–í–µ–Ω–µ—Ä–∞": "‚ôÄÔ∏è",
            "–ú–∞—Ä—Å": "‚ôÇÔ∏è",
            "–Æ–ø–∏—Ç–µ—Ä": "‚ôÉ",
            "–°–∞—Ç—É—Ä–Ω": "‚ôÑ",
            "–£—Ä–∞–Ω": "‚ôÖ",
            "–ù–µ–ø—Ç—É–Ω": "‚ôÜ",
            "–ü–ª—É—Ç–æ–Ω": "‚ôá",
            "–ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç": "‚¨ÜÔ∏è",
        }.get(planet_name, "ü™ê")

        text = f"{planet_emoji} <b>{planet_name} –≤ –∑–Ω–∞–∫–µ {sign}</b> ‚ú®\n\n{description}"

        await callback.message.edit_text(
            text, reply_markup=Keyboards.back_to_planets(chart_id)
        )

    @router.callback_query(
        F.data.startswith("chart_") & ~F.data.startswith("chart_type_")
    )
    async def chart_selected(callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞"""
        chart_id = int(callback.data.split("_")[1])
        user_id = callback.from_user.id
        chart = db_manager.get_chart_by_id(chart_id, user_id)

        if not chart:
            await callback.answer("–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return

        chart_name = (
            f"üë§ –í–∞—à–∞ –∫–∞—Ä—Ç–∞ ({chart.city})"
            if chart.chart_type == "own"
            else f"üë• –ö–∞—Ä—Ç–∞ –¥–ª—è {chart.chart_owner_name} ({chart.city})"
        )

        birth_date_str = chart.birth_date.strftime("%d.%m.%Y")
        text = f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ä—Ç–∞: <b>{chart_name}</b> –æ—Ç {birth_date_str}. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"

        await callback.message.edit_text(
            text, reply_markup=Keyboards.chart_actions(chart_id)
        )

    @router.callback_query(F.data.startswith("open_chart_"))
    async def open_chart(callback: CallbackQuery):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ (–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ) —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã"""
        chart_id = int(callback.data.split("_")[2])
        user_id = callback.from_user.id
        chart = db_manager.get_chart_by_id(chart_id, user_id)

        if not chart:
            await callback.answer("–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return

        planets_data = chart.get_planets_data()
        birth_dt = chart.birth_date
        location = Location(
            city=chart.city,
            lat=chart.latitude,
            lng=chart.longitude,
            timezone=chart.timezone,
        )

        await finish_calculation(
            callback.message,
            None,
            birth_dt,
            location,
            planets_data,
            callback.message,
            chart.id,
            chart.has_warning,
        )

    @router.callback_query(F.data.startswith("delete_chart_"))
    async def delete_chart(callback: CallbackQuery):
        """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã"""
        chart_id = int(callback.data.split("_")[2])
        user_id = callback.from_user.id
        chart = db_manager.get_chart_by_id(chart_id, user_id)

        if not chart:
            await callback.answer("–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ—ë –¥–∞–Ω–Ω—ã—Ö
        if chart.chart_type == "own":
            chart_name = f"–í–∞—à–∞ –∫–∞—Ä—Ç–∞ ({chart.city})"
        else:
            owner_name = chart.chart_owner_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            chart_name = f"–ö–∞—Ä—Ç–∞ –¥–ª—è {owner_name} ({chart.city})"

        await callback.message.edit_text(
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É '<b>{chart_name}</b>'?",
            reply_markup=Keyboards.confirm_delete(chart_id),
        )

    @router.callback_query(F.data.startswith("confirm_delete_chart_"))
    async def confirm_delete_chart(callback: CallbackQuery):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã"""
        try:
            chart_id = int(callback.data.split("_")[3])
            user_id = callback.from_user.id
            chart = db_manager.get_chart_by_id(chart_id, user_id)
            if chart:
                chart_name = (
                    f"–∫–∞—Ä—Ç–∞ –¥–ª—è {chart.chart_owner_name}"
                    if chart.chart_type == "other"
                    else "–≤–∞—à–∞ –∫–∞—Ä—Ç–∞"
                )
                success = db_manager.delete_natal_chart(chart_id, user_id)
                text = (
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ {chart_name}."
                    if success
                    else "üòï –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É."
                )
            else:
                text = "–ö–∞—Ä—Ç–∞ —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞."

            existing_charts = db_manager.get_user_charts(user_id)
            await callback.message.edit_text(
                f"{text}\n\nüîÆ –ú–µ–Ω—é –Ω–∞—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç",
                reply_markup=Keyboards.natal_charts_list(existing_charts),
            )
        except ValueError:
            await callback.answer("–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π ID –∫–∞—Ä—Ç—ã.", show_alert=True)

    @router.callback_query(F.data == "back_to_charts_list")
    async def back_to_charts_list_callback(callback: CallbackQuery, state: FSMContext):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –Ω–∞—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç"""
        await natal_charts_menu(callback.message, state)
        await callback.answer()

    return router
