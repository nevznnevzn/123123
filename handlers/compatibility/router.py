from datetime import datetime

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove

from database_async import async_db_manager
from keyboards import Keyboards
from services.ai_predictions import AIPredictionService
from services.astro_calculations import AstroService
from states import AstroStates

router = Router()
astro_service = AstroService()
ai_service = AIPredictionService()


@router.message(F.text == "üíû –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å")
async def compatibility_start(message: Message, state: FSMContext):
    """–ú–µ–Ω—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π."""
    await state.clear()
    user = await async_db_manager.get_user_profile(message.from_user.id)

    if not user or not user.is_profile_complete:
        await message.answer(
            "–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.",
            reply_markup=Keyboards.setup_profile(),
        )
        return

    reports = await async_db_manager.get_user_compatibility_reports(user.id)

    if not reports:
        text = "üíï <b>–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å</b> ‚ú®\n\nüí´ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤.\nüåπ –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π?"
    else:
        text = f"üíï <b>–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å</b> ‚ú®\n\nüìä –£ –≤–∞—Å {len(reports)} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤.\nüíñ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π."

    await message.answer(
        text, reply_markup=Keyboards.compatibility_reports_list(reports)
    )


@router.callback_query(F.data == "new_compatibility_report")
async def start_new_report_calculation(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏."""
    await callback.message.edit_text(
        "üíï <b>–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏</b> ‚ú®\n\nüë§ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞.",
        reply_markup=None,
    )
    await state.set_state(AstroStates.waiting_for_partner_name)


@router.message(AstroStates.waiting_for_partner_name)
async def process_partner_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞"""
    await state.update_data(partner_name=message.text)
    await message.answer(
        "üåç <b>–ì–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞</b>\n\nüìç –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞."
    )
    await state.set_state(AstroStates.waiting_for_partner_city)


@router.message(AstroStates.waiting_for_partner_city)
async def process_partner_city(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞"""
    city = message.text.strip()
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞
    is_valid, error_message = astro_service.validate_city_input(city)
    if not is_valid:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞:</b> {error_message}\n\n"
            "üí° <b>–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞:</b>\n"
            "‚Ä¢ –ú–æ—Å–∫–≤–∞\n"
            "‚Ä¢ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥\n"
            "‚Ä¢ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥\n"
            "‚Ä¢ –ù—å—é-–ô–æ—Ä–∫\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    # –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥
    location = astro_service.get_location(city)

    if location is None:
        await message.answer(
            "üåç <b>–ì–æ—Ä–æ–¥ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.\n\n"
            "üí° <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</b>\n"
            "‚Ä¢ –£–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É')\n"
            "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ü–∞—Ä–∏–∂, –§—Ä–∞–Ω—Ü–∏—è')\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –µ—â–µ —Ä–∞–∑:"
        )
        return

    await state.update_data(partner_location=location)

    await message.answer(
        f"‚úÖ <b>–ì–æ—Ä–æ–¥ –ø–∞—Ä—Ç–Ω–µ—Ä–∞:</b> {location.city} üìç\n\n"
        "üóìÔ∏è <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</b>",
        reply_markup=Keyboards.skip_step_keyboard(),
    )
    await state.set_state(AstroStates.waiting_for_partner_birth_date)


@router.message(AstroStates.waiting_for_partner_birth_date)
async def process_partner_birth_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞"""
    birth_dt_str = message.text

    if birth_dt_str == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —à–∞–≥ (–≤—Ä–µ–º—è –±—É–¥–µ—Ç 12:00)":
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì</b>, –∞ –∑–∞—Ç–µ–º —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏."
        )
        return

    try:
        birth_dt = datetime.strptime(birth_dt_str, "%d.%m.%Y %H:%M")
    except ValueError:
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É, –µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ
        try:
            birth_dt = datetime.strptime(f"{birth_dt_str} 12:00", "%d.%m.%Y %H:%M")
        except ValueError:
            await message.answer(
                "üòï –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.10.1995 18:45) –∏–ª–∏ —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É.",
                reply_markup=Keyboards.skip_step_keyboard(),
            )
            return

    await state.update_data(partner_birth_dt=birth_dt)

    await message.answer(
        "‚ú® <b>–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã!</b> üí´\n\nüîÆ –ö–∞–∫—É—é —Å—Ñ–µ—Ä—É –∂–∏–∑–Ω–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å?",
        reply_markup=Keyboards.compatibility_spheres(),
    )
    await state.set_state(AstroStates.waiting_for_compatibility_sphere)


@router.callback_query(
    AstroStates.waiting_for_compatibility_sphere, F.data.startswith("comp_sphere_")
)
async def process_compatibility_sphere(callback: CallbackQuery, state: FSMContext):
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    sphere = callback.data.split("_")[2]

    await callback.message.edit_text(
        "‚è≥ <b>–ó–≤–µ–∑–¥—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å...</b> üíï\n\n‚ú® –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 45 —Å–µ–∫—É–Ω–¥."
    )

    user_profile = await async_db_manager.get_user_profile(callback.from_user.id)
    partner_data = await state.get_data()

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–ª–∞–Ω–µ—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    user_location = astro_service.get_location(user_profile.birth_city)
    user_planets = await astro_service.calculate_natal_chart(
        user_profile.birth_date, user_location
    )
    partner_location = partner_data.get("partner_location")
    partner_birth_dt = partner_data.get("partner_birth_dt")
    partner_planets = await astro_service.calculate_natal_chart(
        partner_birth_dt, partner_location
    )

    if not user_planets or not partner_planets:
        await callback.message.edit_text(
            "üòï –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        await state.clear()
        return

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –æ—Ç AI
    report_text = await ai_service.generate_compatibility_report(
        user_planets=user_planets,
        partner_planets=partner_planets,
        sphere=sphere,
        user_name=user_profile.name,
        partner_name=partner_data.get("partner_name"),
    )

    # –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
    if not report_text:
        reports = await async_db_manager.get_user_compatibility_reports(user_profile.id)
        await callback.message.edit_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=Keyboards.compatibility_reports_list(reports),
        )
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –æ—Ç—á–µ—Ç–∞ –∏ –æ–±—Ä–µ–∑–∞–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    if len(report_text) > 3800:  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
        # –û–±—Ä–µ–∑–∞–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ø–æ–ª–Ω–æ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é
        truncated = report_text[:3797]
        last_sentence = truncated.rfind('.')
        if last_sentence > 3000:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—á–∫–∞ –≤ —Ä–∞–∑—É–º–Ω–æ–º –º–µ—Å—Ç–µ
            report_text = truncated[:last_sentence + 1] + "\n\n<i>...</i>"
        else:
            report_text = truncated + "..."

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ –ë–î
    saved_report = await async_db_manager.save_compatibility_report(
        user_id=user_profile.id,
        user_name=user_profile.name,
        partner_name=partner_data.get("partner_name"),
        user_birth_date=user_profile.birth_date,
        partner_birth_date=partner_birth_dt,
        sphere=sphere,
        report_text=report_text,
    )

    await callback.message.edit_text(
        report_text,
        reply_markup=Keyboards.compatibility_report_actions(saved_report.id),
    )
    await state.clear()


@router.callback_query(F.data.startswith("view_comp_report_"))
async def view_compatibility_report(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏."""
    report_id = int(callback.data.split("_")[3])
    user_profile = await async_db_manager.get_user_profile(callback.from_user.id)
    user_id = user_profile.id
    report = await async_db_manager.get_compatibility_report_by_id(report_id, user_id)

    if report:
        report_text = report.report_text

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –æ—Ç—á–µ—Ç–∞ –∏ –æ–±—Ä–µ–∑–∞–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ (–¥–ª—è —Å—Ç–∞—Ä—ã—Ö –æ—Ç—á–µ—Ç–æ–≤)
        if len(report_text) > 3800:  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
            # –û–±—Ä–µ–∑–∞–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ø–æ–ª–Ω–æ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é
            truncated = report_text[:3797]
            last_sentence = truncated.rfind('.')
            if last_sentence > 3000:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—á–∫–∞ –≤ —Ä–∞–∑—É–º–Ω–æ–º –º–µ—Å—Ç–µ
                report_text = truncated[:last_sentence + 1] + "\n\n<i>...</i>"
            else:
                report_text = truncated + "..."

        await callback.message.edit_text(
            report_text, reply_markup=Keyboards.compatibility_report_actions(report.id)
        )
    else:
        await callback.answer("–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)


@router.callback_query(F.data.startswith("delete_comp_report_"))
async def delete_compatibility_report(callback: CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏."""
    report_id = int(callback.data.split("_")[3])
    await callback.message.edit_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –æ—Ç—á–µ—Ç?",
        reply_markup=Keyboards.confirm_delete_compatibility_report(report_id),
    )


@router.callback_query(F.data.startswith("confirm_delete_comp_report_"))
async def confirm_delete_compatibility_report(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É."""
    report_id = int(callback.data.split("_")[4])
    user = await async_db_manager.get_user_profile(callback.from_user.id)

    success = await async_db_manager.delete_compatibility_report(report_id, user.id)
    if success:
        await callback.answer("–û—Ç—á–µ—Ç —É–¥–∞–ª–µ–Ω.", show_alert=True)
    else:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ç—á–µ—Ç.", show_alert=True)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤
    reports = await async_db_manager.get_user_compatibility_reports(user.id)

    if not reports:
        text = "üíï <b>–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å</b> ‚ú®\n\nüí´ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤.\nüåπ –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π?"
    else:
        text = f"üíï <b>–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å</b> ‚ú®\n\nüìä –£ –≤–∞—Å {len(reports)} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤.\nüíñ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π."

    await callback.message.edit_text(
        text, reply_markup=Keyboards.compatibility_reports_list(reports)
    )


@router.callback_query(F.data == "back_to_comp_reports")
async def back_to_comp_reports_list(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –æ—Ç—á–µ—Ç–æ–≤ –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏."""
    user = await async_db_manager.get_user_profile(callback.from_user.id)
    reports = await async_db_manager.get_user_compatibility_reports(user.id)

    if not reports:
        text = "üíï <b>–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å</b> ‚ú®\n\nüí´ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤.\nüåπ –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π?"
    else:
        text = f"üíï <b>–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å</b> ‚ú®\n\nüìä –£ –≤–∞—Å {len(reports)} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤.\nüíñ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π."

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
    if callback.message.text != text:
        await callback.message.edit_text(
            text, reply_markup=Keyboards.compatibility_reports_list(reports)
        )
    else:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        await callback.answer()
