import asyncio
import logging
import platform
import sys
from datetime import datetime, timedelta

from aiogram import Bot, F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from database import DatabaseManager
from database_async import async_db_manager

from . import keyboards
from .states import AdminStates

logger = logging.getLogger(__name__)


def create_admin_router(db_manager=None) -> Router:
    """–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    from database_async import async_db_manager
    if db_manager is None:
        db_manager = async_db_manager
    router = Router()

    @router.message(Command("admin"))
    async def admin_start(message: Message):
        """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é."""
        await message.answer(
            "üîß **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å Solar Balance**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=keyboards.main_admin_keyboard(),
        )

    @router.callback_query(F.data == "admin_panel")
    async def admin_panel_callback(callback: CallbackQuery):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
        await callback.message.edit_text(
            "üîß **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å Solar Balance**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=keyboards.main_admin_keyboard(),
        )
        await callback.answer()

    # === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ===

    @router.callback_query(F.data == "admin_users")
    async def admin_users_menu(callback: CallbackQuery):
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
        await callback.message.edit_text(
            "üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboards.users_management_keyboard(),
        )
        await callback.answer()

    @router.callback_query(F.data == "admin_user_search")
    async def admin_user_search_start(callback: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        await state.set_state(AdminStates.user_search)
        await callback.message.edit_text(
            "üîç **–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=keyboards.back_to_main_admin_keyboard(),
        )
        await callback.answer()

    @router.message(AdminStates.user_search)
    async def admin_search_user(
        message: Message, state: FSMContext
    ):
        """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID."""
        if not message.text.isdigit():
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Telegram ID.")
            return

        user_id = int(message.text)
        user = await async_db_manager.get_user_profile(user_id)

        if user:
            sub = user.subscription
            sub_status = "–ê–∫—Ç–∏–≤–Ω–∞" if user.is_premium else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            if sub and sub.end_date:
                sub_status += f" –¥–æ {sub.end_date.strftime('%d.%m.%Y')}"

            profile_text = (
                f"üë§ **–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
                f"**ID:** `{user.telegram_id}`\n"
                f"**–ò–º—è:** {user.name}\n"
                f"**–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:** {user.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"**Premium:** {sub_status}\n"
                f"**–ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω:** {'‚úÖ' if user.is_profile_complete else '‚ùå'}"
            )
            await message.answer(
                profile_text,
                reply_markup=keyboards.user_profile_keyboard(user_id, user.is_premium),
            )
        else:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        await state.clear()

    @router.callback_query(F.data.startswith("admin_users_list"))
    async def admin_users_list(callback: CallbackQuery):
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        await show_users_list(callback, 1, "all")

    @router.callback_query(F.data.startswith("admin_active_users"))
    async def admin_active_users(callback: CallbackQuery):
        """–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        await show_users_list(callback, 1, "active")

    @router.callback_query(F.data.startswith("admin_premium_users"))
    async def admin_premium_users(callback: CallbackQuery):
        """–°–ø–∏—Å–æ–∫ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        await show_users_list(callback, 1, "premium")

    @router.callback_query(F.data.startswith("users_page_"))
    async def admin_users_pagination(callback: CallbackQuery):
        """–ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        parts = callback.data.split("_")
        list_type = parts[2]
        page = int(parts[3])
        await show_users_list(callback, page, list_type)

    async def show_users_list(
        callback: CallbackQuery,
        page: int,
        list_type: str,
    ):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
        users, total_pages = await async_db_manager.get_users_paginated(page, 10, list_type)

        if not users:
            await callback.message.edit_text(
                "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=keyboards.back_to_main_admin_keyboard(),
            )
            await callback.answer()
            return

        type_names = {
            "all": "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
            "active": "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
            "premium": "Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
        }
        title = type_names.get(list_type, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")

        text = f"üë• **{title}** (—Å—Ç—Ä. {page}/{total_pages})\n\n"

        for user in users:
            premium_status = "üíé" if user.is_premium else "üÜì"
            text += f"{premium_status} `{user.telegram_id}` - {user.name}\n"
            text += f"   üìÖ {user.created_at.strftime('%d.%m.%Y')}\n\n"

        await callback.message.edit_text(
            text,
            reply_markup=keyboards.user_list_navigation_keyboard(
                page, total_pages, list_type
            ),
        )
        await callback.answer()

    # === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ü–ò–°–ö–ê–ú–ò ===

    @router.callback_query(F.data == "admin_subscriptions")
    async def admin_subscriptions_menu(callback: CallbackQuery):
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏."""
        await callback.message.edit_text(
            "üíé **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboards.subscriptions_management_keyboard(),
        )
        await callback.answer()

    @router.callback_query(F.data == "admin_grant_premium")
    async def admin_grant_premium_start(callback: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –≤—ã–¥–∞—á–∏ Premium."""
        await state.set_state(AdminStates.premium_user_search)
        await callback.message.edit_text(
            "üíé **–í—ã–¥–∞—á–∞ Premium –ø–æ–¥–ø–∏—Å–∫–∏**\n\n–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=keyboards.back_to_main_admin_keyboard(),
        )
        await callback.answer()

    @router.message(AdminStates.premium_user_search)
    async def admin_grant_premium_user_found(
        message: Message, state: FSMContext
    ):
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –≤—ã–±–æ—Ä —Å—Ä–æ–∫–∞ Premium."""
        if not message.text.isdigit():
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Telegram ID.")
            return

        user_id = int(message.text)
        user = await async_db_manager.get_user_profile(user_id)

        if user:
            await state.update_data(target_user_id=user_id)
            await message.answer(
                f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user.name} (`{user.telegram_id}`)\n\nüíé –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ Premium –ø–æ–¥–ø–∏—Å–∫–∏:",
                reply_markup=keyboards.premium_duration_keyboard(user_id),
            )
        else:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        await state.clear()

    @router.callback_query(F.data.startswith("premium_"))
    async def admin_premium_duration_selected(
        callback: CallbackQuery
    ):
        """–í—ã–¥–∞—á–∞ Premium –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ä–æ–∫."""
        parts = callback.data.split("_")
        duration = parts[1]
        user_id = int(parts[2])

        days_map = {"7": 7, "30": 30, "90": 90, "365": 365, "unlimited": None}
        days = days_map.get(duration)

        if days is None:  # –ë–µ—Å—Å—Ä–æ—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            await async_db_manager.create_premium_subscription(user_id, duration_days=99999)
            duration_text = "–±–µ—Å—Å—Ä–æ—á–Ω–æ"
        else:
            await async_db_manager.create_premium_subscription(user_id, duration_days=days)
            duration_text = f"{days} –¥–Ω–µ–π"

        await callback.answer(f"‚úÖ Premium –≤—ã–¥–∞–Ω –Ω–∞ {duration_text}!", show_alert=True)
        await callback.message.edit_text(
            f"‚úÖ **Premium –ø–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞**\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{user_id}`\n‚è∞ –°—Ä–æ–∫: {duration_text}",
            reply_markup=keyboards.back_to_main_admin_keyboard(),
        )

    @router.callback_query(F.data == "admin_revoke_premium")
    async def admin_revoke_premium_start(callback: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –æ—Ç–∑—ã–≤–∞ Premium."""
        await state.set_state(AdminStates.revoke_user_search)
        await callback.message.edit_text(
            "‚ùå **–û—Ç–∑—ã–≤ Premium –ø–æ–¥–ø–∏—Å–∫–∏**\n\n–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=keyboards.back_to_main_admin_keyboard(),
        )
        await callback.answer()

    @router.message(AdminStates.revoke_user_search)
    async def admin_revoke_premium_execute(
        message: Message, state: FSMContext
    ):
        """–û—Ç–∑—ã–≤ Premium –ø–æ–¥–ø–∏—Å–∫–∏."""
        if not message.text.isdigit():
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Telegram ID.")
            return

        user_id = int(message.text)
        success = await async_db_manager.revoke_premium_subscription(user_id)

        if success:
            await message.answer("‚úÖ Premium –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–æ–∑–≤–∞–Ω–∞.")
        else:
            await message.answer(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏."
            )

        await state.clear()

    @router.callback_query(F.data == "admin_sub_stats")
    async def admin_subscription_stats(
        callback: CallbackQuery
    ):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫."""
        stats = await async_db_manager.get_detailed_statistics()

        text = (
            f"ÔøΩÔøΩ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫**\n\n"
            f"üíé **–ê–∫—Ç–∏–≤–Ω—ã—Ö Premium:** {stats['active_premium']}\n"
            f"üë• **–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {stats['total_users']}\n"
            f"üìä **–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π:** {stats['complete_profiles']}\n"
            f"üìà **–í—Å–µ–≥–æ –∫–∞—Ä—Ç:** {stats['total_charts']}\n"
            f"üîÆ **–í—Å–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤:** {stats['total_predictions']}"
        )

        await callback.message.edit_text(
            text, reply_markup=keyboards.back_to_main_admin_keyboard()
        )
        await callback.answer()

    @router.callback_query(F.data == "admin_bulk_extend")
    async def admin_bulk_extend_menu(callback: CallbackQuery):
        """–ú–µ–Ω—é –º–∞—Å—Å–æ–≤–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Premium."""
        await callback.message.edit_text(
            "üîÑ **–ú–∞—Å—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Premium**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboards.bulk_premium_keyboard(),
        )
        await callback.answer()

    @router.callback_query(F.data.startswith("bulk_"))
    async def admin_bulk_premium_actions(
        callback: CallbackQuery
    ):
        """–ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å Premium."""
        action = callback.data.split("_", 1)[1]

        if action == "premium_30_active":
            # 30 –¥–Ω–µ–π –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            week_ago = datetime.utcnow() - timedelta(days=7)
            users, _ = await async_db_manager.get_users_paginated(1, 1000, "active")
            count = 0
            for user in users:
                await async_db_manager.create_premium_subscription(
                    user.telegram_id, duration_days=30
                )
                count += 1

            await callback.answer(
                f"‚úÖ Premium –≤—ã–¥–∞–Ω {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!", show_alert=True
            )

        elif action == "premium_7_new":
            # 7 –¥–Ω–µ–π –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today_start = datetime.utcnow().replace(
                hour=0, minute=0, second=0, microsecond=0
            )
            users, _ = await async_db_manager.get_users_paginated(1, 1000, "all")
            count = 0
            for user in users:
                if user.created_at >= today_start:
                    await async_db_manager.create_premium_subscription(
                        user.telegram_id, duration_days=7
                    )
                    count += 1

            await callback.answer(
                f"‚úÖ Premium –≤—ã–¥–∞–Ω {count} –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!", show_alert=True
            )

        elif action == "extend_expiring":
            # –ü—Ä–æ–¥–ª–∏—Ç—å –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
            users = await async_db_manager.get_expiring_subscriptions(7)
            count = await async_db_manager.bulk_extend_premium([u.telegram_id for u in users], 30)

            await callback.answer(f"‚úÖ –ü—Ä–æ–¥–ª–µ–Ω–æ {count} –ø–æ–¥–ø–∏—Å–æ–∫!", show_alert=True)

        await callback.message.edit_text(
            "‚úÖ **–ú–∞—Å—Å–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞**",
            reply_markup=keyboards.back_to_main_admin_keyboard(),
        )

    @router.callback_query(F.data == "admin_cleanup_expired")
    async def admin_cleanup_expired(
        callback: CallbackQuery
    ):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫."""
        count = await async_db_manager.check_and_expire_subscriptions()
        await callback.answer(
            f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {count} –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫!", show_alert=True
        )
        await callback.message.edit_text(
            f"‚úÖ **–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n–û–±–Ω–æ–≤–ª–µ–Ω–æ {count} –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫.",
            reply_markup=keyboards.back_to_main_admin_keyboard(),
        )

    # === –°–ò–°–¢–ï–ú–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï ===

    @router.callback_query(F.data == "admin_system")
    async def admin_system_menu(callback: CallbackQuery):
        """–ú–µ–Ω—é —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
        await callback.message.edit_text(
            "‚öôÔ∏è **–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboards.system_management_keyboard(),
        )
        await callback.answer()

    @router.callback_query(F.data == "admin_detailed_stats")
    async def admin_detailed_stats(
        callback: CallbackQuery
    ):
        """–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞."""
        stats = await async_db_manager.get_detailed_statistics()

        text = (
            f"üìà **–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
            f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
            f"  ‚Ä¢ –í—Å–µ–≥–æ: {stats['total_users']}\n"
            f"  ‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π: {stats['complete_profiles']}\n\n"
            f"üíé **–ü–æ–¥–ø–∏—Å–∫–∏:**\n"
            f"  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö Premium: {stats['active_premium']}\n\n"
            f"üìä **–ö–æ–Ω—Ç–µ–Ω—Ç:**\n"
            f"  ‚Ä¢ –ù–∞—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç: {stats['total_charts']}\n"
            f"  ‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑–æ–≤: {stats['total_predictions']}"
        )

        await callback.message.edit_text(
            text, reply_markup=keyboards.back_to_main_admin_keyboard()
        )
        await callback.answer()

    @router.callback_query(F.data == "admin_tech_info")
    async def admin_tech_info(callback: CallbackQuery):
        """–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ."""
        text = (
            f"üîß **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**\n\n"
            f"**Python:** {sys.version.split()[0]}\n"
            f"**–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:** {platform.system()} {platform.release()}\n"
            f"**–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞:** {datetime.utcnow().strftime('%d.%m.%Y %H:%M:%S')} UTC\n"
            f"**–í–µ—Ä—Å–∏—è –±–æ—Ç–∞:** Solar Balance v2.0"
        )

        await callback.message.edit_text(
            text, reply_markup=keyboards.back_to_main_admin_keyboard()
        )
        await callback.answer()

    @router.callback_query(F.data == "admin_cleanup_db")
    async def admin_cleanup_db(callback: CallbackQuery, db_manager: DatabaseManager):
        """–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        result = await async_db_manager.cleanup_database()

        text = (
            f"ÔøΩÔøΩ **–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n"
            f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {result['expired_predictions_removed']}\n"
            f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {result['subscriptions_expired']}"
        )

        await callback.message.edit_text(
            text, reply_markup=keyboards.back_to_main_admin_keyboard()
        )
        await callback.answer()

    # === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

    @router.callback_query(F.data.startswith("grant_premium_"))
    async def admin_grant_premium_legacy(
        callback: CallbackQuery
    ):
        """–í—ã–¥–∞—á–∞ Premium-—Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (legacy –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)."""
        user_id = int(callback.data.split("_")[-1])
        await async_db_manager.create_premium_subscription(user_id, duration_days=30)

        await callback.answer("‚úÖ Premium-—Å—Ç–∞—Ç—É—Å –≤—ã–¥–∞–Ω –Ω–∞ 30 –¥–Ω–µ–π!", show_alert=True)

        user = await async_db_manager.get_user_profile(user_id)
        sub = user.subscription
        sub_status = "–ê–∫—Ç–∏–≤–Ω–∞" if user.is_premium else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        if sub and sub.end_date:
            sub_status += f" –¥–æ {sub.end_date.strftime('%d.%m.%Y')}"

        profile_text = (
            f"üë§ **–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
            f"**ID:** `{user.telegram_id}`\n"
            f"**–ò–º—è:** {user.name}\n"
            f"**–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:** {user.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"**Premium:** {sub_status}\n"
            f"**–ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω:** {'‚úÖ' if user.is_profile_complete else '‚ùå'}"
        )
        await callback.message.edit_text(
            profile_text,
            reply_markup=keyboards.user_profile_keyboard(user_id, user.is_premium),
        )

    @router.callback_query(F.data.startswith("revoke_premium_"))
    async def admin_revoke_premium_legacy(
        callback: CallbackQuery
    ):
        """–û—Ç–∑—ã–≤ Premium-—Å—Ç–∞—Ç—É—Å–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (legacy –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)."""
        user_id = int(callback.data.split("_")[-1])
        await async_db_manager.cancel_subscription(user_id)

        await callback.answer("‚ùå Premium-—Å—Ç–∞—Ç—É—Å –æ—Ç–æ–∑–≤–∞–Ω.", show_alert=True)

        user = await async_db_manager.get_user_profile(user_id)
        sub = user.subscription
        sub_status = "–ê–∫—Ç–∏–≤–Ω–∞" if user.is_premium else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        if sub and sub.end_date:
            sub_status += f" –¥–æ {sub.end_date.strftime('%d.%m.%Y')}"

        profile_text = (
            f"üë§ **–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
            f"**ID:** `{user.telegram_id}`\n"
            f"**–ò–º—è:** {user.name}\n"
            f"**–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:** {user.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"**Premium:** {sub_status}\n"
            f"**–ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω:** {'‚úÖ' if user.is_profile_complete else '‚ùå'}"
        )
        await callback.message.edit_text(
            profile_text,
            reply_markup=keyboards.user_profile_keyboard(user_id, user.is_premium),
        )

    @router.callback_query(F.data.startswith("view_charts_"))
    async def admin_view_user_charts(
        callback: CallbackQuery
    ):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user_id = int(callback.data.split("_")[-1])
        charts = await async_db_manager.get_user_charts(user_id)

        if not charts:
            text = "üìã –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –Ω–∞—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç."
        else:
            text = f"üìã **–ù–∞—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è** ({len(charts)} —à—Ç.)\n\n"
            for chart in charts[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                chart_type = "üë§ –°–≤–æ—è" if chart.chart_type == "own" else "üë• –ß—É–∂–∞—è"
                text += f"{chart_type} - {chart.city}\n"
                text += f"üìÖ {chart.birth_date.strftime('%d.%m.%Y %H:%M')}\n\n"

        await callback.message.edit_text(
            text, reply_markup=keyboards.back_to_main_admin_keyboard()
        )
        await callback.answer()

    @router.callback_query(F.data.startswith("view_activity_"))
    async def admin_view_user_activity(
        callback: CallbackQuery
    ):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user_id = int(callback.data.split("_")[-1])
        activity = await async_db_manager.get_user_activity(user_id)

        if not activity:
            text = "‚ùå –î–∞–Ω–Ω—ã–µ –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        else:
            text = (
                f"üìä **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
                f"üìã –ù–∞—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç: {activity['charts_count']}\n"
                f"üîÆ –ü—Ä–æ–≥–Ω–æ–∑–æ–≤: {activity['predictions_count']}\n"
                f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {activity['registration_date'].strftime('%d.%m.%Y')}\n"
                f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω: {'–î–∞' if activity['profile_complete'] else '–ù–µ—Ç'}\n"
                f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–∫–ª—é—á–µ–Ω—ã' if activity['notifications_enabled'] else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}"
            )

            if activity["last_chart_date"]:
                text += f"\nüìã –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∞: {activity['last_chart_date'].strftime('%d.%m.%Y')}"
            if activity["last_prediction_date"]:
                text += f"\nüîÆ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑: {activity['last_prediction_date'].strftime('%d.%m.%Y')}"

        await callback.message.edit_text(
            text, reply_markup=keyboards.back_to_main_admin_keyboard()
        )
        await callback.answer()

    # === –†–ê–°–°–´–õ–ö–ò (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª) ===

    @router.callback_query(F.data == "admin_mailing")
    async def admin_mailing_start(callback: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏."""
        await state.set_state(AdminStates.mailing_message_input)
        await callback.message.edit_text(
            "üì£ **–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
            reply_markup=keyboards.back_to_main_admin_keyboard(),
        )
        await callback.answer()

    @router.message(AdminStates.mailing_message_input)
    async def admin_mailing_get_message(
        message: Message, state: FSMContext
    ):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
        await state.update_data(message_to_send=message.model_dump())

        total_users = await async_db_manager.get_total_users_count()

        await message.answer("üìã **–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:**")
        await message.answer(
            f"üìù **–¢–µ–∫—Å—Ç:**\n{message.text}\n\n"
            f"üìä **–ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:** {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
            reply_markup=keyboards.mailing_confirmation_keyboard(),
        )

    @router.callback_query(F.data == "mailing_send", AdminStates.mailing_message_input)
    async def admin_mailing_confirm(
        callback: CallbackQuery,
        state: FSMContext,
        bot: Bot,
    ):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏."""
        data = await state.get_data()
        message_info = data.get("message_to_send")

        if not message_info:
            await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            await state.clear()
            return

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(
            send_mailing_to_users(bot, async_db_manager, message_info, callback.from_user.id)
        )

        await callback.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!", show_alert=True)
        await callback.message.edit_text(
            "‚úÖ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞**\n\nüì§ –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.",
            reply_markup=keyboards.back_to_main_admin_keyboard(),
        )
        await state.clear()

    @router.callback_query(
        F.data == "mailing_cancel", AdminStates.mailing_message_input
    )
    async def admin_mailing_cancel(callback: CallbackQuery, state: FSMContext):
        """–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏."""
        await state.clear()
        await callback.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", show_alert=True)
        await callback.message.edit_text(
            "‚ùå **–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞**",
            reply_markup=keyboards.back_to_main_admin_keyboard(),
        )

    async def send_mailing_to_users(
        bot: Bot, db_manager: DatabaseManager, message_info: dict, admin_id: int
    ):
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É. –ê–¥–º–∏–Ω ID: {admin_id}")
        
        users = await async_db_manager.get_users_for_mailing()
        logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        
        message = Message.model_validate(message_info)
        logger.info(f"üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message.text[:50]}...")

        success_count = 0
        error_count = 0
        error_details = []

        for i, user in enumerate(users, 1):
            logger.info(f"üì§ [{i}/{len(users)}] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id} ({user.name})")
            
            try:
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º parse_mode, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º None
                parse_mode = getattr(message, 'parse_mode', None)
                
                await bot.send_message(
                    chat_id=user.telegram_id,
                    text=message.text,
                    parse_mode=parse_mode,
                )
                success_count += 1
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
                await asyncio.sleep(0.05)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            except Exception as e:
                error_count += 1
                error_msg = f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}"
                logger.error(error_msg)
                error_details.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id}: {e}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
                if "Forbidden" in str(e):
                    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
                elif "user not found" in str(e).lower():
                    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                elif "chat not found" in str(e).lower():
                    logger.warning(f"–ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        logger.info(f"üìä –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {success_count}, –û—à–∏–±–æ–∫: {error_count}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É
        try:
            report_text = f"üìä **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n"
            report_text += f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
            report_text += f"‚ùå –û—à–∏–±–æ–∫: {error_count}\n"
            report_text += f"üì§ –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(users)}"
            
            if error_details:
                report_text += f"\n\nüîç **–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:**\n"
                for detail in error_details[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
                    report_text += f"‚Ä¢ {detail}\n"
                if len(error_details) > 5:
                    report_text += f"‚Ä¢ ... –∏ –µ—â–µ {len(error_details) - 5} –æ—à–∏–±–æ–∫"
            
            await bot.send_message(chat_id=admin_id, text=report_text)
            logger.info(f"‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É {admin_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    # === –ë–ê–ó–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===

    @router.callback_query(F.data == "admin_stats")
    async def admin_stats_show(callback: CallbackQuery):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        stats = await async_db_manager.get_app_statistics()

        stats_text = (
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è**\n\n"
            f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
            f"  ‚Ä¢ –í—Å–µ–≥–æ: {stats['total_users']}\n"
            f"  ‚Ä¢ –°–µ–≥–æ–¥–Ω—è: +{stats['new_users_today']}\n"
            f"  ‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: +{stats['new_users_7_days']}\n"
            f"  ‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: +{stats['new_users_30_days']}\n\n"
            f"üíé **Premium:** {stats['active_premium']} –∞–∫—Ç–∏–≤–Ω—ã—Ö\n"
            f"üìä **–ö–∞—Ä—Ç—ã:** {stats['total_charts']} –≤—Å–µ–≥–æ"
        )
        await callback.message.edit_text(stats_text, reply_markup=keyboards.back_to_main_admin_keyboard())
        await callback.answer()

    @router.callback_query(F.data.startswith("send_message_"))
    async def admin_send_message_start(callback: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ –∞–¥–º–∏–Ω–∫–∏."""
        user_id = int(callback.data.split("_")[-1])
        await state.update_data(target_user_id=user_id)
        await state.set_state(AdminStates.send_message_input)
        await callback.message.edit_text(
            f"üí¨ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code>:",
            reply_markup=keyboards.back_to_main_admin_keyboard(),
        )
        await callback.answer()

    @router.message(AdminStates.send_message_input)
    async def admin_send_message_finish(message: Message, state: FSMContext, bot: Bot):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        data = await state.get_data()
        user_id = data.get("target_user_id")
        if not user_id:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            await state.clear()
            return
        try:
            await bot.send_message(chat_id=user_id, text=message.text)
            await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{user_id}</code>!", reply_markup=keyboards.back_to_main_admin_keyboard())
        except Exception as e:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}", reply_markup=keyboards.back_to_main_admin_keyboard())
        await state.clear()

    # === –û–ë–†–ê–ë–û–¢–ö–ê –ù–ï–ò–ó–í–ï–°–¢–ù–´–• CALLBACK ===

    @router.callback_query(F.data == "noop")
    async def admin_noop(callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö callback (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)."""
        await callback.answer()

    return router
