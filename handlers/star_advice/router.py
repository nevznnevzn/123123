import logging

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from database_async import async_db_manager
from services.antispam_service import AntiSpamService
from services.astro_calculations import AstroService
from services.star_advice_service import StarAdviceService
from services.subscription_service import SubscriptionService

from .keyboards import StarAdviceKeyboards
from .states import StarAdviceStates

logger = logging.getLogger(__name__)

router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
astro_service = AstroService()
star_advice_service = StarAdviceService()
antispam_service = AntiSpamService()
subscription_service = SubscriptionService()


@router.message(F.text == "üåü –ó–≤—ë–∑–¥–Ω—ã–π —Å–æ–≤–µ—Ç")
async def star_advice_start(message: Message, state: FSMContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ó–≤—ë–∑–¥–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞"""
    await state.clear()
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
    user_profile = await async_db_manager.get_user_profile(user_id)
    if not user_profile or not user_profile.is_profile_complete:
        await message.answer(
            "üåü <b>–ó–≤—ë–∑–¥–Ω—ã–π —Å–æ–≤–µ—Ç</b> ‚ú®\n\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.",
            reply_markup=StarAdviceKeyboards.back_to_categories(),
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–∏–º–∏—Ç–æ–≤
    is_premium = await subscription_service.is_user_premium(user_id)
    stats_text = antispam_service.get_stats_text(user_id, is_premium)

    text = (
        "üåü <b>–ó–≤—ë–∑–¥–Ω—ã–π —Å–æ–≤–µ—Ç</b> ‚ú®\n\n"
        "–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é —Å–æ–≤–µ—Ç, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ "
        "–∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∏—Ç–∞—Ö –∏ –≤–∞—à–µ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ.\n\n"
        f"{stats_text}\n"
        "üí´ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:"
    )

    await message.answer(text, reply_markup=StarAdviceKeyboards.categories_menu())


@router.callback_query(F.data.startswith("star_advice_"))
async def handle_category_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category = callback.data.split("_")[2]  # star_advice_career -> career
    user_id = callback.from_user.id

    if category == "back":
        await star_advice_start_callback(callback, state)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
    is_premium = await subscription_service.is_user_premium(user_id)
    limits_check = antispam_service.check_limits(user_id, is_premium)

    if not limits_check["allowed"]:
        await handle_limits_exceeded(callback, limits_check)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    await state.update_data(category=category)

    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_descriptions = {
        "career": "üíº —Ä–∞–±–æ—Ç—ã –∏ –∫–∞—Ä—å–µ—Ä—ã",
        "love": "‚ù§Ô∏è –æ—Ç–Ω–æ—à–µ–Ω–∏–π –∏ –ª—é–±–≤–∏",
        "finances": "üí∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –∏ —Ä–µ—Å—É—Ä—Å–æ–≤",
        "family": "üè† —Å–µ–º—å–∏ –∏ –¥–æ–º–∞",
        "growth": "üå± –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞",
        "other": "‚úçÔ∏è –æ–±—â–∏—Ö –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤",
    }

    category_desc = category_descriptions.get(category, "–æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")

    text = (
        f"üåü <b>–ó–≤—ë–∑–¥–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º {category_desc}</b> ‚ú®\n\n"
        "üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å.\n\n"
        "üí° <b>–°–æ–≤–µ—Ç—ã –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞:</b>\n"
        "‚Ä¢ –û–ø–∏—à–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é\n"
        "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç\n"
        "‚Ä¢ –ó–∞–¥–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å\n\n"
        "‚ö†Ô∏è <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b> 10-500 —Å–∏–º–≤–æ–ª–æ–≤"
    )

    await callback.message.edit_text(
        text, reply_markup=StarAdviceKeyboards.back_to_categories()
    )
    await state.set_state(StarAdviceStates.waiting_for_question)


@router.message(StarAdviceStates.waiting_for_question)
async def process_question(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    question = message.text.strip()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    category = state_data.get("category", "other")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞
    validation_result = await star_advice_service.validate_question(question)
    if not validation_result["is_valid"]:
        await message.answer(
            f"‚ùå <b>–í–æ–ø—Ä–æ—Å –Ω–µ –ø—Ä–∏–Ω—è—Ç</b>\n\n"
            f"{validation_result['reason']}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å.",
            reply_markup=StarAdviceKeyboards.back_to_categories(),
        )
        return

    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
    is_premium = await subscription_service.is_user_premium(user_id)
    limits_check = antispam_service.check_limits(user_id, is_premium)

    if not limits_check["allowed"]:
        await handle_limits_exceeded_message(message, limits_check)
        await state.clear()
        return

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–∞
    antispam_service.record_question(user_id)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer(
        "‚è≥ <b>–ó–≤—ë–∑–¥—ã —Ä–∞–∑–º—ã—à–ª—è—é—Ç...</b> üåô\n\n‚ú® –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥."
    )

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_profile = await async_db_manager.get_user_profile(user_id)
        location = astro_service.get_location(user_profile.birth_city)

        if not location:
            await processing_msg.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏. "
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≥–æ—Ä–æ–¥–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ.",
                reply_markup=StarAdviceKeyboards.back_to_categories(),
            )
            await state.clear()
            return

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        planets = await astro_service.calculate_natal_chart(user_profile.birth_date, location)

        if not planets:
            await processing_msg.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É. "
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ—Ñ–∏–ª–µ.",
                reply_markup=StarAdviceKeyboards.back_to_categories(),
            )
            await state.clear()
            return

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–ª–∞–Ω–µ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
        filtered_planets = await subscription_service.filter_planets_for_user(
            planets, user_id
        )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–≤–µ—Ç
        advice = await star_advice_service.generate_advice(
            question=question,
            category=category,
            user_planets=filtered_planets,
            birth_dt=user_profile.birth_date,
            location=location,
            user_name=user_profile.name,
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö –≤ –∫–æ–Ω–µ—Ü
        remaining_questions = limits_check["questions_left"]
        if remaining_questions > 0 and not is_premium:
            advice += f"\n\nüìä –û—Å—Ç–∞–ª–æ—Å—å –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: <b>{remaining_questions}</b>"
        elif remaining_questions == 0 and not is_premium:
            advice += "\n\nüíé –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω. –ü–æ–ª—É—á–∏—Ç–µ Premium –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π!"

        await processing_msg.edit_text(
            advice, reply_markup=StarAdviceKeyboards.back_to_categories()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–≤–µ—Ç–∞: {e}")
        await processing_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=StarAdviceKeyboards.back_to_categories(),
        )

    await state.clear()


async def handle_limits_exceeded(callback: CallbackQuery, limits_check: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ (callback)"""
    reason = limits_check["reason"]

    if reason == "daily_limit":
        text = (
            "üìä <b>–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω</b> ‚è∞\n\n"
            "–í—ã –∑–∞–¥–∞–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n\n"
            "üíé –ü–æ–ª—É—á–∏—Ç–µ Premium –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π!"
        )
        keyboard = StarAdviceKeyboards.limit_reached_keyboard()

    elif reason == "cooldown":
        wait_time = antispam_service.format_wait_time(limits_check["wait_time"])
        text = (
            f"‚è∞ <b>–ö—É–ª–¥–∞—É–Ω –∞–∫—Ç–∏–≤–µ–Ω</b>\n\n"
            f"–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —á–µ—Ä–µ–∑: <b>{wait_time}</b>\n\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: <b>{limits_check['questions_left']}</b>"
        )
        keyboard = StarAdviceKeyboards.cooldown_keyboard()

    else:
        text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤."
        keyboard = StarAdviceKeyboards.back_to_categories()

    await callback.message.edit_text(text, reply_markup=keyboard)


async def handle_limits_exceeded_message(message: Message, limits_check: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ (message)"""
    reason = limits_check["reason"]

    if reason == "daily_limit":
        text = (
            "üìä <b>–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω</b> ‚è∞\n\n"
            "–í—ã –∑–∞–¥–∞–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n\n"
            "üíé –ü–æ–ª—É—á–∏—Ç–µ Premium –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π!"
        )
        keyboard = StarAdviceKeyboards.limit_reached_keyboard()

    elif reason == "cooldown":
        wait_time = antispam_service.format_wait_time(limits_check["wait_time"])
        text = (
            f"‚è∞ <b>–ö—É–ª–¥–∞—É–Ω –∞–∫—Ç–∏–≤–µ–Ω</b>\n\n"
            f"–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —á–µ—Ä–µ–∑: <b>{wait_time}</b>\n\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: <b>{limits_check['questions_left']}</b>"
        )
        keyboard = StarAdviceKeyboards.cooldown_keyboard()

    else:
        text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤."
        keyboard = StarAdviceKeyboards.back_to_categories()

    await message.answer(text, reply_markup=keyboard)


@router.callback_query(F.data == "star_advice_back")
async def star_advice_start_callback(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –ó–≤—ë–∑–¥–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞"""
    await state.clear()
    user_id = callback.from_user.id

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–∏–º–∏—Ç–æ–≤
    is_premium = False  # TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    stats_text = antispam_service.get_stats_text(user_id, is_premium)

    text = (
        "üåü <b>–ó–≤—ë–∑–¥–Ω—ã–π —Å–æ–≤–µ—Ç</b> ‚ú®\n\n"
        "–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é —Å–æ–≤–µ—Ç, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ "
        "–∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∏—Ç–∞—Ö –∏ –≤–∞—à–µ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ.\n\n"
        f"{stats_text}\n"
        "üí´ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:"
    )

    await callback.message.edit_text(
        text, reply_markup=StarAdviceKeyboards.categories_menu()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ª–∏–º–∏—Ç–æ–≤
@router.callback_query(F.data == "get_premium")
async def get_premium_info(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–µ"""
    text = (
        "üíé <b>Premium –ø–æ–¥–ø–∏—Å–∫–∞</b> ‚ú®\n\n"
        "üåü <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Premium:</b>\n"
        "‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ó–≤—ë–∑–¥–Ω–æ–º—É —Å–æ–≤–µ—Ç—É\n"
        "‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫—É–ª–¥–∞—É–Ω (1 –º–∏–Ω—É—Ç–∞)\n"
        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏\n\n"
        "üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 499‚ÇΩ –≤ –º–µ—Å—è—Ü\n\n"
        "üöÄ –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–∫—É–ø–∫–∞!"
    )

    await callback.message.edit_text(
        text, reply_markup=StarAdviceKeyboards.back_to_categories()
    )
