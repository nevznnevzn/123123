import logging
import time
from datetime import datetime

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from database import db_manager
from keyboards import Keyboards
from services.ai_predictions import AIPredictionService

logger = logging.getLogger(__name__)

router = Router()
ai_service = AIPredictionService()


def format_charts_word(count: int) -> str:
    """–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ '–∫–∞—Ä—Ç–∞' –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    last_digit = count % 10
    last_two_digits = count % 100
    if 11 <= last_two_digits <= 14:
        return "–∫–∞—Ä—Ç"
    if last_digit == 1:
        return "–∫–∞—Ä—Ç–∞"
    if 2 <= last_digit <= 4:
        return "–∫–∞—Ä—Ç—ã"
    return "–∫–∞—Ä—Ç"


@router.message(F.text == "üîÆ –ü—Ä–æ–≥–Ω–æ–∑—ã")
async def predictions_menu(message: Message):
    """–ú–µ–Ω—é –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
    user_id = message.from_user.id
    charts = db_manager.get_user_charts(user_id)

    if not charts:
        await message.answer(
            "üîÆ <b>–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã</b> ‚ú®\n\n"
            "üìä –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑.\n"
            "üåü –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ä—Ç—É.",
            reply_markup=Keyboards.prediction_charts_list([]),
        )
        return

    text = (
        "üîÆ <b>–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã</b> ‚ú®\n\n"
        f"üìä –£ –≤–∞—Å {len(charts)} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö {format_charts_word(len(charts))}.\n"
        "‚≠ê –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –Ω–∏—Ö, —á—Ç–æ–±—ã —Å–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ."
    )

    await message.answer(text, reply_markup=Keyboards.prediction_charts_list(charts))


@router.callback_query(F.data.startswith("predict_chart_"))
async def select_chart_for_prediction(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞"""
    chart_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    chart = db_manager.get_chart_by_id(chart_id, user_id)

    if not chart:
        await callback.answer("–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return

    owner_name = chart.chart_owner_name or "–í–∞—à–∞ –∫–∞—Ä—Ç–∞"
    text = f"üåü <b>–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ä—Ç–∞:</b> {owner_name} ({chart.city}) ‚ú®\n\nüîÆ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:"

    await callback.message.edit_text(
        text, reply_markup=Keyboards.prediction_types(chart_id)
    )


@router.callback_query(F.data.startswith("prediction_"))
async def generate_prediction(callback: CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞"""
    parts = callback.data.split("_")
    period = parts[1]
    chart_id = int(parts[2])

    user_id = callback.from_user.id
    chart = db_manager.get_chart_by_id(chart_id, user_id)
    if not chart:
        await callback.answer("–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–µ–π—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
    existing_prediction = db_manager.find_valid_prediction(user_id, chart_id, period)
    if existing_prediction:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        period_display = ai_service._get_period_display(
            period, existing_prediction.valid_from, existing_prediction.valid_until
        )
        created_date = existing_prediction.created_at.strftime("%d.%m.%Y –≤ %H:%M")

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —ç—Ç–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
        info_header = f"üíæ <b>–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑</b>\nüìÖ {period_display}\nüïê –°–æ–∑–¥–∞–Ω: {created_date}\n\n"
        full_content = info_header + existing_prediction.content

        await callback.message.edit_text(
            full_content, reply_markup=Keyboards.back_to_main_menu()
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    progress_msg = await callback.message.edit_text(
        "‚è≥ <b>–ó–≤–µ–∑–¥—ã —à–µ–ø—á—É—Ç...</b> üåô\n\n‚ú® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–æ–≥–Ω–æ–∑... –û–∂–∏–¥–∞–π—Ç–µ –¥–æ 20 —Å–µ–∫—É–Ω–¥."
    )
    
    # –ß–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    import asyncio
    async def show_progress():
        await asyncio.sleep(10)
        try:
            await progress_msg.edit_text(
                "‚è≥ <b>–ó–≤–µ–∑–¥—ã –≤—Å–µ –µ—â–µ —à–µ–ø—á—É—Ç...</b> üåô\n\n‚ú® –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ... –ï—â–µ –Ω–µ–º–Ω–æ–≥–æ —Ç–µ—Ä–ø–µ–Ω–∏—è!"
            )
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(show_progress())

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏–∑ AI —Å–µ—Ä–≤–∏—Å–∞
    valid_from, valid_until = ai_service.get_prediction_period(period)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    planets = chart.get_planets_data()
    owner_name = chart.chart_owner_name or "–í–∞—à–∞ –∫–∞—Ä—Ç–∞"
    birth_dt = chart.birth_date
    location = None  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é

    # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    start_time = time.time()

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑ —á–µ—Ä–µ–∑ AI —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    try:
        prediction_text = await ai_service.generate_prediction(
            user_planets=planets,
            prediction_type=period,
            owner_name=owner_name,
            birth_dt=birth_dt,
            location=location,
        )
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–°–µ—Ä–≤–∏—Å –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n"
            "üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=Keyboards.back_to_main_menu(),
        )
        return

    generation_time = time.time() - start_time

    if "‚ùå" in prediction_text or "–æ—à–∏–±–∫–∞" in prediction_text.lower():
        await callback.message.edit_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è <b>{owner_name}</b>. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=Keyboards.back_to_main_menu(),
        )
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            db_manager.create_prediction(
                telegram_id=user_id,
                chart_id=chart_id,
                prediction_type=period,
                valid_from=valid_from,
                valid_until=valid_until,
                content=prediction_text,
                generation_time=generation_time,
            )

            await callback.message.edit_text(
                prediction_text, reply_markup=Keyboards.back_to_main_menu()
            )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–æ–≥–Ω–æ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
            period_display = ai_service._get_period_display(
                period, valid_from, valid_until
            )
            await callback.answer(
                f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {period_display}", show_alert=False
            )

        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑
            await callback.message.edit_text(
                prediction_text, reply_markup=Keyboards.back_to_main_menu()
            )
            await callback.answer("‚ö†Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω", show_alert=False)


@router.callback_query(F.data == "back_to_pred_charts")
async def back_to_prediction_charts(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ä—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞"""
    await callback.answer()
    await predictions_menu(callback.message)


@router.callback_query(F.data.startswith("view_specific_prediction"))
async def view_specific_prediction(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
    prediction_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    predictions = db_manager.get_user_predictions(user_id, active_only=False)
    prediction = next((p for p in predictions if p.id == prediction_id), None)

    if not prediction:
        await callback.answer("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–≥–Ω–æ–∑ –µ—â–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
    if not prediction.is_valid():
        await callback.answer("–≠—Ç–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω", show_alert=True)
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑
    await callback.message.edit_text(
        prediction.content, reply_markup=Keyboards.back_to_main_menu()
    )


@router.callback_query(F.data.startswith("create_new_prediction_"))
async def create_new_prediction_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ (–≤–æ–∑–≤—Ä–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö)"""
    chart_id = int(callback.data.split("_")[3])
    user_id = callback.from_user.id
    chart = db_manager.get_chart_by_id(chart_id, user_id)

    if not chart:
        await callback.answer("–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return

    owner_name = chart.chart_owner_name or "–í–∞—à–∞ –∫–∞—Ä—Ç–∞"
    text = f"üåü <b>–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ä—Ç–∞:</b> {owner_name} ({chart.city}) ‚ú®\n\nüîÆ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:"

    await callback.message.edit_text(
        text, reply_markup=Keyboards.prediction_types(chart_id)
    )
