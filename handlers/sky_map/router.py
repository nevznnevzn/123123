import logging
from datetime import datetime
from typing import Optional

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import BufferedInputFile, CallbackQuery, Message

from database_async import async_db_manager
from keyboards import Keyboards
from services.astro_calculations import AstroService
from services.sky_visualization_service import SkyVisualizationService

from .keyboards import SkyMapKeyboards
from .states import SkyMapStates

logger = logging.getLogger(__name__)

router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
sky_service = SkyVisualizationService()
astro_service = AstroService()


@router.message(F.text == "üåå –ó–≤—ë–∑–¥–Ω–æ–µ –Ω–µ–±–æ")
async def sky_map_start(message: Message, state: FSMContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–≤–µ–∑–¥–Ω–æ–≥–æ –Ω–µ–±–∞"""
    await state.clear()
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
    user_profile = await async_db_manager.get_user_profile(user_id)
    if not user_profile or not user_profile.is_profile_complete:
        await message.answer(
            "üåå <b>–ó–≤—ë–∑–¥–Ω–æ–µ –Ω–µ–±–æ</b> ‚ú®\n\n"
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –∑–≤–µ–∑–¥–Ω–æ–≥–æ –Ω–µ–±–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.",
            reply_markup=SkyMapKeyboards.back_to_main(),
        )
        return

    text = (
        "üåå <b>–ó–≤—ë–∑–¥–Ω–æ–µ –Ω–µ–±–æ</b> ‚ú®\n\n"
        "–í —Ç—É —Å–µ–∫—É–Ω–¥—É, –∫–æ–≥–¥–∞ —Ç—ã –ø–æ—è–≤–∏–ª—Å—è(–ª–∞—Å—å) –Ω–∞ —Å–≤–µ—Ç, –Ω–µ–±–æ –∑–∞–º–µ—Ä–ª–æ ‚Äî "
        "–∏ –≤—ã—Å—Ç—Ä–æ–∏–ª–æ—Å—å –≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —É–∑–æ—Ä. –ü–ª–∞–Ω–µ—Ç—ã, –∑–≤—ë–∑–¥—ã, –õ—É–Ω–∞ ‚Äî "
        "–≤—Å—ë —Å–ª–æ–∂–∏–ª–æ—Å—å –≤ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –æ—Ç–ø–µ—á–∞—Ç–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–±–µ.\n\n"
        "‚ú® –ì–æ—Ç–æ–≤(–∞) —É–≤–∏–¥–µ—Ç—å, –∫–∞–∫ –≤—ã–≥–ª—è–¥–µ–ª–æ —Ç–≤–æ—ë –Ω–µ–±–æ?"
    )

    await message.answer(text, reply_markup=SkyMapKeyboards.main_menu())


@router.callback_query(F.data == "my_sky")
async def create_my_sky(callback: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –Ω–µ–±–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_profile = await async_db_manager.get_user_profile(user_id)
    if not user_profile or not user_profile.is_profile_complete:
        await callback.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", show_alert=True)
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await callback.message.edit_text(
        "üåå <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –∑–≤–µ–∑–¥–Ω–æ–≥–æ –Ω–µ–±–∞...</b> ‚ú®\n\n"
        "‚è≥ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–ª–∞–Ω–µ—Ç –∏ –∑–≤–µ–∑–¥...\n"
        "üî≠ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥"
    )

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        location = astro_service.get_location(user_profile.birth_city)
        if not location:
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞ —Ä–æ–∂–¥–µ–Ω–∏—è.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ—Ñ–∏–ª–µ.",
                reply_markup=SkyMapKeyboards.back_to_main(),
            )
            return

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É
        planets = await astro_service.calculate_natal_chart(user_profile.birth_date, location)
        if not planets:
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ—Ñ–∏–ª–µ.",
                reply_markup=SkyMapKeyboards.back_to_main(),
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –Ω–µ–±–∞
        sky_image_bytes = await sky_service.create_birth_sky_map(
            birth_date=user_profile.birth_date,
            location=location,
            planets=planets,
            owner_name=user_profile.name,
        )

        if not sky_image_bytes:
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É –∑–≤–µ–∑–¥–Ω–æ–≥–æ –Ω–µ–±–∞.\n" "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=SkyMapKeyboards.back_to_main(),
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        luna_sign = planets.get('–õ—É–Ω–∞', type('obj', (), {'sign': '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∑–Ω–∞–∫–∞'})).sign
        solnce_sign = planets.get('–°–æ–ª–Ω—Ü–µ', type('obj', (), {'sign': '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∑–Ω–∞–∫–∞'})).sign
        
        description = (
            f"üåå <b>–¢–≤–æ—ë –∑–≤–µ–∑–¥–Ω–æ–µ –Ω–µ–±–æ</b> ‚ú®\n\n"
            f"ü™ê <i>–¢–∞–∫ –≤—ã–≥–ª—è–¥–µ–ª–æ –Ω–µ–±–æ, –∫–æ–≥–¥–∞ —Ç—ã —Ä–æ–¥–∏–ª—Å—è(–ª–∞—Å—å) "
            f"{user_profile.birth_date.strftime('%d %B %Y')} –≤ {user_profile.birth_date.strftime('%H:%M')} "
            f"–≤ {user_profile.birth_city}</i>\n\n"
            f"üåô –õ—É–Ω–∞ —Ç–æ–ª—å–∫–æ –≤—ã—à–ª–∞ –∏–∑ {luna_sign}, –∞ –°–æ–ª–Ω—Ü–µ –≤ {solnce_sign} –≤–∑–æ—à–ª–æ –Ω–∞–¥ –≥–æ—Ä–∏–∑–æ–Ω—Ç–æ–º ‚Äî "
            f"–º–æ–º–µ–Ω—Ç —Ç—ë–ø–ª–æ–π —Å–∏–ª—ã –∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏...\n\n"
            f"‚ú® <i>–≠—Ç–æ—Ç —É–∑–æ—Ä –∑–≤–µ–∑–¥ –∏ –ø–ª–∞–Ω–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–±–µ!</i>"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_file = BufferedInputFile(sky_image_bytes, filename="star_map.png")
        await callback.message.answer_photo(
            photo=image_file,
            caption=description,
            reply_markup=SkyMapKeyboards.sky_actions(),
        )

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
        await callback.message.delete()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –Ω–µ–±–∞: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã –∑–≤–µ–∑–¥–Ω–æ–≥–æ –Ω–µ–±–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=SkyMapKeyboards.back_to_main(),
        )


@router.callback_query(F.data == "other_sky")
async def start_other_sky(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –Ω–µ–±–∞ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞"""
    await callback.message.edit_text(
        "üåå <b>–ù–µ–±–æ –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞</b> ‚ú®\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É –∑–≤–µ–∑–¥–Ω–æ–≥–æ –Ω–µ–±–∞:",
        reply_markup=SkyMapKeyboards.back_to_main(),
    )
    await state.set_state(SkyMapStates.waiting_for_other_name)


@router.message(SkyMapStates.waiting_for_other_name)
async def process_other_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –¥–ª—è —á—É–∂–æ–π –∫–∞—Ä—Ç—ã"""
    other_name = message.text.strip()

    if len(other_name) > 50:
        await message.answer(
            "–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è."
        )
        return

    await state.update_data(other_name=other_name)
    await message.answer(
        f"üë§ <b>–ö–∞—Ä—Ç–∞ –¥–ª—è {other_name}</b>\n\n"
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>25.12.1990</code>",
        reply_markup=SkyMapKeyboards.back_to_main(),
    )
    await state.set_state(SkyMapStates.waiting_for_other_date)


@router.message(SkyMapStates.waiting_for_other_date)
async def process_other_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è —á—É–∂–æ–π –∫–∞—Ä—Ç—ã"""
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã
        date_formats = ["%d.%m.%Y", "%d/%m/%Y", "%d-%m-%Y", "%Y-%m-%d"]
        birth_date = None

        for date_format in date_formats:
            try:
                birth_date = datetime.strptime(message.text.strip(), date_format)
                break
            except ValueError:
                continue

        if not birth_date:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì</b>\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>25.12.1990</code>",
                reply_markup=SkyMapKeyboards.back_to_main(),
            )
            return

        await state.update_data(birth_date=birth_date)
        await message.answer(
            "üïê <b>–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>14:30</code>\n\n"
            "üí° –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ <code>12:00</code>",
            reply_markup=SkyMapKeyboards.skip_time(),
        )
        await state.set_state(SkyMapStates.waiting_for_other_time)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=SkyMapKeyboards.back_to_main(),
        )


@router.message(SkyMapStates.waiting_for_other_time)
async def process_other_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è —á—É–∂–æ–π –∫–∞—Ä—Ç—ã"""
    try:
        time_str = message.text.strip()

        # –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è
        try:
            time_parts = time_str.split(":")
            hours = int(time_parts[0])
            minutes = int(time_parts[1]) if len(time_parts) > 1 else 0

            if not (0 <= hours <= 23 and 0 <= minutes <= 59):
                raise ValueError("Invalid time range")

        except (ValueError, IndexError):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ß–ß:–ú–ú</b>\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>14:30</code> –∏–ª–∏ <code>9:15</code>",
                reply_markup=SkyMapKeyboards.skip_time(),
            )
            return

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        state_data = await state.get_data()
        birth_date = state_data["birth_date"]
        birth_datetime = birth_date.replace(hour=hours, minute=minutes)

        await state.update_data(birth_datetime=birth_datetime)
        await message.answer(
            "üèôÔ∏è <b>–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–ú–æ—Å–∫–≤–∞</code> –∏–ª–∏ <code>–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥</code>",
            reply_markup=SkyMapKeyboards.back_to_main(),
        )
        await state.set_state(SkyMapStates.waiting_for_other_city)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=SkyMapKeyboards.back_to_main(),
        )


@router.callback_query(F.data == "skip_time")
async def skip_time_input(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º 12:00)"""
    state_data = await state.get_data()
    birth_date = state_data["birth_date"]
    birth_datetime = birth_date.replace(hour=12, minute=0)

    await state.update_data(birth_datetime=birth_datetime)
    await callback.message.edit_text(
        "üèôÔ∏è <b>–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–ú–æ—Å–∫–≤–∞</code> –∏–ª–∏ <code>–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥</code>",
        reply_markup=SkyMapKeyboards.back_to_main(),
    )
    await state.set_state(SkyMapStates.waiting_for_other_city)


@router.message(SkyMapStates.waiting_for_other_city)
async def process_other_city(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —á—É–∂–æ–π –∫–∞—Ä—Ç—ã"""
    city_name = message.text.strip()

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞
    is_valid, error_message = astro_service.validate_city_input(city_name)
    if not is_valid:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞:</b> {error_message}\n\n"
            "üí° <b>–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞:</b>\n"
            "‚Ä¢ –ú–æ—Å–∫–≤–∞\n"
            "‚Ä¢ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥\n"
            "‚Ä¢ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥\n"
            "‚Ä¢ –ù—å—é-–ô–æ—Ä–∫\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=SkyMapKeyboards.back_to_main(),
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞
    location = astro_service.get_location(city_name)
    if not location:
        await message.answer(
            "üåç <b>–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.\n\n"
            "üí° <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</b>\n"
            "‚Ä¢ –£–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É')\n"
            "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ü–∞—Ä–∏–∂, –§—Ä–∞–Ω—Ü–∏—è')\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –µ—â–µ —Ä–∞–∑:",
            reply_markup=SkyMapKeyboards.back_to_main(),
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
    state_data = await state.get_data()
    other_name = state_data["other_name"]
    birth_datetime = state_data["birth_datetime"]

    processing_msg = await message.answer(
        f"üåå <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è {other_name}...</b> ‚ú®\n\n"
        "‚è≥ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–ª–∞–Ω–µ—Ç –∏ –∑–≤–µ–∑–¥...\n"
        "üî≠ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥"
    )

    try:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É
        planets = await astro_service.calculate_natal_chart(birth_datetime, location)
        if not planets:
            await processing_msg.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=SkyMapKeyboards.back_to_main(),
            )
            await state.clear()
            return

        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –Ω–µ–±–∞
        sky_image_bytes = await sky_service.create_birth_sky_map(
            birth_date=birth_datetime,
            location=location,
            planets=planets,
            owner_name=other_name,
        )

        if not sky_image_bytes:
            await processing_msg.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É –∑–≤–µ–∑–¥–Ω–æ–≥–æ –Ω–µ–±–∞.\n" "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=SkyMapKeyboards.back_to_main(),
            )
            await state.clear()
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        description = (
            f"üåå <b>–ó–≤–µ–∑–¥–Ω–æ–µ –Ω–µ–±–æ –¥–ª—è {other_name}</b> ‚ú®\n\n"
            f"üìÖ <b>–ú–æ–º–µ–Ω—Ç —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {birth_datetime.strftime('%d.%m.%Y –≤ %H:%M')}\n"
            f"üìç <b>–ú–µ—Å—Ç–æ:</b> {location.city}\n\n"
            f"ü™ê –í —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –Ω–µ–±–µ—Å–Ω—ã–µ —Ç–µ–ª–∞ –≤—ã—Å—Ç—Ä–æ–∏–ª–∏—Å—å –≤ —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, "
            f"—Å–æ–∑–¥–∞–≤–∞—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –æ—Ç–ø–µ—á–∞—Ç–æ–∫.\n\n"
            f"‚ú® <i>–ö–∞–∂–¥–∞—è –∫–∞—Ä—Ç–∞ –∑–≤–µ–∑–¥–Ω–æ–≥–æ –Ω–µ–±–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞, –∫–∞–∫ –æ—Ç–ø–µ—á–∞—Ç–æ–∫ –ø–∞–ª—å—Ü–∞!</i>"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_file = BufferedInputFile(
            sky_image_bytes, filename=f"star_map_{other_name}.png"
        )
        await message.answer_photo(
            photo=image_file,
            caption=description,
            reply_markup=SkyMapKeyboards.sky_actions(),
        )

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
        await processing_msg.delete()
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –Ω–µ–±–∞ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞: {e}")
        await processing_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã –∑–≤–µ–∑–¥–Ω–æ–≥–æ –Ω–µ–±–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=SkyMapKeyboards.back_to_main(),
        )
        await state.clear()


@router.callback_query(F.data == "create_another_sky")
async def create_another_sky(callback: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –µ—â–µ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã –Ω–µ–±–∞"""
    await start_other_sky(callback, state)


@router.callback_query(F.data == "back_to_sky_menu")
async def back_to_sky_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–≤–µ–∑–¥–Ω–æ–≥–æ –Ω–µ–±–∞"""
    await state.clear()
    text = (
        "üåå <b>–ó–≤—ë–∑–¥–Ω–æ–µ –Ω–µ–±–æ</b> ‚ú®\n\n"
        "–í —Ç—É —Å–µ–∫—É–Ω–¥—É, –∫–æ–≥–¥–∞ –≤—ã –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–∞ —Å–≤–µ—Ç, –Ω–µ–±–æ –∑–∞–º–µ—Ä–ª–æ ‚Äî "
        "–∏ –≤—ã—Å—Ç—Ä–æ–∏–ª–æ—Å—å –≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —É–∑–æ—Ä. –ü–ª–∞–Ω–µ—Ç—ã, –∑–≤—ë–∑–¥—ã, –õ—É–Ω–∞ ‚Äî "
        "–≤—Å—ë —Å–ª–æ–∂–∏–ª–æ—Å—å –≤ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –æ—Ç–ø–µ—á–∞—Ç–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–æ–ª—å–∫–æ –≤–∞–º.\n\n"
        "‚ú® –ì–æ—Ç–æ–≤—ã —É–≤–∏–¥–µ—Ç—å, –∫–∞–∫ –≤—ã–≥–ª—è–¥–µ–ª–æ –≤–∞—à–µ –Ω–µ–±–æ?"
    )

    await callback.message.edit_text(text, reply_markup=SkyMapKeyboards.main_menu())
