from aiogram import Bot, F, Router
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    BotCommand,
    CallbackQuery,
    FSInputFile,
    MenuButtonCommands,
    Message,
    ReplyKeyboardRemove,
)

from database import db_manager
from keyboards import Keyboards
from states import AstroStates

router = Router()


async def setup_bot_commands(bot: Bot):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é"""
    commands = [
        BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="menu", description="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="reset_data", description="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (–æ—Ç–ª–∞–¥–∫–∞)"),
    ]
    await bot.set_my_commands(commands)
    menu_button = MenuButtonCommands()
    await bot.set_chat_menu_button(menu_button=menu_button)


def format_charts_count_bold(count: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ —Å –∂–∏—Ä–Ω—ã–º –Ω–∞—á–µ—Ä—Ç–∞–Ω–∏–µ–º —á–∏—Å–ª–∞"""
    last_digit = count % 10
    last_two_digits = count % 100
    if 11 <= last_two_digits <= 14:
        return f"<b>{count}</b> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç"
    if last_digit == 1:
        return f"<b>{count}</b> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞"
    if 2 <= last_digit <= 4:
        return f"<b>{count}</b> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã"
    return f"<b>{count}</b> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç"


def get_main_menu(user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_profile = db_manager.get_user_profile(user_id)
    if not user_profile or not user_profile.is_profile_complete:
        return Keyboards.setup_profile()
    return Keyboards.main_menu()


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.clear()
    user, created = db_manager.get_or_create_user(
        telegram_id=message.from_user.id, name=message.from_user.full_name
    )

    if created or not user.is_profile_complete:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω
        text = (
            f"üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!</b>\n\n"
            "–Ø ‚Äî –≤–∞—à –ª–∏—á–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫, –±–æ—Ç <b>Solar Balance</b> üîÆ\n\n"
            "–ß—Ç–æ–±—ã —è –º–æ–≥ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –¥–ª—è –≤–∞—Å —Ç–æ—á–Ω—ã–µ –Ω–∞—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã, "
            "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å."
        )
        await message.answer_photo(
            photo="https://i.imgur.com/your-image.png",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
            caption=text,
            reply_markup=Keyboards.setup_profile(),
        )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è –∏ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω
        has_charts = len(db_manager.get_user_charts(user.telegram_id)) > 0
        text = (
            f"üéâ <b>–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.first_name}!</b>\n\n"
            "–†–∞–¥ —Å–Ω–æ–≤–∞ –≤–∞—Å –≤–∏–¥–µ—Ç—å! –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?"
        )
        await message.answer(text, reply_markup=Keyboards.main_menu(has_charts))


@router.message(Command("menu"))
async def cmd_menu(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu"""
    await state.clear()

    user_id = message.from_user.id
    user_profile = db_manager.get_user_profile(user_id)
    profile_complete = user_profile and user_profile.is_profile_complete

    if not profile_complete:
        text = "üìù <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è</b> ‚öôÔ∏è\n\n–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Ñ–∏–ª—è."
    else:
        text = "üìã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b> ‚ú®"

    await message.answer(text, reply_markup=get_main_menu(user_id))


@router.message(Command("reset_data"))
async def cmd_reset_data(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset_data"""
    reset_text = (
        "<b>‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</b>\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ, –≤–∫–ª—é—á–∞—è –ø—Ä–æ—Ñ–∏–ª—å –∏ –≤—Å–µ –Ω–∞—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã?\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ. –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    )
    await message.answer(reset_text, reply_markup=Keyboards.confirm_reset_keyboard())


@router.message(Command("confirm_reset"))
async def cmd_confirm_reset(message: Message):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö"""
    user_id = message.from_user.id
    db_manager.delete_user_data(user_id)

    await message.answer(
        "‚úÖ –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ /start",
        reply_markup=Keyboards.setup_profile(),
    )


@router.message(F.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_menu(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()

    user_id = message.from_user.id
    user_profile = db_manager.get_user_profile(user_id)

    if user_profile and user_profile.is_profile_complete:
        text = "üìã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b> ‚ú®\n\n–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
    else:
        text = "üìù <b>–ó–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É</b> ‚öôÔ∏è\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Ñ–∏–ª—è."

    await message.answer(text, reply_markup=get_main_menu(user_id))


@router.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'"""
    await state.clear()

    has_charts = len(db_manager.get_user_charts(callback.from_user.id)) > 0

    await callback.message.edit_text(
        "üîÆ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=None
    )

    await callback.message.answer(
        "–ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?", reply_markup=Keyboards.main_menu(has_charts)
    )

    await callback.answer()


@router.callback_query(F.data == "back_to_main")
async def back_to_main_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π callback)"""
    await state.clear()

    has_charts = len(db_manager.get_user_charts(callback.from_user.id)) > 0

    await callback.message.edit_text(
        "üîÆ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=None
    )

    await callback.message.answer(
        "–ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?", reply_markup=Keyboards.main_menu(has_charts)
    )

    await callback.answer()


@router.callback_query(F.data == "main_menu")
async def main_menu_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' (–¥–ª—è –º–æ–¥—É–ª—è –∑–≤–µ–∑–¥–Ω–æ–≥–æ –Ω–µ–±–∞)"""
    await state.clear()

    has_charts = len(db_manager.get_user_charts(callback.from_user.id)) > 0

    await callback.message.edit_text(
        "üîÆ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=None
    )

    await callback.message.answer(
        "–ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?", reply_markup=Keyboards.main_menu(has_charts)
    )

    await callback.answer()


@router.callback_query(F.data == "delete_account")
async def delete_account_callback(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    await callback.message.edit_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ? "
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
        reply_markup=Keyboards.confirm_delete_account(),
    )


@router.callback_query(F.data == "confirm_delete_account")
async def confirm_delete_account_callback(callback: CallbackQuery):
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    deleted, charts_count = db_manager.delete_user_completely(callback.from_user.id)
    if deleted:
        await callback.message.edit_text(
            f"–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∏ {charts_count} –Ω–∞—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã. "
            "–ù–∞–¥–µ—é—Å—å, –≤—ã –≤–µ—Ä–Ω–µ—Ç–µ—Å—å —Å–Ω–æ–≤–∞!",
            reply_markup=None,
        )
    else:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç.", show_alert=True)


@router.message()
async def handle_unknown_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    await message.answer(
        "üòï <b>–ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É</b> ü§î\n\n"
        "‚≠ê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: /start, /help, /menu.",
        reply_markup=get_main_menu(message.from_user.id),
    )


@router.callback_query(F.data.in_(["dummy_header", "dummy_create_header"]))
async def handle_dummy_callbacks(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏-–∑–∞–≥–æ–ª–æ–≤–∫–∏"""
    await callback.answer()
