from datetime import datetime

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove

from database import DatabaseManager
from keyboards import Keyboards
from services.astro_calculations import AstroService
from states import AstroStates, ProfileStates
from utils import format_period_info, get_next_available_time, get_prediction_period

# –£–±–∏—Ä–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ–¥—É–ª—è
# astro_service = AstroService()


def create_profile_router(
    db_manager: DatabaseManager, astro_service: AstroService
) -> Router:
    router = Router()

    @router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
    async def setup_profile_start(message: Message, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        await state.clear()
        await message.answer(
            "üë§ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è - –®–∞–≥ 1 –∏–∑ 4</b>\n\n–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
            reply_markup=ReplyKeyboardRemove(),
        )
        await state.set_state(ProfileStates.waiting_for_name)

    @router.message(ProfileStates.waiting_for_name)
    async def process_name(message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è"""
        name = message.text
        if len(name) > 30:
            await message.answer("–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        await state.update_data(name=name)
        await message.answer(
            "üë§ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è - –®–∞–≥ 2 –∏–∑ 4</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
            reply_markup=Keyboards.gender_selection(),
        )
        await state.set_state(ProfileStates.waiting_for_gender)

    @router.callback_query(
        ProfileStates.waiting_for_gender, F.data.in_(["gender_male", "gender_female"])
    )
    async def process_gender(callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
        gender = callback.data.split("_")[1]
        await state.update_data(gender=gender)
        await callback.message.edit_text(
            "üë§ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è - –®–∞–≥ 3 –∏–∑ 4</b>\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è:",
            reply_markup=None,
        )
        await state.set_state(ProfileStates.waiting_for_city)

    @router.message(ProfileStates.waiting_for_city)
    async def process_city(message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è"""
        city = message.text.strip()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞
        is_valid, error_message = astro_service.validate_city_input(city)
        if not is_valid:
            await message.answer(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞:</b> {error_message}\n\n"
                "üí° <b>–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞:</b>\n"
                "‚Ä¢ –ú–æ—Å–∫–≤–∞\n"
                "‚Ä¢ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥\n"
                "‚Ä¢ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥\n"
                "‚Ä¢ –ù—å—é-–ô–æ—Ä–∫\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return
        
        # –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥
        location = astro_service.get_location(city)

        if location is None:
            await message.answer(
                "üåç <b>–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.\n\n"
                "üí° <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</b>\n"
                "‚Ä¢ –£–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É')\n"
                "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ü–∞—Ä–∏–∂, –§—Ä–∞–Ω—Ü–∏—è')\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –µ—â–µ —Ä–∞–∑:"
            )
            return

        await state.update_data(city=city, location=location)
        await message.answer(
            "üìÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è - –®–∞–≥ 4 –∏–∑ 4</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n\n"
            "üî∏ 15.03.1990 14:30\n"
            "üî∏ 15/03/1990 14:30\n"
            "üî∏ 1990-03-15 14:30\n"
            "üî∏ 15.03.1990 (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏)\n\n"
            "üí° –î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –≤–∞–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è!",
            parse_mode="HTML",
        )
        await state.set_state(ProfileStates.waiting_for_birth_date)

    @router.message(ProfileStates.waiting_for_birth_date)
    async def process_birth_date(message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            birth_dt = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        except ValueError:
            try:
                # –ó–∞—Ç–µ–º –ø—Ä–æ–±—É–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É, –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 12:00
                birth_dt = datetime.strptime(f"{message.text} 12:00", "%d.%m.%Y %H:%M")
            except ValueError:
                await message.answer(
                    "üòï –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</b>.\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: 23.08.1990 14:30. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É.",
                    reply_markup=Keyboards.skip_step_keyboard(),
                )
                return

        await state.update_data(birth_date=birth_dt)

        user_data = await state.get_data()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        db_manager.update_user_profile(
            telegram_id=message.from_user.id,
            name=user_data["name"],
            gender=user_data["gender"],
            birth_date=birth_dt,
            birth_year=birth_dt.year,
            birth_city=user_data["city"],
            birth_time_specified=not ("12:00" in birth_dt.strftime("%H:%M")),
        )

        gender_map = {"male": "–ú—É–∂—Å–∫–æ–π", "female": "–ñ–µ–Ω—Å–∫–∏–π"}

        await message.answer(
            "‚ú® <b>–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!</b> üéâ\n\n"
            f"üë§ <b>–ò–º—è:</b> {user_data['name']}\n"
            f"‚ö§ <b>–ü–æ–ª:</b> {gender_map.get(user_data['gender'], '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üèôÔ∏è <b>–ì–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {user_data['city'].capitalize()}\n"
            f"üóìÔ∏è <b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {birth_dt.strftime('%d.%m.%Y %H:%M')}",
            reply_markup=Keyboards.main_menu(),
        )
        await message.answer(
            "üéâ <b>–û—Ç–ª–∏—á–Ω–æ!</b> ‚ú®\n\nüîÆ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏ –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã!",
            reply_markup=None,
        )
        await state.clear()

    @router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    async def show_profile(message: Message):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = message.from_user.id
        user_profile = db_manager.get_user_profile(user_id)

        if user_profile and user_profile.is_profile_complete:
            birth_date_str = (
                user_profile.birth_date.strftime("%d.%m.%Y")
                if user_profile.birth_date
                else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            )
            birth_time_str = (
                user_profile.birth_date.strftime("%H:%M")
                if user_profile.birth_date and user_profile.birth_time_specified
                else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            )
            gender_str = "–ú—É–∂—Å–∫–æ–π" if user_profile.gender == "male" else "–ñ–µ–Ω—Å–∫–∏–π"

            profile_text = (
                f"<b>üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
                f"<b>–ò–º—è:</b> {user_profile.name}\n"
                f"<b>–ü–æ–ª:</b> {gender_str}\n"
                f"<b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {birth_date_str}\n"
                f"<b>–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {birth_time_str}\n"
                f"<b>–ì–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {user_profile.birth_city}"
            )
            await message.answer(
                profile_text,
                reply_markup=Keyboards.profile_menu(
                    notifications_enabled=user_profile.notifications_enabled
                ),
            )
        else:
            await message.answer(
                "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ.",
                reply_markup=Keyboards.setup_profile(),
            )

    @router.callback_query(F.data == "toggle_notifications")
    async def toggle_notifications_handler(callback: CallbackQuery):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        user_id = callback.from_user.id
        user = db_manager.get_user_profile(user_id)

        if not user:
            await callback.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        new_status = not user.notifications_enabled
        db_manager.set_notifications(user_id, new_status)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        await callback.message.edit_reply_markup(
            reply_markup=Keyboards.profile_menu(notifications_enabled=new_status)
        )

        status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if new_status else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        await callback.answer(f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status_text}.")

    @router.callback_query(F.data == "edit_profile")
    async def edit_profile_callback(callback: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
        await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è:")
        await state.set_state(ProfileStates.waiting_for_name)

    return router
