import asyncio
import logging
import sys
import signal
from pathlib import Path

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from pytz import timezone

from config import Config
from database import DatabaseManager
from services.motivation_service import send_daily_motivation
from utils import set_bot_commands


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞"""
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    Path("logs").mkdir(exist_ok=True)
    
    # –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    log_format = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    log_level = getattr(logging, Config.LOG_LEVEL.upper(), logging.INFO)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ root logger
    logging.basicConfig(
        level=log_level,
        format=log_format,
        handlers=[
            logging.StreamHandler(sys.stdout),
            logging.FileHandler("logs/bot.log", encoding="utf-8") if Config.is_production() else logging.NullHandler()
        ]
    )
    
    # –û—Ç–∫–ª—é—á–∞–µ–º —Å–ª–∏—à–∫–æ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger("aiogram").setLevel(logging.WARNING)
    logging.getLogger("aiohttp").setLevel(logging.WARNING)
    logging.getLogger("asyncio").setLevel(logging.WARNING)
    
    return logging.getLogger(__name__)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è graceful shutdown
bot_instance = None
dp_instance = None
scheduler_instance = None


async def shutdown_handler(signal_name: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ graceful shutdown"""
    logger = logging.getLogger(__name__)
    logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signal_name}, –Ω–∞—á–∏–Ω–∞–µ–º graceful shutdown...")
    
    try:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        if scheduler_instance:
            scheduler_instance.shutdown()
            logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        if dp_instance:
            await dp_instance.stop_polling()
            logger.info("‚úÖ –î–∏—Å–ø–µ—Ç—á–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
        if bot_instance:
            await bot_instance.session.close()
            logger.info("‚úÖ –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")
            
        logger.info("‚úÖ Graceful shutdown –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ shutdown: {e}")
    
    finally:
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        sys.exit(0)


def setup_signal_handlers():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    if sys.platform != "win32":  # Unix-like —Å–∏—Å—Ç–µ–º—ã
        for sig in (signal.SIGTERM, signal.SIGINT):
            signal.signal(sig, lambda s, f: asyncio.create_task(shutdown_handler(signal.Signals(s).name)))


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger = setup_logging()
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ SolarBalance –±–æ—Ç–∞...")
    logger.info(f"üìä –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {Config.ENVIRONMENT}")
    logger.info(f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {Config.get_database_url()}")
    logger.info(f"ü§ñ AI –≤–∫–ª—é—á–µ–Ω: {Config.AI_ENABLED}")
    
    # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    global bot_instance, dp_instance, scheduler_instance
    
    try:
        # --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
        storage = MemoryStorage()
        
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        try:
            db_manager = DatabaseManager(Config.get_database_url())
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
        
        # –ë–æ—Ç
        try:
            bot_instance = Bot(
                token=Config.TOKEN, 
                default=DefaultBotProperties(parse_mode=ParseMode.HTML)
            )
            logger.info("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
            raise
        
        # –î–∏—Å–ø–µ—Ç—á–µ—Ä
        dp_instance = Dispatcher(storage=storage, db_manager=db_manager, bot=bot_instance)
        
        # --- –ò–º–ø–æ—Ä—Ç—ã —Ä–æ—É—Ç–µ—Ä–æ–≤ ---
        try:
            from handlers.admin.middlewares import AdminAuthMiddleware
            from handlers.admin.router import create_admin_router
            from handlers.common.router import router as common_router
            from handlers.compatibility.router import router as compatibility_router
            from handlers.natal_chart.router import create_natal_chart_router
            from handlers.predictions.router import router as predictions_router
            from handlers.profile.router import create_profile_router
            from handlers.sky_map.router import router as sky_map_router
            from handlers.star_advice.router import router as star_advice_router
            from handlers.subscription.router import router as subscription_router
            from services.astro_calculations import AstroService
            from services.subscription_service import SubscriptionService
            
            logger.info("‚úÖ –ú–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
            raise

        # --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ ---
        try:
            astro_service = AstroService()
            subscription_service = SubscriptionService()
            logger.info("‚úÖ –°–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
            raise

        # --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤ ---
        try:
            # –ê–¥–º–∏–Ω —Ä–æ—É—Ç–µ—Ä —Å middleware
            admin_router = create_admin_router()
            auth_middleware = AdminAuthMiddleware(admin_ids=Config.ADMIN_IDS)
            admin_router.message.middleware(auth_middleware)
            admin_router.callback_query.middleware(auth_middleware)
            dp_instance.include_router(admin_router)

            # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã
            dp_instance.include_router(
                create_profile_router(db_manager=db_manager, astro_service=astro_service)
            )
            dp_instance.include_router(
                create_natal_chart_router(
                    db_manager=db_manager,
                    astro_service=astro_service,
                    subscription_service=subscription_service,
                )
            )
            dp_instance.include_router(predictions_router)
            dp_instance.include_router(compatibility_router)
            dp_instance.include_router(star_advice_router)
            dp_instance.include_router(sky_map_router)
            dp_instance.include_router(subscription_router)
            dp_instance.include_router(common_router)
            
            logger.info("‚úÖ –†–æ—É—Ç–µ—Ä—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–æ—É—Ç–µ—Ä–æ–≤: {e}")
            raise

        # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ ---
        try:
            await set_bot_commands(bot_instance)
            logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥: {e}")
            # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º

        # --- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ---
        try:
            scheduler_instance = AsyncIOScheduler(timezone=timezone("Europe/Moscow"))
            scheduler_instance.add_job(
                send_daily_motivation,
                trigger=CronTrigger(hour=10, minute=0),
                kwargs={"bot": bot_instance, "db_manager": db_manager},
                id="daily_motivation",
                replace_existing=True,
            )
            scheduler_instance.start()
            logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω (–µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è –≤ 10:00 –ú–°–ö)")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º

        # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ ---
        setup_signal_handlers()
        
        # --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ polling...")
        
        # –û—á–∏—â–∞–µ–º pending updates
        await bot_instance.delete_webhook(drop_pending_updates=True)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await dp_instance.start_polling(
            bot_instance,
            allowed_updates=["message", "callback_query", "inline_query"],
            skip_updates=True,
        )
        
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è (Ctrl+C)")
        await shutdown_handler("SIGINT")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.exception("–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ:")
        
        # –ü—ã—Ç–∞–µ–º—Å—è graceful shutdown
        try:
            await shutdown_handler("ERROR")
        except:
            pass
        
        sys.exit(1)
    
    finally:
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
        if scheduler_instance:
            scheduler_instance.shutdown()
        if bot_instance:
            await bot_instance.session.close()
        
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        if not Config.TOKEN:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            print("–°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –∏ —É–∫–∞–∂–∏—Ç–µ BOT_TOKEN")
            sys.exit(1)
        
        if not Config.ADMIN_IDS:
            print("‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: ADMIN_IDS –Ω–µ —É–∫–∞–∑–∞–Ω—ã")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        asyncio.run(main())
        
    except (KeyboardInterrupt, SystemExit):
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        sys.exit(1)
