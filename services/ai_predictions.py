import logging
import re
from datetime import datetime, timedelta
from typing import Dict, Optional

try:
    from openai import OpenAI
except ImportError:
    OpenAI = None

from config import Config
from models import Location, PlanetPosition

logger = logging.getLogger(__name__)


def sanitize_html(text: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ HTML-—Ç–µ–≥–∏ –¥–ª—è Telegram, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ <b> –∏ <i>."""
    
    # –£–¥–∞–ª—è–µ–º markdown –±–ª–æ–∫–∏ –∫–æ–¥–∞ —Å —Ç—Ä–æ–π–Ω—ã–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏
    text = re.sub(r'```[a-zA-Z]*\n?', '', text)  # –£–¥–∞–ª—è–µ–º –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–µ ```html –∏–ª–∏ ```
    text = re.sub(r'```', '', text)              # –£–¥–∞–ª—è–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ ```
    
    # –£–¥–∞–ª—è–µ–º –¥—Ä—É–≥–∏–µ markdown —ç–ª–µ–º–µ–Ω—Ç—ã
    text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', text)  # **bold** -> <b>bold</b>
    text = re.sub(r'\*(.*?)\*', r'<i>\1</i>', text)      # *italic* -> <i>italic</i>
    
    allowed = {"b", "i"}

    def replace_tag(match):
        tag_name = match.group(1).lower()
        if tag_name in allowed:
            return match.group(0)
        return ""

    # –£–¥–∞–ª—è–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ HTML —Ç–µ–≥–∏
    text = re.sub(r"</?([a-zA-Z0-9]+)[^>]*>", replace_tag, text)
    
    return text.strip()


class AIPredictionService:
    """–°–µ—Ä–≤–∏—Å AI-–ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""

    def __init__(self):
        self.client = None

        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤...")
        logger.info(f"OpenAI –¥–æ—Å—Ç—É–ø–µ–Ω: {OpenAI is not None}")
        logger.info(f"AI_API –∫–ª—é—á: {'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if Config.AI_API else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")

        if OpenAI and Config.AI_API:
            try:
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Bothub
                self.client = OpenAI(
                    api_key=Config.AI_API,
                    base_url="https://bothub.chat/api/v2/openai/v1",
                )
                logger.info("‚úÖ AI –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
                logger.info("‚úÖ AI —Å–µ—Ä–≤–∏—Å –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI —Å–µ—Ä–≤–∏—Å–∞: {e}")
                self.client = None
        else:
            if not OpenAI:
                logger.error("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ OpenAI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            if not Config.AI_API:
                logger.error("‚ùå AI_API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            logger.warning("‚ö†Ô∏è AI –∫–ª–∏–µ–Ω—Ç –Ω–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω, –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è fallback –ø—Ä–æ–≥–Ω–æ–∑—ã")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã –∫–∞–∫ None - —Å–æ–∑–¥–∞–¥–∏–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        self._aspect_calculator = None
        self._transit_calculator = None
        self._house_calculator = None

    @property
    def aspect_calculator(self):
        """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –∞—Å–ø–µ–∫—Ç–æ–≤"""
        if self._aspect_calculator is None:
            try:
                from .aspect_calculator import AspectCalculator
                self._aspect_calculator = AspectCalculator()
                logger.info("‚úÖ AspectCalculator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AspectCalculator: {e}")
                self._aspect_calculator = None
        return self._aspect_calculator

    @property
    def transit_calculator(self):
        """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤"""
        if self._transit_calculator is None:
            try:
                from .transit_calculator import TransitCalculator
                self._transit_calculator = TransitCalculator()
                logger.info("‚úÖ TransitCalculator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TransitCalculator: {e}")
                self._transit_calculator = None
        return self._transit_calculator

    @property
    def house_calculator(self):
        """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –¥–æ–º–æ–≤"""
        if self._house_calculator is None:
            try:
                from .house_calculator import HouseCalculator
                self._house_calculator = HouseCalculator()
                logger.info("‚úÖ HouseCalculator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ HouseCalculator: {e}")
                self._house_calculator = None
        return self._house_calculator

    def get_prediction_period(self, prediction_type: str) -> tuple[datetime, datetime]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        now = datetime.utcnow()

        if prediction_type == "—Å–µ–≥–æ–¥–Ω—è":
            # –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è
            valid_from = now.replace(hour=0, minute=0, second=0, microsecond=0)
            valid_until = valid_from + timedelta(days=1) - timedelta(seconds=1)
        elif prediction_type == "–Ω–µ–¥–µ–ª—è":
            # –î–µ–π—Å—Ç–≤—É–µ—Ç –Ω–µ–¥–µ–ª—é —Å —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
            valid_from = now
            valid_until = now + timedelta(days=7)
        elif prediction_type == "–º–µ—Å—è—Ü":
            # –î–µ–π—Å—Ç–≤—É–µ—Ç –º–µ—Å—è—Ü —Å —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
            valid_from = now
            if now.month == 12:
                valid_until = now.replace(year=now.year + 1, month=1)
            else:
                valid_until = now.replace(month=now.month + 1)
        elif prediction_type == "–∫–≤–∞—Ä—Ç–∞–ª":
            # –î–µ–π—Å—Ç–≤—É–µ—Ç 3 –º–µ—Å—è—Ü–∞ —Å —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
            valid_from = now
            month = now.month
            year = now.year
            for _ in range(3):
                if month == 12:
                    month = 1
                    year += 1
                else:
                    month += 1
            valid_until = now.replace(year=year, month=month)
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –¥–µ–Ω—å
            valid_from = now.replace(hour=0, minute=0, second=0, microsecond=0)
            valid_until = valid_from + timedelta(days=1) - timedelta(seconds=1)

        return valid_from, valid_until

    async def generate_prediction(
        self,
        user_planets: Dict[str, PlanetPosition],
        prediction_type: str = "–æ–±—â–∏–π",
        owner_name: str = None,
        birth_dt: datetime = None,
        location: Location = None,
    ) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ AI –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if not Config.AI_ENABLED:
            logger.info("üîß AI –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            return self._generate_fallback_prediction(prediction_type, owner_name, "disabled")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å AI –∫–ª–∏–µ–Ω—Ç–∞
        if not self.client:
            logger.warning("‚ö†Ô∏è AI –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –ø—Ä–æ–≥–Ω–æ–∑—ã")
            return self._generate_fallback_prediction(prediction_type, owner_name, "unavailable")
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞
            valid_from, valid_until = self.get_prediction_period(prediction_type)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            planets_description = self._format_planets_for_ai(user_planets, birth_dt, location)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –¥–ª—è AI
            name_for_ai = owner_name if owner_name and owner_name != "–í–∞—à–∞ –∫–∞—Ä—Ç–∞" else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            
            logger.info(f"ü§ñ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º AI –ø—Ä–æ–≥–Ω–æ–∑ —Ç–∏–ø–∞: {prediction_type} (—Ç–∞–π–º–∞—É—Ç: {Config.AI_REQUEST_TIMEOUT}—Å)")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑ —á–µ—Ä–µ–∑ AI —Å –∂–µ—Å—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
            prediction = await self._generate_ai_prediction(
                prediction_type, name_for_ai, valid_from, valid_until, planets_description
            )
            
            if prediction:
                logger.info("‚úÖ AI –ø—Ä–æ–≥–Ω–æ–∑ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
                return prediction
            else:
                logger.warning("‚ö†Ô∏è AI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –ø—Ä–æ–≥–Ω–æ–∑, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                return self._generate_fallback_prediction(prediction_type, owner_name, "error")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
            return self._generate_fallback_prediction(prediction_type, owner_name, "error")

    def _generate_fallback_prediction(self, prediction_type: str, owner_name: str = None, reason: str = "unavailable") -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –∫–æ–≥–¥–∞ AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞
        valid_from, valid_until = self.get_prediction_period(prediction_type)
        period_display = self._get_period_display(prediction_type, valid_from, valid_until)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if owner_name and owner_name != "–í–∞—à–∞ –∫–∞—Ä—Ç–∞":
            header = f"üîÆ <b>–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {owner_name}</b>\nüìÖ {period_display}\n\n"
        else:
            header = f"üîÆ <b>–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑</b>\nüìÖ {period_display}\n\n"
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
        predictions = {
            "—Å–µ–≥–æ–¥–Ω—è": [
                "‚ú® <b>–°–µ–≥–æ–¥–Ω—è –∑–≤–µ–∑–¥—ã –±–ª–∞–≥–æ—Å–∫–ª–æ–Ω–Ω—ã –∫ –≤–∞–º!</b>\n\n"
                "üåü –£—Ç—Ä–æ–º –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø—Ä–∏–ª–∏–≤ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ –≤—Ä–µ–º—è –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.\n\n"
                "üí´ –ü–æ—Å–ª–µ –æ–±–µ–¥–∞ –≤–æ–∑–º–æ–∂–Ω—ã –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏ –∏–ª–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.\n\n"
                "üåô –í–µ—á–µ—Ä–æ–º —É–¥–µ–ª–∏—Ç–µ –≤—Ä–µ–º—è —Å–µ–±–µ –∏ –±–ª–∏–∑–∫–∏–º - —ç—Ç–æ –ø—Ä–∏–Ω–µ—Å–µ—Ç –≥–∞—Ä–º–æ–Ω–∏—é.",
                
                "üåÖ <b>–î–µ–Ω—å –ø–æ–ª–æ–Ω –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π!</b>\n\n"
                "‚≠ê –ü–µ—Ä–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ –¥–Ω—è –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã—Ö –¥–µ–ª.\n\n"
                "üîÆ –ò–Ω—Ç—É–∏—Ü–∏—è –±—É–¥–µ—Ç –æ—Å–æ–±–µ–Ω–Ω–æ —Å–∏–ª—å–Ω–æ–π - –¥–æ–≤–µ—Ä—å—Ç–µ—Å—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –≥–æ–ª–æ—Å—É.\n\n"
                "üå∫ –ö –≤–µ—á–µ—Ä—É –æ–∂–∏–¥–∞–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö."
            ],
            "–Ω–µ–¥–µ–ª—è": [
                "üóìÔ∏è <b>–ù–µ–¥–µ–ª—è –ø—Ä–∏–Ω–µ—Å–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ —Ä–æ—Å—Ç!</b>\n\n"
                "üìà –ü–µ—Ä–≤—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ - –≤—Ä–µ–º—è –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.\n\n"
                "üíù –°–µ—Ä–µ–¥–∏–Ω–∞ –Ω–µ–¥–µ–ª–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–∞ –¥–ª—è –ª–∏—á–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π.\n\n"
                "üéØ –í—ã—Ö–æ–¥–Ω—ã–µ - –∏–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥—É—â–µ–≥–æ.",
                
                "üåü <b>–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–∞—è –Ω–µ–¥–µ–ª—è –≤–ø–µ—Ä–µ–¥–∏!</b>\n\n"
                "üíº –†–∞–±–æ—á–∏–µ –≤–æ–ø—Ä–æ—Å—ã –±—É–¥—É—Ç —Ä–µ—à–∞—Ç—å—Å—è –ª–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ.\n\n"
                "‚ù§Ô∏è –í –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω–∏ –æ–∂–∏–¥–∞—é—Ç—Å—è –ø—Ä–∏—è—Ç–Ω—ã–µ —Å—é—Ä–ø—Ä–∏–∑—ã.\n\n"
                "üå± –ù–æ–≤—ã–µ –∏–¥–µ–∏ –ø—Ä–∏–Ω–µ—Å—É—Ç –¥–æ–ª–≥–æ–∂–¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."
            ],
            "–º–µ—Å—è—Ü": [
                "üìÖ <b>–ú–µ—Å—è—Ü —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π –∏ —Ä–æ—Å—Ç–∞!</b>\n\n"
                "üöÄ –ü–µ—Ä–≤–∞—è –¥–µ–∫–∞–¥–∞ - –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.\n\n"
                "‚öñÔ∏è –í—Ç–æ—Ä–∞—è –¥–µ–∫–∞–¥–∞ –ø—Ä–∏–Ω–µ—Å–µ—Ç –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ä–∞–±–æ—Ç–æ–π –∏ –æ—Ç–¥—ã—Ö–æ–º.\n\n"
                "üèÜ –¢—Ä–µ—Ç—å—è –¥–µ–∫–∞–¥–∞ - –≤—Ä–µ–º—è —Å–±–æ—Ä–∞ –ø–ª–æ–¥–æ–≤ –≤–∞—à–∏—Ö —É—Å–∏–ª–∏–π.",
                
                "üåü <b>–ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –≤—Å–µ—Ö —Å—Ñ–µ—Ä –∂–∏–∑–Ω–∏!</b>\n\n"
                "üí´ –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —É–∫—Ä–µ–ø–ª—è—Ç—å—Å—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ.\n\n"
                "üë• –û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –æ–∫—Ä—É–∂–∞—é—â–∏–º–∏ –≤—ã–π–¥—É—Ç –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å.\n\n"
                "üé® –¢–≤–æ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—É—á–∞—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ."
            ]
        }
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è —Ç–∏–ø–∞
        import random
        prediction_texts = predictions.get(prediction_type, predictions["—Å–µ–≥–æ–¥–Ω—è"])
        prediction_text = random.choice(prediction_texts)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–Ω–æ—Å–∫—É –æ —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç—ã
        if reason == "timeout":
            footer = "\n\n<i>‚ö° –ü—Ä–æ–≥–Ω–æ–∑ —Å–æ–∑–¥–∞–Ω –≤ —ç–∫—Å–ø—Ä–µ—Å—Å-—Ä–µ–∂–∏–º–µ</i>"
        elif reason == "error":
            footer = "\n\n<i>üîß –ü—Ä–æ–≥–Ω–æ–∑ —Å–æ–∑–¥–∞–Ω –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ</i>"
        elif reason == "disabled":
            footer = "\n\n<i>üõ†Ô∏è AI –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏</i>"
        else:
            footer = "\n\n<i>üåô –ü—Ä–æ–≥–Ω–æ–∑ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –±–∞–∑–æ–≤—ã—Ö –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö</i>"
        
        return header + prediction_text + footer

    def _get_period_display(
        self, prediction_type: str, valid_from: datetime, valid_until: datetime
    ) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        from_str = valid_from.strftime("%d.%m.%Y")
        until_str = valid_until.strftime("%d.%m.%Y")

        if prediction_type == "—Å–µ–≥–æ–¥–Ω—è":
            return f"–ù–∞ {from_str}"
        elif prediction_type == "–Ω–µ–¥–µ–ª—è":
            return f"–ù–∞ –Ω–µ–¥–µ–ª—é: {from_str} - {until_str}"
        elif prediction_type == "–º–µ—Å—è—Ü":
            return f"–ù–∞ –º–µ—Å—è—Ü: {from_str} - {until_str}"
        elif prediction_type == "–∫–≤–∞—Ä—Ç–∞–ª":
            return f"–ù–∞ –∫–≤–∞—Ä—Ç–∞–ª: {from_str} - {until_str}"
        else:
            return f"–ù–∞ –ø–µ—Ä–∏–æ–¥: {from_str} - {until_str}"

    def _create_prediction_prompt(
        self,
        prediction_type: str,
        name_for_ai: str,
        valid_from: datetime,
        valid_until: datetime,
        planets_description: str,
    ) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        from_str = valid_from.strftime("%d.%m.%Y")
        until_str = valid_until.strftime("%d.%m.%Y")

        base_instructions = """
–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
1. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É—á–∏—Ç—ã–≤–∞–π –∞—Å–ø–µ–∫—Ç—ã –º–µ–∂–¥—É –ø–ª–∞–Ω–µ—Ç–∞–º–∏ - –æ–Ω–∏ –∫–ª—é—á–µ–≤—ã–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
2. –ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–º–∞—Ö –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ñ–µ—Ä –∂–∏–∑–Ω–∏
3. –£—á–∏—Ç—ã–≤–∞–π —Ç–µ–∫—É—â–∏–µ —Ç—Ä–∞–Ω–∑–∏—Ç—ã –ø–ª–∞–Ω–µ—Ç
4. –û–±—Ä–∞—â–∞–π –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω—ã–µ –ø–ª–∞–Ω–µ—Ç—ã
5. –ò—Å–ø–æ–ª—å–∑—É–π **—Ç–æ–ª—å–∫–æ** HTML —Ç–µ–≥–∏ `<b>` –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è. –ó–ê–ü–†–ï–©–ï–ù–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ HTML —Ç–µ–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `<h2>`, `<h3>`, `<p>`, `<div>`).
6. –ü—Ä–æ–≥–Ω–æ–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 800-1000 —Å–∏–º–≤–æ–ª–æ–≤
7. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –ø–æ —Å—Ñ–µ—Ä–∞–º —Å —ç–º–æ–¥–∑–∏-–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
8. –ú–∏–Ω–∏–º—É–º –≤–æ–¥—ã, –º–∞–∫—Å–∏–º—É–º –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏
"""

        if prediction_type == "—Å–µ–≥–æ–¥–Ω—è":
            return f"""–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥. –°–æ—Å—Ç–∞–≤—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {name_for_ai} –Ω–∞ –¥–µ–Ω—å {from_str}.

{planets_description}

{base_instructions}

–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:
üåü <b>–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ –¥–Ω—è</b>
üíº <b>–†–∞–±–æ—Ç–∞ –∏ –¥–µ–ª–∞</b>
‚ù§Ô∏è <b>–û—Ç–Ω–æ—à–µ–Ω–∏—è</b>
üí° <b>–°–æ–≤–µ—Ç –¥–Ω—è</b>

–§–æ–∫—É—Å –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–∞—Ö –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ –∞—Å–ø–µ–∫—Ç–∞—Ö –∏ —Ç—Ä–∞–Ω–∑–∏—Ç–∞—Ö. 850-950 —Å–∏–º–≤–æ–ª–æ–≤."""

        elif prediction_type == "–Ω–µ–¥–µ–ª—è":
            return f"""–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥. –°–æ—Å—Ç–∞–≤—å –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {name_for_ai} –Ω–∞ –Ω–µ–¥–µ–ª—é ({from_str} - {until_str}).

{planets_description}

{base_instructions}

–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:
üîÆ <b>–û–±—â–∏–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏</b>
‚≠ê <b>–ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –¥–Ω–∏</b>
‚ö†Ô∏è <b>–ß—Ç–æ –∏–∑–±–µ–≥–∞—Ç—å</b>
üéØ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>

–î–µ–ª–∞–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –Ω–∞—Ç–∞–ª—å–Ω—ã—Ö –ø–ª–∞–Ω–µ—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ —Ç—Ä–∞–Ω–∑–∏—Ç–∞–º–∏. 900-1000 —Å–∏–º–≤–æ–ª–æ–≤."""

        elif prediction_type == "–º–µ—Å—è—Ü":
            return f"""–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥. –°–æ—Å—Ç–∞–≤—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {name_for_ai} –Ω–∞ –º–µ—Å—è—Ü ({from_str} - {until_str}).

{planets_description}

{base_instructions}

–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:
üåç <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏</b>
üí∞ <b>–ö–∞—Ä—å–µ—Ä–∞ –∏ —Ñ–∏–Ω–∞–Ω—Å—ã</b>
üíï <b>–õ–∏—á–Ω–∞—è –∂–∏–∑–Ω—å</b>
üìÖ <b>–ö–ª—é—á–µ–≤—ã–µ –ø–µ—Ä–∏–æ–¥—ã</b>

–§–æ–∫—É—Å –Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏—è—Ö –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∏—Ç–∞—Ö. 950-1000 —Å–∏–º–≤–æ–ª–æ–≤."""

        elif prediction_type == "–∫–≤–∞—Ä—Ç–∞–ª":
            return f"""–¢—ã –º–∞—Å—Ç–µ—Ä-–∞—Å—Ç—Ä–æ–ª–æ–≥. –°–æ—Å—Ç–∞–≤—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {name_for_ai} –Ω–∞ –∫–≤–∞—Ä—Ç–∞–ª ({from_str} - {until_str}).

{planets_description}

{base_instructions}

–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:
üöÄ <b>–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏</b>
üéØ <b>–ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</b>
üõ°Ô∏è <b>–í—ã–∑–æ–≤—ã –∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è</b>
üìã <b>–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω</b>

–°–æ–∑–¥–∞–π –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ —Å–ª–æ–∂–Ω—ã—Ö –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è—Ö. 950-1000 —Å–∏–º–≤–æ–ª–æ–≤."""

        else:
            return f"""–¢—ã –∞—Å—Ç—Ä–æ–ª–æ–≥. –°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è {name_for_ai}.

{planets_description}

–£—á–∏—Ç—ã–≤–∞–π –∞—Å–ø–µ–∫—Ç—ã, –¥–æ–º–∞, —Ç—Ä–∞–Ω–∑–∏—Ç—ã. 800-900 —Å–∏–º–≤–æ–ª–æ–≤, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ, –ø—Ä–∞–∫—Ç–∏—á–Ω–æ."""

    def _format_planets_for_ai(
        self,
        planets: Dict[str, PlanetPosition],
        birth_dt: datetime = None,
        location: Location = None,
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ò–ò —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        description_parts = []

        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–ª–∞–Ω–µ—Ç
        description_parts.append("–ù–ê–¢–ê–õ–¨–ù–ê–Ø –ö–ê–†–¢–ê:")
        for planet_name, position in planets.items():
            degree_formatted = f"{position.degree:.1f}¬∞"
            description_parts.append(
                f"‚Ä¢ {planet_name} –≤ {position.sign} ({degree_formatted})"
            )

        # –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ê–ï–ú —Å–ª–æ–∂–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
        # –≠—Ç–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –∑–∞–≤–∏—Å–∞–Ω–∏–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        logger.info("‚ö†Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã")

        return "\n".join(description_parts)

    async def _generate_ai_prediction(
        self,
        prediction_type: str,
        name_for_ai: str,
        valid_from: datetime,
        valid_until: datetime,
        planets_description: str,
    ) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ —á–µ—Ä–µ–∑ AI API —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ retry –ª–æ–≥–∏–∫–æ–π"""
        
        import asyncio
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
        prompt = self._create_prediction_prompt(
            prediction_type, name_for_ai, valid_from, valid_until, planets_description
        )
        
        for attempt in range(Config.AI_MAX_RETRIES):
            try:
                logger.info(f"ü§ñ AI –∑–∞–ø—Ä–æ—Å –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{Config.AI_MAX_RETRIES}")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                response = await asyncio.wait_for(
                    self._make_ai_request(prompt),
                    timeout=Config.AI_REQUEST_TIMEOUT
                )
                
                if response and response.strip():
                    # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö HTML —Ç–µ–≥–æ–≤
                    clean_response = sanitize_html(response.strip())
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞
                    period_display = self._get_period_display(prediction_type, valid_from, valid_until)
                    
                    if name_for_ai and name_for_ai != "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
                        header = f"üîÆ <b>–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {name_for_ai}</b>\nüìÖ {period_display}\n\n"
                    else:
                        header = f"üîÆ <b>–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑</b>\nüìÖ {period_display}\n\n"
                    
                    footer = "\n\n<i>‚ú® –°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ò–ò</i>"
                    
                    return header + clean_response + footer
                    
            except asyncio.TimeoutError:
                logger.warning(f"‚è∞ AI –∑–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—Å–∏–ª —Ç–∞–π–º–∞—É—Ç {Config.AI_REQUEST_TIMEOUT}—Å (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                if attempt == Config.AI_MAX_RETRIES - 1:
                    logger.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ AI –∑–∞–ø—Ä–æ—Å–∞ –∏—Å—Ç–µ–∫–ª–∏ –ø–æ —Ç–∞–π–º–∞—É—Ç—É")
                    return None
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                if attempt == Config.AI_MAX_RETRIES - 1:
                    logger.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ AI –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –æ—à–∏–±–∫–∞–º–∏")
                    return None
                    
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            if attempt < Config.AI_MAX_RETRIES - 1:
                await asyncio.sleep(1)
        
        return None

    async def _make_ai_request(self, prompt: str) -> Optional[str]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ AI API —á–µ—Ä–µ–∑ executor"""
        
        import asyncio
        import concurrent.futures
        
        def sync_request():
            """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ AI"""
            try:
                logger.info(f"üîó –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI API...")
                
                response = self.client.chat.completions.create(
                    model="gpt-4o-mini",
                    messages=[{"role": "user", "content": prompt}],
                    temperature=0.7,
                    max_tokens=800,
                    timeout=25  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ (30—Å - 5—Å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É)
                )
                
                if response.choices:
                    content = response.choices[0].message.content
                    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI ({len(content) if content else 0} —Å–∏–º–≤–æ–ª–æ–≤)")
                    return content
                else:
                    logger.warning("‚ö†Ô∏è AI –æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç choices")
                    return None
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ AI –∑–∞–ø—Ä–æ—Å–∞: {e}")
                return None
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            loop = asyncio.get_event_loop()
            result = await loop.run_in_executor(None, sync_request)
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ AI –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None

    async def generate_compatibility_report(
        self,
        user_planets: Dict[str, PlanetPosition],
        partner_planets: Dict[str, PlanetPosition],
        sphere: str,
        user_name: str,
        partner_name: str,
    ) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é AI"""

        sphere_map = {
            "love": "–ª—é–±–æ–≤–Ω—ã—Ö –∏ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π",
            "career": "–¥–µ–ª–æ–≤—ã—Ö –∏ —Ä–∞–±–æ—á–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π",
            "friendship": "–¥—Ä—É–∂–±—ã",
        }
        sphere_text = sphere_map.get(sphere, "–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è")

        if not self.client:
            return "‚ùå –°–µ—Ä–≤–∏—Å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."

        try:
            prompt = self._get_compatibility_prompt(
                user_planets, partner_planets, sphere_text, user_name, partner_name
            )

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è AI –∑–∞–ø—Ä–æ—Å–∞
            response = await self._make_ai_request(prompt)

            if response and response.strip():
                return sanitize_html(response.strip())
            else:
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏."

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}")
            return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏."

    def _get_compatibility_prompt(
        self, user_planets, partner_planets, sphere_text, user_name, partner_name
    ) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        user_planets_str = self._format_planets_simple(user_planets)
        partner_planets_str = self._format_planets_simple(partner_planets)

        return f"""–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –º–µ–∂–¥—É {user_name} –∏ {partner_name} –≤ —Å—Ñ–µ—Ä–µ {sphere_text}.

–ù–ê–¢–ê–õ–¨–ù–ê–Ø –ö–ê–†–¢–ê {user_name.upper()}:
{user_planets_str}

–ù–ê–¢–ê–õ–¨–ù–ê–Ø –ö–ê–†–¢–ê {partner_name.upper()}:
{partner_planets_str}

–°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (900-1000 —Å–∏–º–≤–æ–ª–æ–≤), –∏—Å–ø–æ–ª—å–∑—É—è –¢–û–õ–¨–ö–û HTML —Ç–µ–≥–∏ <b> –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è.

–°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê:

üåü <b>–û–±—â–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å</b>
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Å–Ω–æ–≤–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –º–µ–∂–¥—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏. –ö–∞–∫ –∏—Ö –°–æ–ª–Ω—Ü–∞, –õ—É–Ω—ã –∏ –¥—Ä—É–≥–∏–µ –ø–ª–∞–Ω–µ—Ç—ã –≤–ª–∏—è—é—Ç –Ω–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏—è.

üí´ <b>–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã</b>
–û–ø–∏—à–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –∏ –ø–ª–∞–Ω–µ—Ç–∞—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞—é—Ç –≥–∞—Ä–º–æ–Ω–∏—é –∏ –≤–∑–∞–∏–º–æ–ø–æ–Ω–∏–º–∞–Ω–∏–µ –º–µ–∂–¥—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏.

‚ö†Ô∏è <b>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏</b>
–£–∫–∞–∂–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –∏ —Ä–∞–∑–ª–∏—á–∏—è –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ.

üíº <b>–í —Ä–∞–±–æ—Ç–µ –∏ –¥–µ–ª–∞—Ö</b>
–ö–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—Ç –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ñ–µ—Ä–µ, —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö –∏ –¥–µ–ª–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö.

‚ù§Ô∏è <b>–í –ª–∏—á–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö</b>
–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å, —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞, —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã.

ü§ù <b>–í –¥—Ä—É–∂–±–µ –∏ –æ–±—â–µ–Ω–∏–∏</b>
–ö–∞–∫ –ª–µ–≥–∫–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º –æ–±—â–∞—Ç—å—Å—è, –Ω–∞—Ö–æ–¥–∏—Ç—å –æ–±—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã, –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è –≤–º–µ—Å—Ç–µ.

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>
–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.

–í–ê–ñ–ù–û:
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —á–∏—Å–ª–µ–Ω–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ (—Ç–∏–ø–∞ "7 –∏–∑ 10")
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (**, *, ```)
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –±–ª–æ–∫–∏ –∫–æ–¥–∞ –∏–ª–∏ —Ç—Ä–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
- –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û HTML —Ç–µ–≥–∏ <b> –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
- –û—Å–Ω–æ–≤—ã–≤–∞–π—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö
- –ü–∏—à–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏ –ø–æ –¥–µ–ª—É
- –ö–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª 2-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""

    def _format_planets_simple(self, planets: Dict[str, PlanetPosition]) -> str:
        """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç –¥–ª—è AI –∑–∞–ø—Ä–æ—Å–æ–≤"""
        result = []
        for planet, position in planets.items():
            result.append(f"{planet}: {position.sign} {position.degree:.0f}¬∞")
        return ", ".join(result) 