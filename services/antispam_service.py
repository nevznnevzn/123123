import logging
from dataclasses import dataclass
from datetime import datetime, timedelta
from typing import Dict, Optional

logger = logging.getLogger(__name__)


@dataclass
class UserLimits:
    """–õ–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    daily_questions: int
    cooldown_minutes: int
    is_premium: bool = False


@dataclass
class UserStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""

    questions_today: int = 0
    last_question_time: Optional[datetime] = None
    daily_reset_date: Optional[datetime] = None


class AntiSpamService:
    """–°–µ—Ä–≤–∏—Å –∞–Ω—Ç–∏—Å–ø–∞–º–∞ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è AI-–∑–∞–ø—Ä–æ—Å–æ–≤"""

    # –õ–∏–º–∏—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    FREE_LIMITS = UserLimits(daily_questions=3, cooldown_minutes=3, is_premium=False)

    PREMIUM_LIMITS = UserLimits(
        daily_questions=999,  # –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤
        cooldown_minutes=1,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫—É–ª–¥–∞—É–Ω
        is_premium=True,
    )

    def __init__(self):
        # –í –ø–∞–º—è—Ç–∏ —Ö—Ä–∞–Ω–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –≤ Redis –∏–ª–∏ –ë–î)
        self._user_stats: Dict[int, UserStats] = {}

    def get_user_limits(self, user_id: int, is_premium: bool = False) -> UserLimits:
        """–ü–æ–ª—É—á–∞–µ—Ç –ª–∏–º–∏—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.PREMIUM_LIMITS if is_premium else self.FREE_LIMITS

    def get_user_stats(self, user_id: int) -> UserStats:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self._user_stats:
            self._user_stats[user_id] = UserStats()

        stats = self._user_stats[user_id]

        # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –≤ –Ω–æ–≤—ã–π –¥–µ–Ω—å
        now = datetime.now()
        if (
            stats.daily_reset_date is None
            or stats.daily_reset_date.date() != now.date()
        ):
            stats.questions_today = 0
            stats.daily_reset_date = now

        return stats

    def check_limits(self, user_id: int, is_premium: bool = False) -> Dict[str, any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            {
                "allowed": bool,
                "reason": str,
                "wait_time": Optional[timedelta],
                "questions_left": int
            }
        """
        limits = self.get_user_limits(user_id, is_premium)
        stats = self.get_user_stats(user_id)
        now = datetime.now()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
        if stats.questions_today >= limits.daily_questions:
            return {
                "allowed": False,
                "reason": "daily_limit",
                "wait_time": None,
                "questions_left": 0,
                "limit_type": "–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω",
            }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
        if stats.last_question_time:
            time_since_last = now - stats.last_question_time
            cooldown_required = timedelta(minutes=limits.cooldown_minutes)

            if time_since_last < cooldown_required:
                wait_time = cooldown_required - time_since_last
                return {
                    "allowed": False,
                    "reason": "cooldown",
                    "wait_time": wait_time,
                    "questions_left": limits.daily_questions - stats.questions_today,
                    "limit_type": "–ö—É–ª–¥–∞—É–Ω –∞–∫—Ç–∏–≤–µ–Ω",
                }

        # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
        questions_left = limits.daily_questions - stats.questions_today
        return {
            "allowed": True,
            "reason": "ok",
            "wait_time": None,
            "questions_left": questions_left
            - 1,  # -1 –ø–æ—Ç–æ–º—É —á—Ç–æ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω
            "limit_type": None,
        }

    def record_question(self, user_id: int):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∞–∫—Ç –∑–∞–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞"""
        stats = self.get_user_stats(user_id)
        stats.questions_today += 1
        stats.last_question_time = datetime.now()

        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å. –í—Å–µ–≥–æ —Å–µ–≥–æ–¥–Ω—è: {stats.questions_today}"
        )

    def get_stats_text(self, user_id: int, is_premium: bool = False) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        limits = self.get_user_limits(user_id, is_premium)
        stats = self.get_user_stats(user_id)

        if is_premium:
            return "üíé <b>Premium —Å—Ç–∞—Ç—É—Å</b> - –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!"

        questions_left = limits.daily_questions - stats.questions_today

        text = f"üìä <b>–í–∞—à–∏ –ª–∏–º–∏—Ç—ã:</b>\n"
        text += (
            f"‚Ä¢ –í–æ–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {stats.questions_today}/{limits.daily_questions}\n"
        )
        text += f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –≤–æ–ø—Ä–æ—Å–æ–≤: {questions_left}\n"
        text += f"‚Ä¢ –ö—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏: {limits.cooldown_minutes} –º–∏–Ω\n\n"

        if questions_left <= 1:
            text += "üí° <b>–°–æ–≤–µ—Ç:</b> –ü–æ–ª—É—á–∏—Ç–µ Premium –¥–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!"

        return text

    def format_wait_time(self, wait_time: timedelta) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        total_seconds = int(wait_time.total_seconds())
        minutes = total_seconds // 60
        seconds = total_seconds % 60

        if minutes > 0:
            return f"{minutes} –º–∏–Ω {seconds} —Å–µ–∫"
        else:
            return f"{seconds} —Å–µ–∫"

    def reset_user_stats(self, user_id: int):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∞–¥–º–∏–Ω–∞)"""
        if user_id in self._user_stats:
            del self._user_stats[user_id]
        logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–±—Ä–æ—à–µ–Ω–∞")
