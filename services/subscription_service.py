import logging
from datetime import datetime, timedelta
from typing import Any, Dict, List, Optional

from database import SubscriptionStatus, SubscriptionType
from database_async import async_db_manager
from models import PlanetPosition

logger = logging.getLogger(__name__)


class SubscriptionService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"""

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
    SUBSCRIPTION_PRICES = {
        "monthly": {
            "price": 499,
            "currency": "RUB",
            "duration_days": 30,
            "description": "–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
        }
    }

    # –õ–∏–º–∏—Ç—ã –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    FREE_USER_LIMITS = {
        "natal_charts": 3,  # –¢—Ä–∏ –Ω–∞—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã
        "daily_questions": 5,  # 5 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å (–≤—Å–µ–≥–æ)
        "planets_shown": ["–°–æ–ª–Ω—Ü–µ", "–õ—É–Ω–∞", "–ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç"],  # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–ª–∞–Ω–µ—Ç—ã + –ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç
    }

    def __init__(self):
        pass

    async def get_user_subscription_status(self, telegram_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é FREE)
            subscription = await async_db_manager.get_or_create_subscription(telegram_id)

            subscription_info = await async_db_manager.get_subscription_info(telegram_id)
            if not subscription_info:
                # –ï—Å–ª–∏ –ø–æ—á–µ–º—É-—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é
                subscription_info = {
                    "type": "free",
                    "status": "active",
                    "is_active": True,
                    "is_premium": False,
                    "days_remaining": None,
                }

            return subscription_info

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {telegram_id}: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            return {
                "type": "free",
                "status": "active",
                "is_active": True,
                "is_premium": False,
                "days_remaining": None,
            }

    async def is_user_premium(self, telegram_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–º–∏—É–º"""
        status = await self.get_user_subscription_status(telegram_id)
        return status.get("is_premium", False)

    async def filter_planets_for_user(
        self, planets: Dict[str, PlanetPosition], telegram_id: int
    ) -> Dict[str, PlanetPosition]:
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç –ø–ª–∞–Ω–µ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
        if await self.is_user_premium(telegram_id):
            # –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥—è—Ç –≤—Å–µ –ø–ª–∞–Ω–µ—Ç—ã
            return planets

        # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–ª–∞–Ω–µ—Ç—ã
        filtered_planets = {}
        allowed_planets = self.FREE_USER_LIMITS["planets_shown"]

        for planet_name, position in planets.items():
            if planet_name in allowed_planets:
                filtered_planets[planet_name] = position

        return filtered_planets

    async def can_create_natal_chart(self, telegram_id: int) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É"""
        if await self.is_user_premium(telegram_id):
            return True, ""

        # –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç
        user_charts = await async_db_manager.get_user_charts(telegram_id)
        max_charts = self.FREE_USER_LIMITS["natal_charts"]

        if len(user_charts) >= max_charts:
            return (
                False,
                f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ {max_charts} –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ä—Ç.",
            )

        return True, ""

    def get_subscription_offer_text(self, telegram_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
        monthly = self.SUBSCRIPTION_PRICES["monthly"]

        text = f"""
üíé <b>Premium –ø–æ–¥–ø–∏—Å–∫–∞ SolarBalance</b> ‚ú®

üåü <b>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</b>
‚Ä¢ ü™ê <b>–ü–æ–ª–Ω–∞—è –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞</b> - –≤—Å–µ –ø–ª–∞–Ω–µ—Ç—ã –∏ –∞—Å–ø–µ–∫—Ç—ã
‚Ä¢ üîÆ <b>–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b> –ó–≤—ë–∑–¥–Ω–æ–º—É —Å–æ–≤–µ—Ç—É
‚Ä¢ üåô <b>–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∏—Ç—ã</b> –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã
‚Ä¢ üìä <b>–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –Ω–∞—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã</b>
‚Ä¢ üèÜ <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞</b> –∑–∞–ø—Ä–æ—Å–æ–≤
‚Ä¢ üéØ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>

üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {monthly['price']} {monthly['currency']} –≤ –º–µ—Å—è—Ü

üéÅ <b>–°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω–æ:</b>
‚Ä¢ 1 –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ (—Ç–æ–ª—å–∫–æ –°–æ–ª–Ω—Ü–µ, –õ—É–Ω–∞, –ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç)
‚Ä¢ 5 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å

üöÄ –ì–æ—Ç–æ–≤—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏?
"""
        return text.strip()

    async def create_premium_subscription(
        self, telegram_id: int, payment_id: str = None
    ) -> bool:
        """–°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            monthly = self.SUBSCRIPTION_PRICES["monthly"]
            subscription = await async_db_manager.create_premium_subscription(
                telegram_id=telegram_id,
                duration_days=monthly["duration_days"],
                payment_id=payment_id,
                payment_amount=monthly["price"],
            )

            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {telegram_id}: {e}")
            return False

    async def cancel_subscription(self, telegram_id: int) -> bool:
        """–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            result = await async_db_manager.cancel_premium_subscription(telegram_id)
            if result:
                logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
            return result

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {telegram_id}: {e}")
            return False

    async def get_subscription_status_text(self, telegram_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
        status = await self.get_user_subscription_status(telegram_id)

        if status["is_premium"]:
            days_remaining = status.get("days_remaining")
            if days_remaining is not None:
                return f"üíé <b>Premium –∞–∫—Ç–∏–≤–Ω–∞</b>\n‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_remaining}"
            else:
                return "üíé <b>Premium –∞–∫—Ç–∏–≤–Ω–∞</b>\n‚ôæÔ∏è –ë–µ—Å—Å—Ä–æ—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞"
        else:
            return (
                "üÜì <b>–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è</b>\nüíé –û—Ñ–æ—Ä–º–∏—Ç–µ Premium –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"
            )

    async def expire_subscriptions(self) -> int:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ—Ç–º–µ—Ç–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
        return await async_db_manager.check_and_expire_subscriptions()

    async def get_admin_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            stats = await async_db_manager.get_subscription_stats()
            return {
                "total_users": stats["total_users"],
                "free_users": stats["total_free"],
                "premium_users": stats["total_premium"],
                "active_premium": stats["active_premium"],
                "conversion_rate": round(
                    (stats["active_premium"] / max(stats["total_users"], 1)) * 100, 2
                ),
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
            return {
                "total_users": 0,
                "free_users": 0,
                "premium_users": 0,
                "active_premium": 0,
                "conversion_rate": 0.0,
            }
