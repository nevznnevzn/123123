import logging
from typing import Optional

from aiogram import Bot
from aiogram.exceptions import TelegramAPIError

from database import DatabaseManager, User, db_manager
from services.ai_predictions import AIPredictionService
from services.subscription_service import SubscriptionService

logger = logging.getLogger(__name__)


class MotivationService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    """

    def __init__(self, ai_service: AIPredictionService):
        self.ai_service = ai_service
        self.subscription_service = SubscriptionService()

    async def generate_motivation(
        self, user: User, is_subscribed: bool = None
    ) -> Optional[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        :param user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        :param is_subscribed: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –µ—Å–ª–∏ None).
        :return: –¢–µ–∫—Å—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
        """
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
        if is_subscribed is None:
            is_subscribed = self.subscription_service.is_user_premium(user.telegram_id)

        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_charts = db_manager.get_user_charts(user.telegram_id)
            if not user_charts:
                logger.warning(
                    f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id} –Ω–µ—Ç –Ω–∞—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏."
                )
                return await self._generate_generic_motivation(user.name, is_subscribed)

            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é (–æ—Å–Ω–æ–≤–Ω—É—é) –∫–∞—Ä—Ç—É
            natal_chart = user_charts[0]
            planets_data = natal_chart.get_planets_data()

            if not planets_data:
                logger.warning(
                    f"–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–ª–∞–Ω–µ—Ç–∞—Ö."
                )
                return await self._generate_generic_motivation(user.name, is_subscribed)

            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–ª–∞–Ω–µ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
            filtered_planets = self.subscription_service.filter_planets_for_user(
                planets_data, user.telegram_id
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
            prompt = self._create_astro_prompt(
                user_name=user.name,
                planets=filtered_planets,
                birth_date=natal_chart.birth_date,
                is_subscribed=is_subscribed,
            )

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏—é —á–µ—Ä–µ–∑ AI
            motivation_text = await self.ai_service.get_chat_completion(
                prompt=prompt, messages_history=[]
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑—ã–≤ –∫ –ø–æ–¥–ø–∏—Å–∫–µ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if not is_subscribed:
                motivation_text += "\n\n‚ú® *–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –ø–ª–∞–Ω–µ—Ç? –û—Ñ–æ—Ä–º–∏—Ç–µ Premium –ø–æ–¥–ø–∏—Å–∫—É!*"

            return motivation_text

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è {user.telegram_id}: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â—É—é –º–æ—Ç–∏–≤–∞—Ü–∏—é
            return await self._generate_generic_motivation(user.name, is_subscribed)

    async def _generate_generic_motivation(
        self, user_name: str, is_subscribed: bool
    ) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—â—É—é –º–æ—Ç–∏–≤–∞—Ü–∏—é –±–µ–∑ —É—á–µ—Ç–∞ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã"""
        try:
            if is_subscribed:
                prompt = f"–°–æ–∑–¥–∞–π –ø–æ–ª–Ω—É—é, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â—É—é –º–æ—Ç–∏–≤–∞—Ü–∏—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}. –°–¥–µ–ª–∞–π –µ—ë –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π."
            else:
                prompt = f"–°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫—É—é, –º–æ—Ç–∏–≤–∏—Ä—É—é—â—É—é —Ü–∏—Ç–∞—Ç—É –Ω–∞ –¥–µ–Ω—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}. –ú–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."

            motivation_text = await self.ai_service.get_chat_completion(
                prompt=prompt, messages_history=[]
            )

            if not is_subscribed:
                motivation_text += "\n\n‚ú® *–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã? –û—Ñ–æ—Ä–º–∏—Ç–µ Premium –ø–æ–¥–ø–∏—Å–∫—É!*"

            return motivation_text

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—â–µ–π –º–æ—Ç–∏–≤–∞—Ü–∏–∏: {e}")
            return None

    def _create_astro_prompt(
        self, user_name: str, planets: dict, birth_date, is_subscribed: bool
    ) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç
        planets_description = []
        for planet_name, position in planets.items():
            planets_description.append(
                f"{planet_name} –≤ {position.sign} {position.degree:.1f}¬∞"
            )

        planets_text = ", ".join(planets_description)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏–Ω—É –∏ –¥–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞
        if is_subscribed:
            detail_level = "–¥–µ—Ç–∞–ª—å–Ω—É—é –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –º–æ—Ç–∏–≤–∞—Ü–∏—é —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–∏—Ö —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤ –∏ –∞—Å–ø–µ–∫—Ç–æ–≤"
            length = "3-4 –∞–±–∑–∞—Ü–∞"
        else:
            detail_level = "–∫—Ä–∞—Ç–∫—É—é –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –º–æ—Ç–∏–≤–∞—Ü–∏—é"
            length = "2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"

        prompt = f"""
–°–æ–∑–¥–∞–π {detail_level} –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}.

–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞:
{planets_text}

–£—á—Ç–∏ –≤–ª–∏—è–Ω–∏–µ —ç—Ç–∏—Ö –ø–ª–∞–Ω–µ—Ç–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —á–µ–ª–æ–≤–µ–∫–∞. 
–°–æ–∑–¥–∞–π –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–æ–π {length}, –∫–æ—Ç–æ—Ä–æ–µ:
1. –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ—Ç —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞–Ω–µ—Ç–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
2. –î–∞–µ—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –Ω–∞ –¥–µ–Ω—å
3. –ú–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –∫ –¥–µ–π—Å—Ç–≤–∏—é

–ü–∏—à–∏ —Ç–µ–ø–ª–æ, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ. –ù–∞—á–Ω–∏ —Å –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∏–º–µ–Ω–∏.
"""
        return prompt.strip()

    def _create_prompt(self, natal_chart, is_subscribed: bool) -> str:
        """
        –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ - –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
        –ò—Å–ø–æ–ª—å–∑—É–π _create_astro_prompt –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ.
        """
        logger.warning("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ _create_prompt")
        return "–û–±—â–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è –Ω–∞ –¥–µ–Ω—å."


async def send_daily_motivation(bot: Bot, db_manager: DatabaseManager):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–π...")

    ai_service = AIPredictionService()
    motivation_service = MotivationService(ai_service=ai_service)

    users_for_mailing = db_manager.get_users_for_mailing()

    sent_count = 0
    failed_count = 0

    for user in users_for_mailing:
        try:
            is_premium = user.is_premium
            motivation_text = await motivation_service.generate_motivation(
                user, is_subscribed=is_premium
            )

            if motivation_text:
                await bot.send_message(user.telegram_id, motivation_text)
                sent_count += 1
                logger.info(f"‚úÖ –ú–æ—Ç–∏–≤–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
            else:
                logger.warning(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}"
                )
                failed_count += 1

        except TelegramAPIError as e:
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}"
            )
            failed_count += 1
        except Exception as e:
            logger.error(
                f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}: {e}"
            )
            failed_count += 1

    logger.info(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}, –û—à–∏–±–æ–∫: {failed_count}"
    )


# –ü—Ä–∏–º–µ—Ä —Ç–æ–≥–æ, –∫–∞–∫ —ç—Ç–æ –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ main.py
# ai_prediction_service = AIPredictionService()
# motivation_service = MotivationService(ai_service=ai_prediction_service)
