"""
–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É
"""
import asyncio
import time
import logging
from datetime import datetime
from database import DatabaseManager
from database_async import AsyncDatabaseManager

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏
logging.basicConfig(level=logging.ERROR)

async def test_async_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ë–î"""
    print("üöÄ –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ê–°–ò–ù–•–†–û–ù–ù–û–ô –ë–î")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –ë–î
    async_db = AsyncDatabaseManager("sqlite+aiosqlite:///test_async.db")
    await async_db.init_db()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –ë–î –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    sync_db = DatabaseManager("sqlite:///test_sync.db")
    
    results = []
    
    # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    print("\nüë• –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    start_time = time.time()
    tasks = []
    for i in range(10):
        task = async_db.get_or_create_user(telegram_id=1000 + i, name=f"User{i}")
        tasks.append(task)
    
    await asyncio.gather(*tasks)
    async_time = time.time() - start_time
    print(f"‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ: {async_time:.3f}—Å")
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    start_time = time.time()
    for i in range(10):
        sync_db.get_or_create_user(telegram_id=2000 + i, name=f"User{i}")
    sync_time = time.time() - start_time
    print(f"‚è±Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ: {sync_time:.3f}—Å")
    
    improvement = ((sync_time - async_time) / sync_time) * 100
    print(f"üìà –£–ª—É—á—à–µ–Ω–∏–µ: {improvement:.1f}%")
    results.append(("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", async_time, sync_time, improvement))
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    print("\nüìã –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π...")
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    start_time = time.time()
    tasks = []
    for i in range(10):
        task = async_db.get_user_profile(1000 + i)
        tasks.append(task)
    
    await asyncio.gather(*tasks)
    async_time = time.time() - start_time
    print(f"‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ: {async_time:.3f}—Å")
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    start_time = time.time()
    for i in range(10):
        sync_db.get_user_profile(2000 + i)
    sync_time = time.time() - start_time
    print(f"‚è±Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ: {sync_time:.3f}—Å")
    
    improvement = ((sync_time - async_time) / sync_time) * 100
    print(f"üìà –£–ª—É—á—à–µ–Ω–∏–µ: {improvement:.1f}%")
    results.append(("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π", async_time, sync_time, improvement))
    
    # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç
    print("\n‚≠ê –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç...")
    
    test_planets = {
        "–°–æ–ª–Ω—Ü–µ": {"sign": "–õ–µ–≤", "degree": 15.0},
        "–õ—É–Ω–∞": {"sign": "–†–∞–∫", "degree": 8.0},
        "–ú–µ—Ä–∫—É—Ä–∏–π": {"sign": "–õ–µ–≤", "degree": 12.0},
    }
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    start_time = time.time()
    tasks = []
    for i in range(5):
        task = async_db.create_natal_chart(
            telegram_id=1000 + i,
            name=f"User{i}",
            city="–ú–æ—Å–∫–≤–∞",
            latitude=55.7558,
            longitude=37.6176,
            timezone="Europe/Moscow",
            birth_date=datetime(1990, 7, 15, 12, 0),
            birth_time_specified=True,
            has_warning=False,
            planets_data=test_planets
        )
        tasks.append(task)
    
    await asyncio.gather(*tasks)
    async_time = time.time() - start_time
    print(f"‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ: {async_time:.3f}—Å")
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    start_time = time.time()
    for i in range(5):
        sync_db.create_natal_chart(
            telegram_id=2000 + i,
            name=f"User{i}",
            city="–ú–æ—Å–∫–≤–∞",
            latitude=55.7558,
            longitude=37.6176,
            timezone="Europe/Moscow",
            birth_date=datetime(1990, 7, 15, 12, 0),
            birth_time_specified=True,
            has_warning=False,
            planets_data=test_planets
        )
    sync_time = time.time() - start_time
    print(f"‚è±Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ: {sync_time:.3f}—Å")
    
    improvement = ((sync_time - async_time) / sync_time) * 100
    print(f"üìà –£–ª—É—á—à–µ–Ω–∏–µ: {improvement:.1f}%")
    results.append(("–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç", async_time, sync_time, improvement))
    
    # –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    print("\nüìä –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    start_time = time.time()
    stats = await async_db.get_app_statistics()
    async_time = time.time() - start_time
    print(f"‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ: {async_time:.3f}—Å")
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    start_time = time.time()
    stats = sync_db.get_app_statistics()
    sync_time = time.time() - start_time
    print(f"‚è±Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ: {sync_time:.3f}—Å")
    
    improvement = ((sync_time - async_time) / sync_time) * 100
    print(f"üìà –£–ª—É—á—à–µ–Ω–∏–µ: {improvement:.1f}%")
    results.append(("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", async_time, sync_time, improvement))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\nüìà –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 50)
    
    total_async = sum(r[1] for r in results)
    total_sync = sum(r[2] for r in results)
    avg_improvement = sum(r[3] for r in results) / len(results)
    
    print(f"{'–û–ø–µ—Ä–∞—Ü–∏—è':<20} {'–ê—Å–∏–Ω—Ö—Ä':<8} {'–°–∏–Ω—Ö—Ä':<8} {'–£–ª—É—á—à–µ–Ω–∏–µ':<10}")
    print("-" * 50)
    
    for operation, async_time, sync_time, improvement in results:
        print(f"{operation:<20} {async_time:<8.3f} {sync_time:<8.3f} {improvement:<10.1f}%")
    
    print("-" * 50)
    print(f"{'–ò–¢–û–ì–û':<20} {total_async:<8.3f} {total_sync:<8.3f} {avg_improvement:<10.1f}%")
    
    print(f"\nüéØ –í–´–í–û–î:")
    if avg_improvement > 0:
        print(f"‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ –Ω–∞ {avg_improvement:.1f}%")
        print("‚úÖ Event loop –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è")
        print("‚úÖ –ë–æ—Ç –±—É–¥–µ—Ç –±–æ–ª–µ–µ –æ—Ç–∑—ã–≤—á–∏–≤—ã–º")
    else:
        print("‚ö†Ô∏è –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ë–î –Ω–µ –ø–æ–∫–∞–∑–∞–ª–∞ —É–ª—É—á—à–µ–Ω–∏–π")
        print("‚ÑπÔ∏è –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å –Ω–µ–±–æ–ª—å—à–∏–º –æ–±—ä–µ–º–æ–º –¥–∞–Ω–Ω—ã—Ö")
    
    # –û—á–∏—Å—Ç–∫–∞
    await async_db.close()
    
    return avg_improvement > 0

async def test_concurrent_operations():
    """–¢–µ—Å—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    print("\nüîÑ –¢–ï–°–¢ –ö–û–ù–ö–£–†–ï–ù–¢–ù–´–• –û–ü–ï–†–ê–¶–ò–ô")
    print("=" * 40)
    
    async_db = AsyncDatabaseManager("sqlite+aiosqlite:///test_concurrent.db")
    await async_db.init_db()
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for i in range(5):
        await async_db.get_or_create_user(telegram_id=3000 + i, name=f"ConcurrentUser{i}")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    start_time = time.time()
    
    tasks = []
    for i in range(10):
        # –°–º–µ—à–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        if i % 3 == 0:
            task = async_db.get_user_profile(3000 + (i % 5))
        elif i % 3 == 1:
            task = async_db.get_user_charts(3000 + (i % 5))
        else:
            task = async_db.get_or_create_subscription(3000 + (i % 5))
        tasks.append(task)
    
    results = await asyncio.gather(*tasks, return_exceptions=True)
    
    total_time = time.time() - start_time
    success_count = sum(1 for r in results if not isinstance(r, Exception))
    
    print(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ {success_count}/10 –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ {total_time:.3f}—Å")
    print(f"üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—é: {total_time/10:.3f}—Å")
    
    if success_count == 10:
        print("üéâ –í—Å–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"‚ö†Ô∏è {10 - success_count} –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
    
    await async_db.close()
    return success_count == 10

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –ê–°–ò–ù–•–†–û–ù–ù–û–ô –ë–î")
    print("=" * 60)
    
    # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    performance_ok = await test_async_performance()
    
    # –¢–µ—Å—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    concurrent_ok = await test_concurrent_operations()
    
    print("\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    if performance_ok and concurrent_ok:
        print("‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω-–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:
        print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ë–î")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")

if __name__ == "__main__":
    asyncio.run(main()) 