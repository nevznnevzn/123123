"""
–¢–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è AI-—Å–µ—Ä–≤–∏—Å–æ–≤
–°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–æ—Ç–æ–º
"""
import asyncio
import logging
from datetime import datetime
from services.ai_predictions import AIPredictionService
from services.star_advice_service import StarAdviceService
from services.motivation_service import MotivationService
from services.subscription_service import SubscriptionService
from services.antispam_service import AntiSpamService
from models import PlanetPosition, Location
from database import User, NatalChart, db_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.WARNING, format='%(levelname)s: %(message)s')

async def test_new_user_journey():
    """–¢–µ—Å—Ç: –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ø–µ—Ä–≤—ã–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI-—Ñ—É–Ω–∫—Ü–∏–∏"""
    print("\nüë§ === –°–¶–ï–ù–ê–†–ò–ô: –ù–û–í–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ ===")
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = 1001
    user_name = "–ê–Ω–Ω–∞"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ–≥–Ω–æ–∑–∞ –±–µ–∑ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
    ai_service = AIPredictionService()
    
    try:
        # –£ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â–µ –Ω–µ—Ç –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
        result = await ai_service.generate_prediction(
            user_planets={},  # –ü—É—Å—Ç–∞—è –∫–∞—Ä—Ç–∞
            prediction_type="—Å–µ–≥–æ–¥–Ω—è",
            owner_name=user_name
        )
        
        print(f"‚úì –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"‚úì Fallback —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç: {'fallback' in result.lower() or '–±–∞–∑–æ–≤—ã—Ö' in result.lower()}")
        return True
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞: {e}")
        return False


async def test_premium_vs_free_user():
    """–¢–µ—Å—Ç: —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É Premium –∏ Free –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    print("\nüíé === –°–¶–ï–ù–ê–†–ò–ô: PREMIUM VS FREE ===")
    
    subscription_service = SubscriptionService()
    antispam_service = AntiSpamService()
    
    # Free –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    free_user_id = 2001
    premium_user_id = 2002
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è Free –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        free_limits = antispam_service.check_limits(free_user_id, is_premium=False)
        print(f"‚úì Free –ª–∏–º–∏—Ç—ã: {free_limits['questions_left']} –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        premium_limits = antispam_service.check_limits(premium_user_id, is_premium=True)
        print(f"‚úì Premium –ª–∏–º–∏—Ç—ã: {premium_limits['questions_left']} –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∏—Å—á–µ—Ä–ø–∞–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ —É Free –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for i in range(4):  # Free –ª–∏–º–∏—Ç = 3 –≤–æ–ø—Ä–æ—Å–∞
            antispam_service.record_question(free_user_id)
        
        exhausted_limits = antispam_service.check_limits(free_user_id, is_premium=False)
        print(f"‚úì –ü–æ—Å–ª–µ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤: —Ä–∞–∑—Ä–µ—à–µ–Ω–æ={exhausted_limits['allowed']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–ª–∞–Ω–µ—Ç
        test_planets = {
            "–°–æ–ª–Ω—Ü–µ": PlanetPosition(sign="–õ–µ–≤", degree=15.0),
            "–õ—É–Ω–∞": PlanetPosition(sign="–†–∞–∫", degree=22.0),
            "–ú–µ—Ä–∫—É—Ä–∏–π": PlanetPosition(sign="–î–µ–≤–∞", degree=8.0),
            "–í–µ–Ω–µ—Ä–∞": PlanetPosition(sign="–ë–ª–∏–∑–Ω–µ—Ü—ã", degree=12.0),
            "–ú–∞—Ä—Å": PlanetPosition(sign="–°–∫–æ—Ä–ø–∏–æ–Ω", degree=18.0),
        }
        
        free_planets = await subscription_service.filter_planets_for_user(test_planets, free_user_id)
        premium_planets = await subscription_service.filter_planets_for_user(test_planets, premium_user_id)
        
        print(f"‚úì Free –ø–ª–∞–Ω–µ—Ç—ã: {len(free_planets)} –∏–∑ {len(test_planets)}")
        print(f"‚úì Premium –ø–ª–∞–Ω–µ—Ç—ã: {len(premium_planets)} –∏–∑ {len(test_planets)}")
        
        return len(free_planets) < len(premium_planets)
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞: {e}")
        return False


async def test_star_advice_user_flow():
    """–¢–µ—Å—Ç: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –ó–≤–µ–∑–¥–Ω–æ–º—É —Å–æ–≤–µ—Ç—É"""
    print("\nüåü === –°–¶–ï–ù–ê–†–ò–ô: –ó–í–ï–ó–î–ù–´–ô –°–û–í–ï–¢ ===")
    
    service = StarAdviceService()
    
    # –†–µ–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_questions = [
        ("–ö–æ–≥–¥–∞ –º–Ω–µ –ª—É—á—à–µ —Å–º–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É?", True),
        ("–ö–∞–∫ –Ω–∞–π—Ç–∏ —Å–≤–æ—é –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω–∫—É?", True),
        ("–ü–æ–¥–æ–π–¥–µ—Ç –ª–∏ –º–Ω–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞?", True),
        ("–ö–∞–∫–∞—è –∑–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –ø–æ–≥–æ–¥–∞?", False),
        ("–ù–∞–ø–∏—à–∏ –∫–æ–¥ –Ω–∞ Python", False),
        ("–ü–æ—Å–æ–≤–µ—Ç—É–π –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –æ—Ç –≥–æ–ª–æ–≤–Ω–æ–π –±–æ–ª–∏", False),
    ]
    
    valid_questions = 0
    processed_questions = 0
    
    for question, expected_valid in user_questions:
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞
            validation = await service.validate_question(question)
            is_valid = validation.get("is_valid", False)
            
            print(f"{'‚úì' if is_valid == expected_valid else '‚úó'} '{question[:40]}...': {'–ü—Ä–∏–Ω—è—Ç' if is_valid else '–û—Ç–∫–ª–æ–Ω–µ–Ω'}")
            
            if is_valid == expected_valid:
                valid_questions += 1
            
            # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –≤–∞–ª–∏–¥–Ω—ã–π, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            if is_valid:
                test_planets = {
                    "–°–æ–ª–Ω—Ü–µ": PlanetPosition(sign="–í–µ—Å—ã", degree=20.0),
                    "–õ—É–Ω–∞": PlanetPosition(sign="–†—ã–±—ã", degree=15.0)
                }
                
                birth_dt = datetime(1990, 10, 15, 14, 30)
                location = Location(city="–ú–æ—Å–∫–≤–∞", lat=55.7558, lng=37.6176, timezone="Europe/Moscow")
                
                advice = await service.generate_advice(
                    question=question,
                    category="career",
                    user_planets=test_planets,
                    birth_dt=birth_dt,
                    location=location,
                    user_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                )
                
                if advice and len(advice) > 50:
                    processed_questions += 1
                    print(f"  ‚û§ –°–æ–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {len(advice)} —Å–∏–º–≤–æ–ª–æ–≤")
                
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
    
    print(f"‚úì –í–∞–ª–∏–¥–∞—Ü–∏—è: {valid_questions}/{len(user_questions)}")
    print(f"‚úì –°–æ–≤–µ—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã: {processed_questions}")
    
    return valid_questions >= len(user_questions) * 0.8  # 80% —É—Å–ø–µ—à–Ω—ã—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–π


async def test_daily_motivation_flow():
    """–¢–µ—Å—Ç: –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("\nüåÖ === –°–¶–ï–ù–ê–†–ò–ô: –ï–ñ–ï–î–ù–ï–í–ù–ê–Ø –ú–û–¢–ò–í–ê–¶–ò–Ø ===")
    
    ai_service = AIPredictionService()
    motivation_service = MotivationService(ai_service)
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    test_users = [
        User(telegram_id=3001, name="–ï–ª–µ–Ω–∞"),  # Free –±–µ–∑ –∫–∞—Ä—Ç
        User(telegram_id=3002, name="–î–º–∏—Ç—Ä–∏–π"),  # Free —Å –∫–∞—Ä—Ç–æ–π
        User(telegram_id=3003, name="–°–æ—Ñ–∏—è"),  # Premium
    ]
    
    success_count = 0
    
    for i, user in enumerate(test_users):
        try:
            is_premium = (i == 2)  # –¢—Ä–µ—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - Premium
            
            motivation = await motivation_service.generate_motivation(
                user, 
                is_subscribed=is_premium
            )
            
            if motivation:
                print(f"‚úì –ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–ª—è {user.name}: {len(motivation)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
                has_premium_content = "Premium" in motivation
                if is_premium:
                    print(f"  ‚û§ Premium –∫–æ–Ω—Ç–µ–Ω—Ç: {'–î–∞' if has_premium_content else '–ë–∞–∑–æ–≤—ã–π'}")
                else:
                    print(f"  ‚û§ –ü—Ä–∏–∑—ã–≤ –∫ –ø–æ–¥–ø–∏—Å–∫–µ: {'–î–∞' if has_premium_content else '–ù–µ—Ç'}")
                
                success_count += 1
            else:
                print(f"‚úó –ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–ª—è {user.name} –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞")
                
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –¥–ª—è {user.name}: {e}")
    
    return success_count >= 2  # –ú–∏–Ω–∏–º—É–º 2 –∏–∑ 3 —É—Å–ø–µ—à–Ω—ã—Ö


async def test_api_failure_scenarios():
    """–¢–µ—Å—Ç: –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ AI API"""
    print("\nüõ°Ô∏è === –°–¶–ï–ù–ê–†–ò–ô: –û–¢–ö–ê–ó–û–£–°–¢–û–ô–ß–ò–í–û–°–¢–¨ ===")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –æ—Ç–∫–∞–∑–æ–≤
    scenarios = []
    
    # 1. AI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å fallback
    try:
        ai_service = AIPredictionService()
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ "–ª–æ–º–∞–µ–º" –∫–ª–∏–µ–Ω—Ç
        original_client = ai_service.client
        ai_service.client = None
        
        result = await ai_service.generate_prediction(
            user_planets={"–°–æ–ª–Ω—Ü–µ": PlanetPosition(sign="–û–≤–µ–Ω", degree=10.0)},
            prediction_type="—Å–µ–≥–æ–¥–Ω—è"
        )
        
        fallback_works = "fallback" in result.lower() or "–±–∞–∑–æ–≤—ã—Ö" in result.lower() or len(result) > 100
        print(f"‚úì Fallback –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ AI: {'–†–∞–±–æ—Ç–∞–µ—Ç' if fallback_works else '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
        scenarios.append(fallback_works)
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        ai_service.client = original_client
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ fallback —Ç–µ—Å—Ç–∞: {e}")
        scenarios.append(False)
    
    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–∞–π–º–∞—É—Ç—ã (–∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç)
    try:
        ai_service = AIPredictionService()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç
        import asyncio
        
        result = await asyncio.wait_for(
            ai_service.generate_prediction(
                user_planets={"–°–æ–ª–Ω—Ü–µ": PlanetPosition(sign="–õ–µ–≤", degree=15.0)},
                prediction_type="—Å–µ–≥–æ–¥–Ω—è"
            ),
            timeout=3  # 3 —Å–µ–∫—É–Ω–¥—ã
        )
        
        timeout_handled = len(result) > 50
        print(f"‚úì –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤: {'–†–∞–±–æ—Ç–∞–µ—Ç' if timeout_handled else '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
        scenarios.append(timeout_handled)
        
    except asyncio.TimeoutError:
        print("‚úì –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤: –¢–∞–π–º–∞—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        scenarios.append(True)
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ —Ç–∞–π–º–∞—É—Ç —Ç–µ—Å—Ç–∞: {e}")
        scenarios.append(False)
    
    return sum(scenarios) >= len(scenarios) * 0.7  # 70% —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —É—Å–ø–µ—à–Ω—ã—Ö


async def test_real_world_load():
    """–¢–µ—Å—Ç: –∏–º–∏—Ç–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("\nüöÄ === –°–¶–ï–ù–ê–†–ò–ô: –†–ï–ê–õ–¨–ù–ê–Ø –ù–ê–ì–†–£–ó–ö–ê ===")
    
    ai_service = AIPredictionService()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º 5 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    async def user_request(user_id: int):
        try:
            planets = {
                "–°–æ–ª–Ω—Ü–µ": PlanetPosition(sign="–¢–µ–ª–µ—Ü", degree=user_id % 30),
                "–õ—É–Ω–∞": PlanetPosition(sign="–†–∞–∫", degree=(user_id * 2) % 30)
            }
            
            result = await ai_service.generate_prediction(
                user_planets=planets,
                prediction_type="—Å–µ–≥–æ–¥–Ω—è",
                owner_name=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å{user_id}"
            )
            
            return len(result) > 100
            
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    tasks = [user_request(i) for i in range(1, 6)]
    results = await asyncio.gather(*tasks, return_exceptions=True)
    
    successful = sum(1 for r in results if r is True)
    print(f"‚úì –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {successful}/5")
    
    return successful >= 3  # –ú–∏–Ω–∏–º—É–º 3 –∏–∑ 5 —É—Å–ø–µ—à–Ω—ã—Ö


async def run_user_scenarios():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    print("üß™ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–• –°–¶–ï–ù–ê–†–ò–ï–í ===")
    print("=" * 60)
    
    scenarios = [
        ("–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", test_new_user_journey),
        ("Premium vs Free", test_premium_vs_free_user),
        ("–ó–≤–µ–∑–¥–Ω—ã–π —Å–æ–≤–µ—Ç", test_star_advice_user_flow),
        ("–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è", test_daily_motivation_flow),
        ("–û—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å", test_api_failure_scenarios),
        ("–†–µ–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞", test_real_world_load),
    ]
    
    results = []
    
    for scenario_name, test_func in scenarios:
        try:
            print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º: {scenario_name}")
            result = await test_func()
            results.append((scenario_name, result))
            status = "‚úÖ PASSED" if result else "‚ùå FAILED"
            print(f"   {status}")
            
        except Exception as e:
            print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ '{scenario_name}': {e}")
            results.append((scenario_name, False))
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìä === –ò–¢–û–ì–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===")
    
    passed = 0
    for scenario_name, result in results:
        status = "‚úÖ –ì–û–¢–û–í" if result else "‚ùå –ü–†–û–ë–õ–ï–ú–´"
        print(f"{status} - {scenario_name}")
        if result:
            passed += 1
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(results)} —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    if passed == len(results):
        print("üéâ –í–°–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –°–¶–ï–ù–ê–†–ò–ò –†–ê–ë–û–¢–ê–Æ–¢!")
        print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
    elif passed >= len(results) * 0.8:
        print("‚ö†Ô∏è –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å—Ç—å –º–µ–ª–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
        print("üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    else:
        print("üö® –°–ï–†–¨–ï–ó–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ú –û–ü–´–¢–û–ú!")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
    
    return passed, len(results)


if __name__ == "__main__":
    asyncio.run(run_user_scenarios()) 