"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ SolarBalance
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—É—Ç—å –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
"""
import asyncio
import logging
from datetime import datetime
from services.ai_predictions import AIPredictionService
from services.star_advice_service import StarAdviceService
from services.motivation_service import MotivationService
from services.subscription_service import SubscriptionService
from services.antispam_service import AntiSpamService
from services.astro_calculations import AstroService
from database_async import AsyncDatabaseManager
from models import PlanetPosition, Location

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏
logging.basicConfig(level=logging.ERROR)

class FinalUserCheck:
    def __init__(self):
        self.db_manager = AsyncDatabaseManager("sqlite+aiosqlite:///final_test.db")
        self.test_user_id = 888888
        
    async def run_full_user_journey(self):
        """–ü–æ–ª–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—É—Ç—å"""
        print("üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ì–û –û–ü–´–¢–ê")
        print("=" * 60)
        
        try:
            await self.db_manager.init_db()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            print("\nüë§ 1. –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")
            user, created = await self.db_manager.get_or_create_user(
                telegram_id=self.test_user_id,
                name="–§–∏–Ω–∞–ª—å–Ω—ã–π –¢–µ—Å—Ç"
            )
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {'—Å–æ–∑–¥–∞–Ω' if created else '–Ω–∞–π–¥–µ–Ω'}: {user.name}")
            
            # 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
            print("\nüìù 2. –ù–ê–°–¢–†–û–ô–ö–ê –ü–†–û–§–ò–õ–Ø")
            updated_user = await self.db_manager.update_user_profile(
                telegram_id=self.test_user_id,
                name="–§–∏–Ω–∞–ª—å–Ω—ã–π –¢–µ—Å—Ç",
                gender="–ú—É–∂—Å–∫–æ–π",
                birth_year=1990,
                birth_city="–ú–æ—Å–∫–≤–∞",
                birth_date=datetime(1990, 7, 15, 12, 0),
                birth_time_specified=True
            )
            print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {updated_user.birth_city}")
            
            # 3. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
            print("\n‚≠ê 3. –°–û–ó–î–ê–ù–ò–ï –ù–ê–¢–ê–õ–¨–ù–û–ô –ö–ê–†–¢–´")
            test_planets = {
                "–°–æ–ª–Ω—Ü–µ": {"sign": "–õ–µ–≤", "degree": 15.0},
                "–õ—É–Ω–∞": {"sign": "–†–∞–∫", "degree": 8.0},
                "–ú–µ—Ä–∫—É—Ä–∏–π": {"sign": "–õ–µ–≤", "degree": 12.0},
                "–í–µ–Ω–µ—Ä–∞": {"sign": "–î–µ–≤–∞", "degree": 3.0},
                "–ú–∞—Ä—Å": {"sign": "–°–∫–æ—Ä–ø–∏–æ–Ω", "degree": 22.0},
            }
            
            chart = await self.db_manager.create_natal_chart(
                telegram_id=self.test_user_id,
                name="–§–∏–Ω–∞–ª—å–Ω—ã–π –¢–µ—Å—Ç",
                city="–ú–æ—Å–∫–≤–∞",
                latitude=55.7558,
                longitude=37.6176,
                timezone="Europe/Moscow",
                birth_date=datetime(1990, 7, 15, 12, 0),
                birth_time_specified=True,
                has_warning=False,
                planets_data=test_planets
            )
            print(f"‚úÖ –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: {chart.city}")
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ AI –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
            print("\nüîÆ 4. AI –ü–†–û–ì–ù–û–ó–´")
            ai_service = AIPredictionService()
            if ai_service.client:
                print("‚úÖ AI —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞
                planets = chart.get_planets_data()
                prediction = await ai_service.generate_prediction(
                    user_planets=planets,
                    prediction_type="—Å–µ–≥–æ–¥–Ω—è",
                    owner_name="–§–∏–Ω–∞–ª—å–Ω—ã–π –¢–µ—Å—Ç",
                    birth_dt=chart.birth_date,
                    location=Location(lat=chart.latitude, lon=chart.longitude, city=chart.city)
                )
                
                if prediction and len(prediction) > 100:
                    print(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ({len(prediction)} —Å–∏–º–≤–æ–ª–æ–≤)")
                    
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
                    valid_from, valid_until = ai_service.get_prediction_period("—Å–µ–≥–æ–¥–Ω—è")
                    db_prediction = await self.db_manager.create_prediction(
                        telegram_id=self.test_user_id,
                        chart_id=chart.id,
                        prediction_type="—Å–µ–≥–æ–¥–Ω—è",
                        valid_from=valid_from,
                        valid_until=valid_until,
                        content=prediction,
                        generation_time=1.5
                    )
                    print(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î: {db_prediction.id}")
                else:
                    print("‚ùå –ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
            else:
                print("‚ùå AI —Å–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–≤–µ–∑–¥–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞
            print("\nüåü 5. –ó–í–ï–ó–î–ù–´–ô –°–û–í–ï–¢")
            star_service = StarAdviceService()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
            validation = await star_service.validate_question("–ö–∞–∫ –º–Ω–µ –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É –≤ IT?")
            if validation["is_valid"]:
                print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–≤–µ—Ç–∞
                planets = chart.get_planets_data()
                advice = await star_service.generate_advice(
                    question="–ö–∞–∫ –º–Ω–µ —É–ª—É—á—à–∏—Ç—å –∫–∞—Ä—å–µ—Ä—É?",
                    category="career",
                    user_planets=planets,
                    birth_dt=chart.birth_date,
                    location=Location(lat=chart.latitude, lon=chart.longitude, city=chart.city),
                    user_name="–§–∏–Ω–∞–ª—å–Ω—ã–π –¢–µ—Å—Ç"
                )
                
                if advice and len(advice) > 200:
                    print(f"‚úÖ –°–æ–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ({len(advice)} —Å–∏–º–≤–æ–ª–æ–≤)")
                else:
                    print("‚ùå –°–æ–≤–µ—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
            else:
                print("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–π
            print("\nüåÖ 6. –ï–ñ–ï–î–ù–ï–í–ù–´–ï –ú–û–¢–ò–í–ê–¶–ò–ò")
            motivation_service = MotivationService(ai_service)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏
            user_for_motivation = await self.db_manager.get_user_profile(self.test_user_id)
            motivation = await motivation_service.generate_motivation(
                user=user_for_motivation,
                is_subscribed=False
            )
            
            if motivation and len(motivation) > 100:
                print(f"‚úÖ –ú–æ—Ç–∏–≤–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ ({len(motivation)} —Å–∏–º–≤–æ–ª–æ–≤)")
            else:
                print("‚ùå –ú–æ—Ç–∏–≤–∞—Ü–∏—è –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞")
            
            # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–∫–∏
            print("\nüíé 7. –°–ò–°–¢–ï–ú–ê –ü–û–î–ü–ò–°–ö–ò")
            subscription_service = SubscriptionService()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
            subscription = await self.db_manager.get_or_create_subscription(self.test_user_id)
            print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {subscription.subscription_type.value}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
            is_premium = subscription_service.is_user_premium(self.test_user_id)
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å Premium: {'–î–∞' if is_premium else '–ù–µ—Ç'}")
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–µ—Ç
            all_planets = {
                "–°–æ–ª–Ω—Ü–µ": PlanetPosition(sign="–õ–µ–≤", degree=15.0),
                "–õ—É–Ω–∞": PlanetPosition(sign="–†–∞–∫", degree=8.0),
                "–ú–µ—Ä–∫—É—Ä–∏–π": PlanetPosition(sign="–õ–µ–≤", degree=12.0),
                "–í–µ–Ω–µ—Ä–∞": PlanetPosition(sign="–î–µ–≤–∞", degree=3.0),
                "–ú–∞—Ä—Å": PlanetPosition(sign="–°–∫–æ—Ä–ø–∏–æ–Ω", degree=22.0),
                "–Æ–ø–∏—Ç–µ—Ä": PlanetPosition(sign="–†—ã–±—ã", degree=5.0),
                "–°–∞—Ç—É—Ä–Ω": PlanetPosition(sign="–ö–æ–∑–µ—Ä–æ–≥", degree=18.0),
            }
            
            free_planets = await subscription_service.filter_planets_for_user(
                all_planets, self.test_user_id
            )
            print(f"‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–µ—Ç: {len(free_planets)} –∏–∑ {len(all_planets)}")
            
            # 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω—Ç–∏—Å–ø–∞–º–∞
            print("\nüõ°Ô∏è 8. –ê–ù–¢–ò–°–ü–ê–ú –°–ò–°–¢–ï–ú–ê")
            antispam_service = AntiSpamService()
            
            limits = antispam_service.check_limits(self.test_user_id, is_premium=False)
            print(f"‚úÖ –õ–∏–º–∏—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã: {limits['questions_left']} –≤–æ–ø—Ä–æ—Å–æ–≤")
            
            antispam_service.record_question(self.test_user_id)
            new_limits = antispam_service.check_limits(self.test_user_id, is_premium=False)
            print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ: {new_limits['questions_left']} –≤–æ–ø—Ä–æ—Å–æ–≤")
            
            # 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
            print("\n‚≠ê 9. –ê–°–¢–†–û–õ–û–ì–ò–ß–ï–°–ö–ò–ï –†–ê–°–ß–ï–¢–´")
            astro_service = AstroService()
            
            location = Location(lat=55.7558, lon=37.6176, city="–ú–æ—Å–∫–≤–∞")
            birth_dt = datetime(1990, 7, 15, 12, 0)
            
            planets = await astro_service.calculate_natal_chart(birth_dt, location)
            if planets and len(planets) >= 10:
                print(f"‚úÖ –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞: {len(planets)} –ø–ª–∞–Ω–µ—Ç")
            else:
                print("‚ùå –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞")
            
            transits = await astro_service.calculate_transits(birth_dt, location, datetime.now())
            if transits:
                print(f"‚úÖ –¢—Ä–∞–Ω–∑–∏—Ç—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã: {len(transits)} –∞—Å–ø–µ–∫—Ç–æ–≤")
            else:
                print("‚ùå –¢—Ä–∞–Ω–∑–∏—Ç—ã –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã")
            
            retrograde_info = astro_service.get_retrograde_info()
            if retrograde_info:
                print(f"‚úÖ –†–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω—ã–µ –ø–ª–∞–Ω–µ—Ç—ã: {len(retrograde_info)} –ø–ª–∞–Ω–µ—Ç")
            else:
                print("‚ùå –†–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω—ã–µ –ø–ª–∞–Ω–µ—Ç—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
            
            # 10. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            print("\nüíû 10. –°–ò–°–¢–ï–ú–ê –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò")
            reports = await self.db_manager.get_user_compatibility_reports(user.id)
            print(f"‚úÖ –û—Ç—á–µ—Ç—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {len(reports)} –æ—Ç—á–µ—Ç–æ–≤")
            
            # 11. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            print("\nüìä 11. –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–•")
            charts = await self.db_manager.get_user_charts(self.test_user_id)
            print(f"‚úÖ –ù–∞—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã: {len(charts)} –∫–∞—Ä—Ç")
            
            predictions = await self.db_manager.get_user_predictions(self.test_user_id)
            print(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑—ã: {len(predictions)} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
            
            users_for_mailing = await self.db_manager.get_users_for_mailing()
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {len(users_for_mailing)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            print("\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
            print("‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ë–î —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
            print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            return True
            
        except Exception as e:
            print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
            return False
            
        finally:
            # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            await self.db_manager.delete_user_data(self.test_user_id)
            await self.db_manager.close()
            print("\nüßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    checker = FinalUserCheck()
    success = await checker.run_full_user_journey()
    
    if success:
        print("\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ô –í–´–í–û–î:")
        print("‚úÖ SolarBalance –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω-–∑–∞–ø—É—Å–∫—É!")
        print("‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        print("‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ")
        print("‚úÖ AI-—Å–µ—Ä–≤–∏—Å—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –°–∏—Å—Ç–µ–º—ã –∑–∞—â–∏—Ç—ã –∞–∫—Ç–∏–≤–Ω—ã")
        print("\nüöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏!")
    else:
        print("\n‚ö†Ô∏è –§–ò–ù–ê–õ–¨–ù–´–ô –í–´–í–û–î:")
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")

if __name__ == "__main__":
    asyncio.run(main()) 