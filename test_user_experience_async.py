"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞ SolarBalance —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ë–î
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞
"""
import asyncio
import logging
from datetime import datetime
from services.ai_predictions import AIPredictionService
from services.star_advice_service import StarAdviceService
from services.motivation_service import MotivationService
from services.subscription_service import SubscriptionService
from services.antispam_service import AntiSpamService
from services.astro_calculations import AstroService
from database_async import AsyncDatabaseManager, User, NatalChart
from models import PlanetPosition, Location

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –≤—ã–≤–æ–¥–∞
logging.basicConfig(level=logging.ERROR)

class AsyncUserExperienceTester:
    def __init__(self):
        self.ai_service = AIPredictionService()
        self.star_advice_service = StarAdviceService()
        self.motivation_service = MotivationService(self.ai_service)
        self.subscription_service = SubscriptionService()
        self.antispam_service = AntiSpamService()
        self.astro_service = AstroService()
        self.db_manager = AsyncDatabaseManager("sqlite+aiosqlite:///test_user_experience.db")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.test_user_id = 999999
        self.test_planets = {
            "–°–æ–ª–Ω—Ü–µ": PlanetPosition(sign="–õ–µ–≤", degree=15.0, house=5),
            "–õ—É–Ω–∞": PlanetPosition(sign="–†–∞–∫", degree=8.0, house=4),
            "–ú–µ—Ä–∫—É—Ä–∏–π": PlanetPosition(sign="–õ–µ–≤", degree=12.0, house=5),
            "–í–µ–Ω–µ—Ä–∞": PlanetPosition(sign="–î–µ–≤–∞", degree=3.0, house=6),
            "–ú–∞—Ä—Å": PlanetPosition(sign="–°–∫–æ—Ä–ø–∏–æ–Ω", degree=22.0, house=8),
        }
        
    async def setup(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã"""
        await self.db_manager.init_db()
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        await self.db_manager.delete_user_data(self.test_user_id)
        await self.db_manager.close()
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
        
    async def test_all_user_scenarios(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞"""
        print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ì–û –û–ü–´–¢–ê")
        print("=" * 60)
        
        results = []
        
        # 1. –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–æ—Ñ–∏–ª—è
        print("\nüë§ –¢–ï–°–¢ 1: –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ò –ü–†–û–§–ò–õ–¨")
        print("-" * 30)
        result = await self.test_user_registration()
        results.append(("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –ø—Ä–æ—Ñ–∏–ª—å", result))
        
        # 2. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
        print("\n‚≠ê –¢–ï–°–¢ 2: –°–û–ó–î–ê–ù–ò–ï –ù–ê–¢–ê–õ–¨–ù–û–ô –ö–ê–†–¢–´")
        print("-" * 30)
        result = await self.test_natal_chart_creation()
        results.append(("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã", result))
        
        # 3. –¢–µ—Å—Ç AI –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
        print("\nüîÆ –¢–ï–°–¢ 3: AI –ü–†–û–ì–ù–û–ó–´")
        print("-" * 30)
        result = await self.test_ai_predictions()
        results.append(("AI –ü—Ä–æ–≥–Ω–æ–∑—ã", result))
        
        # 4. –¢–µ—Å—Ç –∑–≤–µ–∑–¥–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞
        print("\nüåü –¢–ï–°–¢ 4: –ó–í–ï–ó–î–ù–´–ô –°–û–í–ï–¢")
        print("-" * 30)
        result = await self.test_star_advice()
        results.append(("–ó–≤–µ–∑–¥–Ω—ã–π —Å–æ–≤–µ—Ç", result))
        
        # 5. –¢–µ—Å—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –º–æ—Ç–∏–≤–∞—Ü–∏–π
        print("\nüåÖ –¢–ï–°–¢ 5: –ï–ñ–ï–î–ù–ï–í–ù–´–ï –ú–û–¢–ò–í–ê–¶–ò–ò")
        print("-" * 30)
        result = await self.test_daily_motivations()
        results.append(("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏", result))
        
        # 6. –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–∫–∏
        print("\nüíé –¢–ï–°–¢ 6: –°–ò–°–¢–ï–ú–ê –ü–û–î–ü–ò–°–ö–ò")
        print("-" * 30)
        result = await self.test_subscription_system()
        results.append(("–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–∫–∏", result))
        
        # 7. –¢–µ—Å—Ç –∞–Ω—Ç–∏—Å–ø–∞–º–∞
        print("\nüõ°Ô∏è –¢–ï–°–¢ 7: –ê–ù–¢–ò–°–ü–ê–ú –°–ò–°–¢–ï–ú–ê")
        print("-" * 30)
        result = await self.test_antispam_system()
        results.append(("–ê–Ω—Ç–∏—Å–ø–∞–º —Å–∏—Å—Ç–µ–º–∞", result))
        
        # 8. –¢–µ—Å—Ç –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
        print("\n‚≠ê –¢–ï–°–¢ 8: –ê–°–¢–†–û–õ–û–ì–ò–ß–ï–°–ö–ò–ï –†–ê–°–ß–ï–¢–´")
        print("-" * 30)
        result = await self.test_astro_calculations()
        results.append(("–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã", result))
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print("=" * 60)
        
        passed = 0
        total = len(results)
        
        for test_name, result in results:
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            print(f"{test_name:<25} {status}")
            if result:
                passed += 1
        
        print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if passed == total:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.")
        else:
            print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è.")
            
        return passed == total
    
    async def test_user_registration(self):
        """–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user, created = await self.db_manager.get_or_create_user(
                telegram_id=self.test_user_id,
                name="–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            )
            
            if not created:
                print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return False
                
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {user.name}")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
            updated_user = await self.db_manager.update_user_profile(
                telegram_id=self.test_user_id,
                name="–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                gender="–ú—É–∂—Å–∫–æ–π",
                birth_year=1990,
                birth_city="–ú–æ—Å–∫–≤–∞",
                birth_date=datetime(1990, 7, 15, 12, 0),
                birth_time_specified=True
            )
            
            if not updated_user or not updated_user.is_profile_complete:
                print("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                return False
                
            print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω: {updated_user.birth_city}")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
            profile = await self.db_manager.get_user_profile(self.test_user_id)
            if not profile:
                print("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
                
            print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω: {profile.name}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    async def test_natal_chart_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
            chart = await self.db_manager.create_natal_chart(
                telegram_id=self.test_user_id,
                name="–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                city="–ú–æ—Å–∫–≤–∞",
                latitude=55.7558,
                longitude=37.6176,
                timezone="Europe/Moscow",
                birth_date=datetime(1990, 7, 15, 12, 0),
                birth_time_specified=True,
                has_warning=False,
                planets_data=self.test_planets
            )
            
            if not chart:
                print("‚ùå –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
                return False
                
            print(f"‚úÖ –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: {chart.city}")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            charts = await self.db_manager.get_user_charts(self.test_user_id)
            if not charts or len(charts) == 0:
                print("‚ùå –ö–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
                
            print(f"‚úÖ –ö–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã: {len(charts)} –∫–∞—Ä—Ç")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –ø–æ ID
            chart_by_id = await self.db_manager.get_chart_by_id(chart.id, self.test_user_id)
            if not chart_by_id:
                print("‚ùå –ö–∞—Ä—Ç–∞ –ø–æ ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
                
            print(f"‚úÖ –ö–∞—Ä—Ç–∞ –ø–æ ID –ø–æ–ª—É—á–µ–Ω–∞: {chart_by_id.id}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã: {e}")
            return False
    
    async def test_ai_predictions(self):
        """–¢–µ—Å—Ç AI –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
            charts = await self.db_manager.get_user_charts(self.test_user_id)
            if not charts:
                print("‚ùå –ù–µ—Ç –∫–∞—Ä—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞")
                return False
                
            chart = charts[0]
            planets = chart.get_planets_data()
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞
            prediction = await self.ai_service.generate_prediction(
                user_planets=planets,
                prediction_type="—Å–µ–≥–æ–¥–Ω—è",
                owner_name="–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                birth_dt=chart.birth_date,
                location=Location(lat=chart.latitude, lon=chart.longitude, city=chart.city)
            )
            
            if not prediction or len(prediction) < 100:
                print("‚ùå –ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
                return False
                
            print(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ({len(prediction)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ –ë–î
            valid_from, valid_until = self.ai_service.get_prediction_period("—Å–µ–≥–æ–¥–Ω—è")
            db_prediction = await self.db_manager.create_prediction(
                telegram_id=self.test_user_id,
                chart_id=chart.id,
                prediction_type="—Å–µ–≥–æ–¥–Ω—è",
                valid_from=valid_from,
                valid_until=valid_until,
                content=prediction,
                generation_time=1.5
            )
            
            if not db_prediction:
                print("‚ùå –ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
                return False
                
            print(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î: {db_prediction.id}")
            
            # –ü–æ–∏—Å–∫ –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
            existing_prediction = await self.db_manager.find_valid_prediction(
                self.test_user_id, chart.id, "—Å–µ–≥–æ–¥–Ω—è"
            )
            
            if not existing_prediction:
                print("‚ùå –î–µ–π—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
                
            print(f"‚úÖ –î–µ–π—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞–π–¥–µ–Ω: {existing_prediction.id}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ AI –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {e}")
            return False
    
    async def test_star_advice(self):
        """–¢–µ—Å—Ç –∑–≤–µ–∑–¥–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞"""
        try:
            # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
            test_questions = [
                ("–ö–æ—Ä–æ—Ç–∫–∏–π", False),  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
                ("–≠—Ç–æ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –≤ 500 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω —Å–∏—Å—Ç–µ–º–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏. " * 10, False),  # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
                ("–ö–∞–∫ –º–Ω–µ –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É –≤ IT —Å—Ñ–µ—Ä–µ?", True),  # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
                ("–ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏?", True),  # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
            ]
            
            for question, should_be_valid in test_questions:
                validation = await self.star_advice_service.validate_question(question)
                if validation["is_valid"] == should_be_valid:
                    print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞: {'–ø—Ä–∏–Ω—è—Ç' if should_be_valid else '–æ—Ç–∫–ª–æ–Ω–µ–Ω'}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {question[:30]}...")
                    return False
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è —Å–æ–≤–µ—Ç–∞
            charts = await self.db_manager.get_user_charts(self.test_user_id)
            if not charts:
                print("‚ùå –ù–µ—Ç –∫–∞—Ä—Ç –¥–ª—è —Å–æ–≤–µ—Ç–∞")
                return False
                
            chart = charts[0]
            planets = chart.get_planets_data()
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–≤–µ—Ç–∞
            advice = await self.star_advice_service.generate_advice(
                question="–ö–∞–∫ –º–Ω–µ —É–ª—É—á—à–∏—Ç—å –∫–∞—Ä—å–µ—Ä—É?",
                category="career",
                user_planets=planets,
                birth_dt=chart.birth_date,
                location=Location(lat=chart.latitude, lon=chart.longitude, city=chart.city),
                user_name="–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            )
            
            if advice and len(advice) > 200:
                print(f"‚úÖ –°–æ–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ({len(advice)} —Å–∏–º–≤–æ–ª–æ–≤)")
                return True
            else:
                print("‚ùå –°–æ–≤–µ—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∑–≤–µ–∑–¥–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞: {e}")
            return False
    
    async def test_daily_motivations(self):
        """–¢–µ—Å—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –º–æ—Ç–∏–≤–∞—Ü–∏–π"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.db_manager.get_user_profile(self.test_user_id)
            if not user:
                print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è Free –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            motivation = await self.motivation_service.generate_motivation(
                user=user,
                is_subscribed=False
            )
            
            if motivation and len(motivation) > 100:
                print(f"‚úÖ Free –º–æ—Ç–∏–≤–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ ({len(motivation)} —Å–∏–º–≤–æ–ª–æ–≤)")
            else:
                print("‚ùå Free –º–æ—Ç–∏–≤–∞—Ü–∏—è –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞")
                return False
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            premium_motivation = await self.motivation_service.generate_motivation(
                user=user,
                is_subscribed=True
            )
            
            if premium_motivation and len(premium_motivation) > 100:
                print(f"‚úÖ Premium –º–æ—Ç–∏–≤–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ ({len(premium_motivation)} —Å–∏–º–≤–æ–ª–æ–≤)")
            else:
                print("‚ùå Premium –º–æ—Ç–∏–≤–∞—Ü–∏—è –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞")
                return False
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–π: {e}")
            return False
    
    async def test_subscription_system(self):
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
            subscription = await self.db_manager.get_or_create_subscription(self.test_user_id)
            if not subscription:
                print("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
                return False
                
            print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {subscription.subscription_type.value}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Premium —Å—Ç–∞—Ç—É—Å–∞
            is_premium = self.subscription_service.is_user_premium(self.test_user_id)
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å Premium –ø—Ä–æ–≤–µ—Ä–µ–Ω: {'–î–∞' if is_premium else '–ù–µ—Ç'}")
            
            # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–µ—Ç
            all_planets = {
                "–°–æ–ª–Ω—Ü–µ": PlanetPosition(sign="–õ–µ–≤", degree=15.0),
                "–õ—É–Ω–∞": PlanetPosition(sign="–†–∞–∫", degree=8.0),
                "–ú–µ—Ä–∫—É—Ä–∏–π": PlanetPosition(sign="–õ–µ–≤", degree=12.0),
                "–í–µ–Ω–µ—Ä–∞": PlanetPosition(sign="–î–µ–≤–∞", degree=3.0),
                "–ú–∞—Ä—Å": PlanetPosition(sign="–°–∫–æ—Ä–ø–∏–æ–Ω", degree=22.0),
                "–Æ–ø–∏—Ç–µ—Ä": PlanetPosition(sign="–†—ã–±—ã", degree=5.0),
                "–°–∞—Ç—É—Ä–Ω": PlanetPosition(sign="–ö–æ–∑–µ—Ä–æ–≥", degree=18.0),
                "–£—Ä–∞–Ω": PlanetPosition(sign="–ö–æ–∑–µ—Ä–æ–≥", degree=12.0),
                "–ù–µ–ø—Ç—É–Ω": PlanetPosition(sign="–ö–æ–∑–µ—Ä–æ–≥", degree=8.0),
                "–ü–ª—É—Ç–æ–Ω": PlanetPosition(sign="–°–∫–æ—Ä–ø–∏–æ–Ω", degree=15.0),
            }
            
            # –î–ª—è Free –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            free_planets = await self.subscription_service.filter_planets_for_user(
                all_planets, self.test_user_id
            )
            print(f"‚úÖ –ü–ª–∞–Ω–µ—Ç—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –¥–ª—è Free: {len(free_planets)} –∏–∑ {len(all_planets)}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False
    
    async def test_antispam_system(self):
        """–¢–µ—Å—Ç –∞–Ω—Ç–∏—Å–ø–∞–º —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤
            limits = self.antispam_service.check_limits(self.test_user_id, is_premium=False)
            print(f"‚úÖ –õ–∏–º–∏—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã: {limits['questions_left']} –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å")
            
            # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            self.antispam_service.record_question(self.test_user_id)
            new_limits = self.antispam_service.check_limits(self.test_user_id, is_premium=False)
            print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ: {new_limits['questions_left']} –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å")
            
            # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats = self.antispam_service.get_stats_text(self.test_user_id, is_premium=False)
            if stats:
                print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞")
            else:
                print("‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞")
                return False
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∞–Ω—Ç–∏—Å–ø–∞–º–∞: {e}")
            return False
    
    async def test_astro_calculations(self):
        """–¢–µ—Å—Ç –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤"""
        try:
            # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
            location = Location(lat=55.7558, lon=37.6176, city="–ú–æ—Å–∫–≤–∞")
            birth_dt = datetime(1990, 7, 15, 12, 0)
            
            planets = await self.astro_service.calculate_natal_chart(birth_dt, location)
            
            if planets and len(planets) >= 10:  # –ú–∏–Ω–∏–º—É–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–ª–∞–Ω–µ—Ç—ã
                print(f"‚úÖ –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞: {len(planets)} –ø–ª–∞–Ω–µ—Ç")
            else:
                print("‚ùå –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞")
                return False
            
            # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤
            transit_date = datetime.now()
            transits = await self.astro_service.calculate_transits(birth_dt, location, transit_date)
            
            if transits:
                print(f"‚úÖ –¢—Ä–∞–Ω–∑–∏—Ç—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã: {len(transits)} –∞—Å–ø–µ–∫—Ç–æ–≤")
            else:
                print("‚ùå –¢—Ä–∞–Ω–∑–∏—Ç—ã –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã")
                return False
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω—ã—Ö –ø–ª–∞–Ω–µ—Ç
            retrograde_info = self.astro_service.get_retrograde_info()
            if retrograde_info:
                print(f"‚úÖ –†–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω—ã–µ –ø–ª–∞–Ω–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã: {len(retrograde_info)} –ø–ª–∞–Ω–µ—Ç")
            else:
                print("‚ùå –†–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω—ã–µ –ø–ª–∞–Ω–µ—Ç—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
                return False
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤: {e}")
            return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = AsyncUserExperienceTester()
    
    try:
        await tester.setup()
        success = await tester.test_all_user_scenarios()
        
        if success:
            print("\nüéØ –í–´–í–û–î: –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
            print("‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ë–î —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
            print("‚úÖ AI-—Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
            print("‚úÖ –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã —Ç–æ—á–Ω—ã")
            print("‚úÖ –°–∏—Å—Ç–µ–º—ã –∑–∞—â–∏—Ç—ã –∞–∫—Ç–∏–≤–Ω—ã")
        else:
            print("\n‚ö†Ô∏è –í–´–í–û–î: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã!")
            print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
            
    finally:
        await tester.cleanup()

if __name__ == "__main__":
    asyncio.run(main()) 