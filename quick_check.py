"""
–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π SolarBalance
"""
import asyncio
import logging
from datetime import datetime
from services.ai_predictions import AIPredictionService
from services.star_advice_service import StarAdviceService
from services.motivation_service import MotivationService
from services.subscription_service import SubscriptionService
from services.antispam_service import AntiSpamService
from models import PlanetPosition, Location

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏
logging.basicConfig(level=logging.ERROR)

async def quick_check():
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("üîç –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê SOLARBALANCE")
    print("=" * 40)
    
    results = []
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ AI —Å–µ—Ä–≤–∏—Å–∞
    print("\nü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ AI —Å–µ—Ä–≤–∏—Å–∞...")
    try:
        ai_service = AIPredictionService()
        if ai_service.client:
            print("‚úÖ AI –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            results.append(True)
        else:
            print("‚ùå AI –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            results.append(False)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ AI: {e}")
        results.append(False)
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–≤–µ–∑–¥–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞
    print("\nüåü –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–≤–µ–∑–¥–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞...")
    try:
        star_service = StarAdviceService()
        print("‚úÖ –°–µ—Ä–≤–∏—Å –∑–≤–µ–∑–¥–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω")
        results.append(True)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–≤–µ–∑–¥–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞: {e}")
        results.append(False)
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–π
    print("\nüåÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–π...")
    try:
        motivation_service = MotivationService(ai_service=ai_service)
        print("‚úÖ –°–µ—Ä–≤–∏—Å –º–æ—Ç–∏–≤–∞—Ü–∏–π —Å–æ–∑–¥–∞–Ω")
        results.append(True)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–π: {e}")
        results.append(False)
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    print("\nüíé –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–∫–∏...")
    try:
        subscription_service = SubscriptionService()
        print("‚úÖ –°–µ—Ä–≤–∏—Å –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ–∑–¥–∞–Ω")
        results.append(True)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        results.append(False)
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω—Ç–∏—Å–ø–∞–º–∞
    print("\nüõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω—Ç–∏—Å–ø–∞–º–∞...")
    try:
        antispam_service = AntiSpamService()
        print("‚úÖ –°–µ—Ä–≤–∏—Å –∞–Ω—Ç–∏—Å–ø–∞–º–∞ —Å–æ–∑–¥–∞–Ω")
        results.append(True)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω—Ç–∏—Å–ø–∞–º–∞: {e}")
        results.append(False)
    
    # –ò—Ç–æ–≥–∏
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("-" * 20)
    
    passed = sum(results)
    total = len(results)
    
    print(f"‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç: {passed}/{total}")
    print(f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã: {total - passed}/{total}")
    
    if passed == total:
        print("\nüéâ –í–°–ï –°–ï–†–í–ò–°–´ –†–ê–ë–û–¢–ê–Æ–¢!")
        print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:
        print("\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
    
    return passed == total

if __name__ == "__main__":
    asyncio.run(quick_check()) 