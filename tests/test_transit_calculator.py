import zoneinfo
from datetime import datetime
from unittest.mock import Mock, patch

import pytest

from models import Location
from services.transit_calculator import TransitCalculator


class TestTransitCalculator:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤"""

    def test_init_creates_transit_planets(self):
        """–¢–µ—Å—Ç: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø–ª–∞–Ω–µ—Ç –¥–ª—è —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤"""
        calculator = TransitCalculator()

        assert calculator.transit_planets is not None
        assert len(calculator.transit_planets) == 10  # 10 –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–ª–∞–Ω–µ—Ç
        assert "–°–æ–ª–Ω—Ü–µ" in calculator.transit_planets.values()
        assert "–ü–ª—É—Ç–æ–Ω" in calculator.transit_planets.values()

    @patch("swisseph.calc_ut")
    @patch("swisseph.julday")
    def test_calculate_natal_planets_success(self, mock_julday, mock_calc_ut):
        """–¢–µ—Å—Ç: —É—Å–ø–µ—à–Ω—ã–π —Ä–∞—Å—á–µ—Ç –Ω–∞—Ç–∞–ª—å–Ω—ã—Ö –ø–ª–∞–Ω–µ—Ç"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–æ–≤
        mock_julday.return_value = 2460000.0
        mock_calc_ut.return_value = ([120.5, 0, 0], 0)  # [–¥–æ–ª–≥–æ—Ç–∞, —à–∏—Ä–æ—Ç–∞, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ]

        calculator = TransitCalculator()
        location = Location(
            city="–ú–æ—Å–∫–≤–∞", lat=55.7558, lng=37.6176, timezone="Europe/Moscow"
        )
        birth_dt = datetime(
            1990, 6, 15, 12, 0, tzinfo=zoneinfo.ZoneInfo("Europe/Moscow")
        )

        planets = calculator._calculate_natal_planets(birth_dt, location)

        assert len(planets) == 10  # –í—Å–µ 10 –ø–ª–∞–Ω–µ—Ç –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã
        for planet_name in calculator.transit_planets.values():
            assert planet_name in planets
            assert planets[planet_name] == 120.5

    @patch("swisseph.calc_ut")
    @patch("swisseph.julday")
    def test_calculate_current_planets_success(self, mock_julday, mock_calc_ut):
        """–¢–µ—Å—Ç: —É—Å–ø–µ—à–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–∏—Ö –ø–ª–∞–Ω–µ—Ç"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–æ–≤ - —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–∫–æ—Ä–æ—Å—Ç—å—é
        mock_julday.return_value = 2460000.0
        mock_calc_ut.return_value = ([180.0, 0, 0, 1.0], 0)  # –¥–æ–±–∞–≤–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å

        calculator = TransitCalculator()
        location = Location(
            city="–ú–æ—Å–∫–≤–∞", lat=55.7558, lng=37.6176, timezone="Europe/Moscow"
        )
        current_dt = datetime.now(zoneinfo.ZoneInfo("Europe/Moscow"))

        planets = calculator._calculate_current_planets(current_dt, location)

        assert len(planets) == 10
        for planet_name in calculator.transit_planets.values():
            assert planet_name in planets
            # –¢–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫–æ—Ä—Ç–µ–∂ (–ø–æ–∑–∏—Ü–∏—è, —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω–æ—Å—Ç—å)
            position, is_retrograde = planets[planet_name]
            assert position == 180.0
            assert isinstance(is_retrograde, bool)

    def test_analyze_transits_improved_conjunction(self):
        """–¢–µ—Å—Ç: —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤ - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
        calculator = TransitCalculator()

        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: –Ω–∞—Ç–∞–ª—å–Ω–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –≤ 120¬∞, —Ç—Ä–∞–Ω–∑–∏—Ç–Ω–∞—è –≤ 120.5¬∞ (—Ä–∞–∑–Ω–∏—Ü–∞ 0.5¬∞ - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ)
        natal_planets = {"–°–æ–ª–Ω—Ü–µ": 120.0}
        current_planets = {"–°–æ–ª–Ω—Ü–µ": (120.5, False)}  # (–ø–æ–∑–∏—Ü–∏—è, —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω–æ—Å—Ç—å)
        current_dt = datetime.now()

        transits = calculator._analyze_transits_improved(
            natal_planets, current_planets, current_dt
        )

        assert len(transits) >= 1
        transit_desc = transits[0]
        assert "—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ" in transit_desc
        assert "–°–æ–ª–Ω—Ü–µ" in transit_desc
        assert "–Ω–∞—Ç–∞–ª—å–Ω—ã–π" in transit_desc

    def test_analyze_transits_improved_opposition(self):
        """–¢–µ—Å—Ç: —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤ - –æ–ø–ø–æ–∑–∏—Ü–∏—è"""
        calculator = TransitCalculator()

        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: –Ω–∞—Ç–∞–ª—å–Ω–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –≤ 0¬∞, —Ç—Ä–∞–Ω–∑–∏—Ç–Ω–∞—è –≤ 180¬∞ (–æ–ø–ø–æ–∑–∏—Ü–∏—è)
        natal_planets = {"–°–æ–ª–Ω—Ü–µ": 0.0}
        current_planets = {"–õ—É–Ω–∞": (180.0, False)}
        current_dt = datetime.now()

        transits = calculator._analyze_transits_improved(
            natal_planets, current_planets, current_dt
        )

        assert len(transits) >= 1
        transit_desc = transits[0]
        assert "–æ–ø–ø–æ–∑–∏—Ü–∏—è" in transit_desc
        assert "–õ—É–Ω–∞" in transit_desc
        assert "–Ω–∞—Ç–∞–ª—å–Ω—ã–π –°–æ–ª–Ω—Ü–µ" in transit_desc

    def test_analyze_transits_improved_square(self):
        """–¢–µ—Å—Ç: —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤ - –∫–≤–∞–¥—Ä–∞—Ç"""
        calculator = TransitCalculator()

        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: –Ω–∞—Ç–∞–ª—å–Ω–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –≤ 0¬∞, —Ç—Ä–∞–Ω–∑–∏—Ç–Ω–∞—è –≤ 90¬∞ (–∫–≤–∞–¥—Ä–∞—Ç)
        natal_planets = {"–°–æ–ª–Ω—Ü–µ": 0.0}
        current_planets = {"–ú–∞—Ä—Å": (90.0, False)}
        current_dt = datetime.now()

        transits = calculator._analyze_transits_improved(
            natal_planets, current_planets, current_dt
        )

        assert len(transits) >= 1
        transit_desc = transits[0]
        assert "–∫–≤–∞–¥—Ä–∞—Ç" in transit_desc

    def test_analyze_transits_improved_trine(self):
        """–¢–µ—Å—Ç: —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤ - —Ç—Ä–∏–Ω"""
        calculator = TransitCalculator()

        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: –Ω–∞—Ç–∞–ª—å–Ω–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –≤ 0¬∞, —Ç—Ä–∞–Ω–∑–∏—Ç–Ω–∞—è –≤ 120¬∞ (—Ç—Ä–∏–Ω)
        natal_planets = {"–°–æ–ª–Ω—Ü–µ": 0.0}
        current_planets = {"–Æ–ø–∏—Ç–µ—Ä": (120.0, False)}
        current_dt = datetime.now()

        transits = calculator._analyze_transits_improved(
            natal_planets, current_planets, current_dt
        )

        assert len(transits) >= 1
        transit_desc = transits[0]
        assert "—Ç—Ä–∏–Ω" in transit_desc

    def test_analyze_transits_improved_no_aspects(self):
        """–¢–µ—Å—Ç: —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤ - –Ω–µ—Ç –∞—Å–ø–µ–∫—Ç–æ–≤"""
        calculator = TransitCalculator()

        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: –±–æ–ª—å—à–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö, –Ω–µ—Ç –∑–Ω–∞—á–∏–º—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤
        natal_planets = {"–°–æ–ª–Ω—Ü–µ": 0.0}
        current_planets = {
            "–õ—É–Ω–∞": (45.0, False)
        }  # 45¬∞ - –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ –æ—Ä–±—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤
        current_dt = datetime.now()

        transits = calculator._analyze_transits_improved(
            natal_planets, current_planets, current_dt
        )

        assert len(transits) == 0

    def test_analyze_transits_retrograde_marking(self):
        """–¢–µ—Å—Ç: –æ—Ç–º–µ—Ç–∫–∞ —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω–æ—Å—Ç–∏ –≤ —Ç—Ä–∞–Ω–∑–∏—Ç–∞—Ö"""
        calculator = TransitCalculator()

        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω–æ–π –ø–ª–∞–Ω–µ—Ç–æ–π
        natal_planets = {"–°–æ–ª–Ω—Ü–µ": 120.0}
        current_planets = {"–ú–µ—Ä–∫—É—Ä–∏–π": (120.5, True)}  # –†–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω—ã–π –ú–µ—Ä–∫—É—Ä–∏–π
        current_dt = datetime.now()

        transits = calculator._analyze_transits_improved(
            natal_planets, current_planets, current_dt
        )

        assert len(transits) >= 1
        transit_desc = transits[0]
        assert "(R)" in transit_desc  # –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–º–µ—Ç–∫–∞ —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω–æ—Å—Ç–∏

    @patch.object(TransitCalculator, "get_current_transits")
    def test_get_transit_summary_with_transits(self, mock_get_transits):
        """–¢–µ—Å—Ç: –ø–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Å —Ç—Ä–∞–Ω–∑–∏—Ç–∞–º–∏"""
        mock_transits = [
            "–°–æ–ª–Ω—Ü–µ ‚òå –Ω–∞—Ç–∞–ª—å–Ω—ã–π –°–æ–ª–Ω—Ü–µ (—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, —Ç–æ—á–Ω—ã–π, –æ—Ä–± 0.2¬∞)",
            "–õ—É–Ω–∞ ‚òç –Ω–∞—Ç–∞–ª—å–Ω—ã–π –ú–∞—Ä—Å (–æ–ø–ø–æ–∑–∏—Ü–∏—è, —Ç–µ—Å–Ω—ã–π, –æ—Ä–± 1.1¬∞)",
        ]
        mock_get_transits.return_value = mock_transits

        calculator = TransitCalculator()
        location = Location(
            city="–ú–æ—Å–∫–≤–∞", lat=55.7558, lng=37.6176, timezone="Europe/Moscow"
        )
        birth_dt = datetime(
            1990, 6, 15, 12, 0, tzinfo=zoneinfo.ZoneInfo("Europe/Moscow")
        )

        summary = calculator.get_transit_summary(birth_dt, location)

        assert "üåü –¢–µ–∫—É—â–∏–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∞–Ω–∑–∏—Ç—ã:" in summary
        assert "1. –°–æ–ª–Ω—Ü–µ ‚òå –Ω–∞—Ç–∞–ª—å–Ω—ã–π –°–æ–ª–Ω—Ü–µ" in summary
        assert "2. –õ—É–Ω–∞ ‚òç –Ω–∞—Ç–∞–ª—å–Ω—ã–π –ú–∞—Ä—Å" in summary

    @patch.object(TransitCalculator, "get_current_transits")
    def test_get_transit_summary_no_transits(self, mock_get_transits):
        """–¢–µ—Å—Ç: –ø–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –±–µ–∑ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤"""
        mock_get_transits.return_value = []

        calculator = TransitCalculator()
        location = Location(
            city="–ú–æ—Å–∫–≤–∞", lat=55.7558, lng=37.6176, timezone="Europe/Moscow"
        )
        birth_dt = datetime(
            1990, 6, 15, 12, 0, tzinfo=zoneinfo.ZoneInfo("Europe/Moscow")
        )

        summary = calculator.get_transit_summary(birth_dt, location)

        assert summary == "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–Ω–∞—á–∏–º—ã—Ö —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤."

    @patch("swisseph.calc_ut")
    def test_calculate_natal_planets_swisseph_error(self, mock_calc_ut):
        """–¢–µ—Å—Ç: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ Swiss Ephemeris"""
        mock_calc_ut.side_effect = Exception("Swiss Ephemeris error")

        calculator = TransitCalculator()
        location = Location(
            city="–ú–æ—Å–∫–≤–∞", lat=55.7558, lng=37.6176, timezone="Europe/Moscow"
        )
        birth_dt = datetime(
            1990, 6, 15, 12, 0, tzinfo=zoneinfo.ZoneInfo("Europe/Moscow")
        )

        planets = calculator._calculate_natal_planets(birth_dt, location)

        assert planets == {}

    def test_normalize_angle(self):
        """–¢–µ—Å—Ç: –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —É–≥–ª–æ–≤"""
        calculator = TransitCalculator()

        assert calculator._normalize_angle(370) == 10
        assert calculator._normalize_angle(-10) == 350
        assert calculator._normalize_angle(180) == 180
        assert calculator._normalize_angle(0) == 0

    def test_calculate_angular_distance(self):
        """–¢–µ—Å—Ç: —Ä–∞—Å—á–µ—Ç —É–≥–ª–æ–≤–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è"""
        calculator = TransitCalculator()

        # –û–±—ã—á–Ω—ã–µ —Å–ª—É—á–∞–∏
        assert calculator._calculate_angular_distance(0, 90) == 90
        assert calculator._calculate_angular_distance(90, 0) == 90
        assert calculator._calculate_angular_distance(0, 180) == 180

        # –ß–µ—Ä–µ–∑ –≥—Ä–∞–Ω–∏—Ü—É 360¬∞
        assert calculator._calculate_angular_distance(10, 350) == 20
        assert calculator._calculate_angular_distance(350, 10) == 20


if __name__ == "__main__":
    pytest.main([__file__])
