"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö AI-—Å–µ—Ä–≤–∏—Å–æ–≤ SolarBalance
"""
import asyncio
import logging
from datetime import datetime
from services.ai_predictions import AIPredictionService
from services.star_advice_service import StarAdviceService
from services.motivation_service import MotivationService
from models import PlanetPosition, Location, BirthData
from database import User, db_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

async def test_ai_prediction_service():
    """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ AI —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
    print("\nüîÆ === –¢–ï–°–¢ AI PREDICTION SERVICE ===")
    
    service = AIPredictionService()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    print(f"‚úì AI –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {'–î–∞' if service.client else '–ù–µ—Ç'}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ–≥–Ω–æ–∑–∞
    test_planets = {
        "–°–æ–ª–Ω—Ü–µ": PlanetPosition(sign="–õ–µ–≤", degree=15.5),
        "–õ—É–Ω–∞": PlanetPosition(sign="–°–∫–æ—Ä–ø–∏–æ–Ω", degree=22.3),
        "–ú–µ—Ä–∫—É—Ä–∏–π": PlanetPosition(sign="–î–µ–≤–∞", degree=8.7)
    }
    
    try:
        result = await service.generate_prediction(
            user_planets=test_planets,
            prediction_type="—Å–µ–≥–æ–¥–Ω—è",
            owner_name="–¢–µ—Å—Ç"
        )
        
        print(f"‚úì –ü—Ä–æ–≥–Ω–æ–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"‚úì –°–æ–¥–µ—Ä–∂–∏—Ç AI –º–µ—Ç–∫—É: {'AI' in result}")
        return True
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞: {e}")
        return False


async def test_star_advice_service():
    """–¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –∑–≤–µ–∑–¥–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞"""
    print("\nüåü === –¢–ï–°–¢ STAR ADVICE SERVICE ===")
    
    service = StarAdviceService()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤
    test_questions = [
        ("–ö–∞–∫ –º–Ω–µ –Ω–∞–π—Ç–∏ –ª—é–±–æ–≤—å?", True),  # –í–∞–ª–∏–¥–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å
        ("–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –∑–∞–≤—Ç—Ä–∞?", False),  # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        ("–ß—Ç–æ –≥–æ–≤–æ—Ä—è—Ç –∑–≤–µ–∑–¥—ã –æ –º–æ–µ–π –∫–∞—Ä—å–µ—Ä–µ?", True),  # –í–∞–ª–∏–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    ]
    
    validation_passed = 0
    for question, expected in test_questions:
        try:
            result = await service.validate_question(question)
            is_valid = result.get("is_valid", False)
            
            if is_valid == expected:
                print(f"‚úì –í–∞–ª–∏–¥–∞—Ü–∏—è '{question[:30]}...': {is_valid}")
                validation_passed += 1
            else:
                print(f"‚úó –í–∞–ª–∏–¥–∞—Ü–∏—è '{question[:30]}...': {is_valid} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected})")
                
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
    
    print(f"‚úì –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞: {validation_passed}/{len(test_questions)}")
    
    # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ (–µ—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç)
    if validation_passed > 0:
        try:
            # –ú–æ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            test_planets = {
                "–°–æ–ª–Ω—Ü–µ": PlanetPosition(sign="–ë–ª–∏–∑–Ω–µ—Ü—ã", degree=10.0),
                "–õ—É–Ω–∞": PlanetPosition(sign="–î–µ–≤–∞", degree=25.0)
            }
            
            birth_dt = datetime(1990, 6, 15, 12, 0)
            location = Location(city="–ú–æ—Å–∫–≤–∞", lat=55.7558, lng=37.6176, timezone="Europe/Moscow")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å
            answer = await service.generate_advice(
                question="–ö–∞–∫ –º–Ω–µ –Ω–∞–π—Ç–∏ —Å–≤–æ–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ?",
                category="growth",
                user_planets=test_planets,
                birth_dt=birth_dt,
                location=location,
                user_name="–¢–µ—Å—Ç"
            )
            
            print(f"‚úì –°–æ–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {len(answer)} —Å–∏–º–≤–æ–ª–æ–≤")
            return True
            
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–≤–µ—Ç–∞: {e}")
            return False
    
    return validation_passed > 0


async def test_motivation_service():
    """–¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–π"""
    print("\nüåÖ === –¢–ï–°–¢ MOTIVATION SERVICE ===")
    
    ai_service = AIPredictionService()
    service = MotivationService(ai_service)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_user = User(
        telegram_id=999999999,
        name="–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    )
    
    try:
        motivation = await service.generate_motivation(test_user, is_subscribed=False)
        
        if motivation:
            print(f"‚úì –ú–æ—Ç–∏–≤–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞: {len(motivation)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"‚úì –°–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–∑—ã–≤ –∫ –ø–æ–¥–ø–∏—Å–∫–µ: {'Premium' in motivation}")
            return True
        else:
            print("‚úó –ú–æ—Ç–∏–≤–∞—Ü–∏—è –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞")
            return False
            
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞: {e}")
        return False


async def test_ai_fallback():
    """–¢–µ—Å—Ç fallback —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ AI"""
    print("\nüõ°Ô∏è === –¢–ï–°–¢ FALLBACK –°–ò–°–¢–ï–ú–´ ===")
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —Å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º –∫–ª—é—á–æ–º
    import os
    original_key = os.environ.get('AI_API')
    os.environ['AI_API'] = 'invalid_key'
    
    try:
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º –∫–ª—é—á–æ–º
        from importlib import reload
        import services.ai_predictions
        reload(services.ai_predictions)
        
        service = services.ai_predictions.AIPredictionService()
        
        test_planets = {
            "–°–æ–ª–Ω—Ü–µ": PlanetPosition(sign="–û–≤–µ–Ω", degree=10.0)
        }
        
        result = await service.generate_prediction(
            user_planets=test_planets,
            prediction_type="—Å–µ–≥–æ–¥–Ω—è"
        )
        
        print(f"‚úì Fallback –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–ª—É—á–µ–Ω: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"‚úì –≠—Ç–æ fallback: {'fallback' in result.lower() or '–±–∞–∑–æ–≤—ã—Ö' in result}")
        
        return True
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ fallback: {e}")
        return False
        
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
        if original_key:
            os.environ['AI_API'] = original_key
        elif 'AI_API' in os.environ:
            del os.environ['AI_API']


async def run_comprehensive_test():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ === –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê AI-–°–ï–†–í–ò–°–û–í ===")
    print("=" * 50)
    
    results = []
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    tests = [
        ("AI Predictions", test_ai_prediction_service),
        ("Star Advice", test_star_advice_service),
        ("Motivation Service", test_motivation_service),
        ("Fallback System", test_ai_fallback),
    ]
    
    for test_name, test_func in tests:
        try:
            result = await test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ {test_name}: {e}")
            results.append((test_name, False))
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("üìä === –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===")
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        print(f"{status} - {test_name}")
        if result:
            passed += 1
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(results):
        print("üéâ –í–°–ï AI-–°–ï–†–í–ò–°–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
    elif passed > len(results) // 2:
        print("‚ö†Ô∏è –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
    else:
        print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –° AI-–°–ï–†–í–ò–°–ê–ú–ò!")
    
    return passed, len(results)


if __name__ == "__main__":
    asyncio.run(run_comprehensive_test()) 