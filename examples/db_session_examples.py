"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ @with_db_session –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ db_session_context
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞ DRY –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏—è–º–∏ –ë–î
"""
import asyncio
from datetime import datetime
from database_async import AsyncDatabaseManager, with_db_session, db_session_context
from models import User, NatalChart
from sqlalchemy import select

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
db_manager = AsyncDatabaseManager("sqlite+aiosqlite:///examples.db")


class UserService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ @with_db_session"""
    
    def __init__(self, db_manager: AsyncDatabaseManager):
        self.db_manager = db_manager
    
    @with_db_session
    async def get_user_by_id(self, telegram_id: int) -> User:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä"""
        result = await self._session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        return result.scalar_one_or_none()
    
    @with_db_session
    async def create_user(self, telegram_id: int, name: str) -> User:
        """–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä"""
        user = User(telegram_id=telegram_id, name=name)
        self._session.add(user)
        await self._session.flush()
        await self._session.refresh(user)
        return user
    
    @with_db_session
    async def update_user_name(self, telegram_id: int, new_name: str) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä"""
        result = await self._session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            return False
        
        user.name = new_name
        await self._session.flush()
        return True
    
    @with_db_session
    async def get_user_charts(self, telegram_id: int) -> list[NatalChart]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä"""
        result = await self._session.execute(
            select(NatalChart)
            .where(NatalChart.telegram_id == telegram_id)
            .order_by(NatalChart.created_at.desc())
        )
        return list(result.scalars().all())


class ChartService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Ç–∞–ª—å–Ω—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    
    def __init__(self, db_manager: AsyncDatabaseManager):
        self.db_manager = db_manager
    
    async def create_chart_with_context(self, telegram_id: int, name: str, city: str) -> NatalChart:
        """–°–æ–∑–¥–∞—Ç—å –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä"""
        async with db_session_context(self.db_manager) as session:
            chart = NatalChart(
                telegram_id=telegram_id,
                name=name,
                city=city,
                latitude=55.7558,
                longitude=37.6176,
                timezone="Europe/Moscow",
                birth_date=datetime.now(),
                birth_time_specified=True,
                has_warning=False,
                planets_data={"–°–æ–ª–Ω—Ü–µ": {"sign": "–õ–µ–≤", "degree": 15.0}}
            )
            
            session.add(chart)
            await session.flush()
            await session.refresh(chart)
            return chart
    
    async def get_charts_by_city(self, city: str) -> list[NatalChart]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ä—Ç—ã –ø–æ –≥–æ—Ä–æ–¥—É –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä"""
        async with db_session_context(self.db_manager) as session:
            result = await session.execute(
                select(NatalChart).where(NatalChart.city == city)
            )
            return list(result.scalars().all())


async def demonstrate_dry_principle():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–Ω—Ü–∏–ø–∞ DRY"""
    print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–ò–ù–¶–ò–ü–ê DRY –í –†–ê–ë–û–¢–ï –° –ë–î")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    await db_manager.init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
    user_service = UserService(db_manager)
    chart_service = ChartService(db_manager)
    
    # –ü—Ä–∏–º–µ—Ä 1: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ @with_db_session
    print("\nüìù –ü–†–ò–ú–ï–† 1: –î–µ–∫–æ—Ä–∞—Ç–æ—Ä @with_db_session")
    print("-" * 30)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await user_service.create_user(123456, "–¢–µ—Å—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {user.name}")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    found_user = await user_service.get_user_by_id(123456)
    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {found_user.name}")
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    success = await user_service.update_user_name(123456, "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ò–º—è")
    print(f"‚úÖ –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {success}")
    
    # –ü—Ä–∏–º–µ—Ä 2: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    print("\nüìù –ü–†–ò–ú–ï–† 2: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä db_session_context")
    print("-" * 30)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
    chart = await chart_service.create_chart_with_context(123456, "–ú–æ—è –∫–∞—Ä—Ç–∞", "–ú–æ—Å–∫–≤–∞")
    print(f"‚úÖ –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: {chart.name}")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç –ø–æ –≥–æ—Ä–æ–¥—É
    charts = await chart_service.get_charts_by_city("–ú–æ—Å–∫–≤–∞")
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç –≤ –ú–æ—Å–∫–≤–µ: {len(charts)}")
    
    # –ü—Ä–∏–º–µ—Ä 3: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å "–≥—Ä—è–∑–Ω—ã–º" –∫–æ–¥–æ–º
    print("\nüìù –ü–†–ò–ú–ï–† 3: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º –±–µ–∑ DRY")
    print("-" * 30)
    
    print("‚ùå –ë–ï–ó DRY (–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –∫–æ–¥):")
    print("""
    async def get_user_bad(self, telegram_id: int):
        async with self.get_session() as session:
            result = await session.execute(select(User).where(User.telegram_id == telegram_id))
            return result.scalar_one_or_none()
    
    async def create_user_bad(self, telegram_id: int, name: str):
        async with self.get_session() as session:
            user = User(telegram_id=telegram_id, name=name)
            session.add(user)
            await session.commit()
            return user
    """)
    
    print("‚úÖ –° DRY (–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä):")
    print("""
    @with_db_session
    async def get_user_good(self, telegram_id: int):
        result = await self._session.execute(select(User).where(User.telegram_id == telegram_id))
        return result.scalar_one_or_none()
    
    @with_db_session
    async def create_user_good(self, telegram_id: int, name: str):
        user = User(telegram_id=telegram_id, name=name)
        self._session.add(user)
        await self._session.flush()
        return user
    """)
    
    # –ü—Ä–∏–º–µ—Ä 4: –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ DRY
    print("\nüìù –ü–†–ò–ú–ï–† 4: –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è DRY")
    print("-" * 30)
    
    advantages = [
        "üöÄ –ú–µ–Ω—å—à–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è –∫–æ–¥–∞",
        "üîß –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏",
        "üõ°Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ rollback",
        "üìñ –ë–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –∫–æ–¥",
        "‚ö° –õ–µ–≥—á–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å",
        "üéØ –ï–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–∞–±–æ—Ç–µ —Å –ë–î"
    ]
    
    for advantage in advantages:
        print(advantage)
    
    # –û—á–∏—Å—Ç–∫–∞
    await db_manager.delete_user_data(123456)
    await db_manager.close()
    
    print("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


async def performance_comparison():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –∏ –±–µ–∑ DRY"""
    print("\n‚ö° –°–†–ê–í–ù–ï–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("=" * 40)
    
    await db_manager.init_db()
    user_service = UserService(db_manager)
    
    # –¢–µ—Å—Ç —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º
    start_time = asyncio.get_event_loop().time()
    
    for i in range(100):
        await user_service.create_user(1000 + i, f"User {i}")
    
    decorator_time = asyncio.get_event_loop().time() - start_time
    
    # –¢–µ—Å—Ç –±–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ (—Ä—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏)
    start_time = asyncio.get_event_loop().time()
    
    for i in range(100):
        async with db_manager.get_session() as session:
            user = User(telegram_id=2000 + i, name=f"User {i}")
            session.add(user)
            await session.flush()
    
    manual_time = asyncio.get_event_loop().time() - start_time
    
    print(f"‚è±Ô∏è –í—Ä–µ–º—è —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º: {decorator_time:.3f}—Å")
    print(f"‚è±Ô∏è –í—Ä–µ–º—è –±–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞: {manual_time:.3f}—Å")
    print(f"üìà –†–∞–∑–Ω–∏—Ü–∞: {((manual_time - decorator_time) / manual_time * 100):.1f}%")
    
    # –û—á–∏—Å—Ç–∫–∞
    for i in range(100):
        await db_manager.delete_user_data(1000 + i)
        await db_manager.delete_user_data(2000 + i)
    
    await db_manager.close()


if __name__ == "__main__":
    async def main():
        await demonstrate_dry_principle()
        await performance_comparison()
    
    asyncio.run(main()) 